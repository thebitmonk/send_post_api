/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsPricing', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsPricing();
      });

      it('should create an instance of ModelsPricing', function() {
        // TODO: update the code to test ModelsPricing
        expect(instance).to.be.a(SendPostApi.ModelsPricing);
      });

      it('should have the property basePriceId (base name: "basePriceId")', function() {
        // TODO: update the code to test the property basePriceId
        expect(instance).to.have.property('basePriceId');
        // expect(instance.basePriceId).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property overage (base name: "overage")', function() {
        // TODO: update the code to test the property overage
        expect(instance).to.have.property('overage');
        // expect(instance.overage).to.be(expectedValueLiteral);
      });

      it('should have the property planName (base name: "planName")', function() {
        // TODO: update the code to test the property planName
        expect(instance).to.have.property('planName');
        // expect(instance.planName).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionProductId (base name: "subscriptionProductId")', function() {
        // TODO: update the code to test the property subscriptionProductId
        expect(instance).to.have.property('subscriptionProductId');
        // expect(instance.subscriptionProductId).to.be(expectedValueLiteral);
      });

      it('should have the property usagePriceId (base name: "usagePriceId")', function() {
        // TODO: update the code to test the property usagePriceId
        expect(instance).to.have.property('usagePriceId');
        // expect(instance.usagePriceId).to.be(expectedValueLiteral);
      });

    });
  });

}));
