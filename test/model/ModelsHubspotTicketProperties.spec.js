/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsHubspotTicketProperties', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsHubspotTicketProperties();
      });

      it('should create an instance of ModelsHubspotTicketProperties', function() {
        // TODO: update the code to test ModelsHubspotTicketProperties
        expect(instance).to.be.a(SendPostApi.ModelsHubspotTicketProperties);
      });

      it('should have the property content (base name: "content")', function() {
        // TODO: update the code to test the property content
        expect(instance).to.have.property('content');
        // expect(instance.content).to.be(expectedValueLiteral);
      });

      it('should have the property createdate (base name: "createdate")', function() {
        // TODO: update the code to test the property createdate
        expect(instance).to.have.property('createdate');
        // expect(instance.createdate).to.be(expectedValueLiteral);
      });

      it('should have the property hsPipeline (base name: "hs_pipeline")', function() {
        // TODO: update the code to test the property hsPipeline
        expect(instance).to.have.property('hsPipeline');
        // expect(instance.hsPipeline).to.be(expectedValueLiteral);
      });

      it('should have the property hsPipelineStage (base name: "hs_pipeline_stage")', function() {
        // TODO: update the code to test the property hsPipelineStage
        expect(instance).to.have.property('hsPipelineStage');
        // expect(instance.hsPipelineStage).to.be(expectedValueLiteral);
      });

      it('should have the property hsTicketCategory (base name: "hs_ticket_category")', function() {
        // TODO: update the code to test the property hsTicketCategory
        expect(instance).to.have.property('hsTicketCategory');
        // expect(instance.hsTicketCategory).to.be(expectedValueLiteral);
      });

      it('should have the property hsTicketPriority (base name: "hs_ticket_priority")', function() {
        // TODO: update the code to test the property hsTicketPriority
        expect(instance).to.have.property('hsTicketPriority');
        // expect(instance.hsTicketPriority).to.be(expectedValueLiteral);
      });

      it('should have the property linearIssue (base name: "linear_issue")', function() {
        // TODO: update the code to test the property linearIssue
        expect(instance).to.have.property('linearIssue');
        // expect(instance.linearIssue).to.be(expectedValueLiteral);
      });

      it('should have the property linearUuid (base name: "linear_uuid")', function() {
        // TODO: update the code to test the property linearUuid
        expect(instance).to.have.property('linearUuid');
        // expect(instance.linearUuid).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

    });
  });

}));
