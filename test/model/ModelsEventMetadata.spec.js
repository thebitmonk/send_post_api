/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.ModelsEventMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelsEventMetadata', function() {
    it('should create an instance of ModelsEventMetadata', function() {
      // uncomment below and update the code to test ModelsEventMetadata
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be.a(SendPostApi.ModelsEventMetadata);
    });

    it('should have the property clickedURL (base name: "clickedURL")', function() {
      // uncomment below and update the code to test the property clickedURL
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property device (base name: "device")', function() {
      // uncomment below and update the code to test the property device
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property geo (base name: "geo")', function() {
      // uncomment below and update the code to test the property geo
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property os (base name: "os")', function() {
      // uncomment below and update the code to test the property os
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property smtpCode (base name: "smtpCode")', function() {
      // uncomment below and update the code to test the property smtpCode
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property smtpDescription (base name: "smtpDescription")', function() {
      // uncomment below and update the code to test the property smtpDescription
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

    it('should have the property userAgent (base name: "userAgent")', function() {
      // uncomment below and update the code to test the property userAgent
      //var instance = new SendPostApi.ModelsEventMetadata();
      //expect(instance).to.be();
    });

  });

}));
