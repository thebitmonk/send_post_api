/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.ModelsQEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelsQEvent', function() {
    it('should create an instance of ModelsQEvent', function() {
      // uncomment below and update the code to test ModelsQEvent
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be.a(SendPostApi.ModelsQEvent);
    });

    it('should have the property accountID (base name: "accountID")', function() {
      // uncomment below and update the code to test the property accountID
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventID (base name: "eventID")', function() {
      // uncomment below and update the code to test the property eventID
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventMetadata (base name: "eventMetadata")', function() {
      // uncomment below and update the code to test the property eventMetadata
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property ipID (base name: "ipID")', function() {
      // uncomment below and update the code to test the property ipID
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property messageID (base name: "messageID")', function() {
      // uncomment below and update the code to test the property messageID
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property messageType (base name: "messageType")', function() {
      // uncomment below and update the code to test the property messageType
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property subAccountID (base name: "subAccountID")', function() {
      // uncomment below and update the code to test the property subAccountID
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property submittedAt (base name: "submittedAt")', function() {
      // uncomment below and update the code to test the property submittedAt
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property tpspId (base name: "tpspId")', function() {
      // uncomment below and update the code to test the property tpspId
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new SendPostApi.ModelsQEvent();
      //expect(instance).to.be();
    });

  });

}));
