/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsListCleaningJob', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsListCleaningJob();
      });

      it('should create an instance of ModelsListCleaningJob', function() {
        // TODO: update the code to test ModelsListCleaningJob
        expect(instance).to.be.a(SendPostApi.ModelsListCleaningJob);
      });

      it('should have the property batchSize (base name: "batchSize")', function() {
        // TODO: update the code to test the property batchSize
        expect(instance).to.have.property('batchSize');
        // expect(instance.batchSize).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property currentBatch (base name: "currentBatch")', function() {
        // TODO: update the code to test the property currentBatch
        expect(instance).to.have.property('currentBatch');
        // expect(instance.currentBatch).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property resultInvalidPath (base name: "resultInvalidPath")', function() {
        // TODO: update the code to test the property resultInvalidPath
        expect(instance).to.have.property('resultInvalidPath');
        // expect(instance.resultInvalidPath).to.be(expectedValueLiteral);
      });

      it('should have the property resultPath (base name: "resultPath")', function() {
        // TODO: update the code to test the property resultPath
        expect(instance).to.have.property('resultPath');
        // expect(instance.resultPath).to.be(expectedValueLiteral);
      });

      it('should have the property resultValidPath (base name: "resultValidPath")', function() {
        // TODO: update the code to test the property resultValidPath
        expect(instance).to.have.property('resultValidPath');
        // expect(instance.resultValidPath).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
