/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsValidationStat', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsValidationStat();
      });

      it('should create an instance of ModelsValidationStat', function() {
        // TODO: update the code to test ModelsValidationStat
        expect(instance).to.be.a(SendPostApi.ModelsValidationStat);
      });

      it('should have the property catchAll (base name: "catchAll")', function() {
        // TODO: update the code to test the property catchAll
        expect(instance).to.have.property('catchAll');
        // expect(instance.catchAll).to.be(expectedValueLiteral);
      });

      it('should have the property hardBounced (base name: "hardBounced")', function() {
        // TODO: update the code to test the property hardBounced
        expect(instance).to.have.property('hardBounced');
        // expect(instance.hardBounced).to.be(expectedValueLiteral);
      });

      it('should have the property initiated (base name: "initiated")', function() {
        // TODO: update the code to test the property initiated
        expect(instance).to.have.property('initiated');
        // expect(instance.initiated).to.be(expectedValueLiteral);
      });

      it('should have the property invalid (base name: "invalid")', function() {
        // TODO: update the code to test the property invalid
        expect(instance).to.have.property('invalid');
        // expect(instance.invalid).to.be(expectedValueLiteral);
      });

      it('should have the property processed (base name: "processed")', function() {
        // TODO: update the code to test the property processed
        expect(instance).to.have.property('processed');
        // expect(instance.processed).to.be(expectedValueLiteral);
      });

      it('should have the property softBounced (base name: "softBounced")', function() {
        // TODO: update the code to test the property softBounced
        expect(instance).to.have.property('softBounced');
        // expect(instance.softBounced).to.be(expectedValueLiteral);
      });

      it('should have the property unknown (base name: "unknown")', function() {
        // TODO: update the code to test the property unknown
        expect(instance).to.have.property('unknown');
        // expect(instance.unknown).to.be(expectedValueLiteral);
      });

      it('should have the property valid (base name: "valid")', function() {
        // TODO: update the code to test the property valid
        expect(instance).to.have.property('valid');
        // expect(instance.valid).to.be(expectedValueLiteral);
      });

    });
  });

}));
