/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsMailgunClientInfo', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsMailgunClientInfo();
      });

      it('should create an instance of ModelsMailgunClientInfo', function() {
        // TODO: update the code to test ModelsMailgunClientInfo
        expect(instance).to.be.a(SendPostApi.ModelsMailgunClientInfo);
      });

      it('should have the property bot (base name: "bot")', function() {
        // TODO: update the code to test the property bot
        expect(instance).to.have.property('bot');
        // expect(instance.bot).to.be(expectedValueLiteral);
      });

      it('should have the property clientName (base name: "client-name")', function() {
        // TODO: update the code to test the property clientName
        expect(instance).to.have.property('clientName');
        // expect(instance.clientName).to.be(expectedValueLiteral);
      });

      it('should have the property clientOs (base name: "client-os")', function() {
        // TODO: update the code to test the property clientOs
        expect(instance).to.have.property('clientOs');
        // expect(instance.clientOs).to.be(expectedValueLiteral);
      });

      it('should have the property clientType (base name: "client-type")', function() {
        // TODO: update the code to test the property clientType
        expect(instance).to.have.property('clientType');
        // expect(instance.clientType).to.be(expectedValueLiteral);
      });

      it('should have the property deviceType (base name: "device-type")', function() {
        // TODO: update the code to test the property deviceType
        expect(instance).to.have.property('deviceType');
        // expect(instance.deviceType).to.be(expectedValueLiteral);
      });

      it('should have the property userAgent (base name: "user-agent")', function() {
        // TODO: update the code to test the property userAgent
        expect(instance).to.have.property('userAgent');
        // expect(instance.userAgent).to.be(expectedValueLiteral);
      });

    });
  });

}));
