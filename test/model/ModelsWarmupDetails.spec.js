/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsWarmupDetails', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsWarmupDetails();
      });

      it('should create an instance of ModelsWarmupDetails', function() {
        // TODO: update the code to test ModelsWarmupDetails
        expect(instance).to.be.a(SendPostApi.ModelsWarmupDetails);
      });

      it('should have the property currentVolumePerHour (base name: "currentVolumePerHour")', function() {
        // TODO: update the code to test the property currentVolumePerHour
        expect(instance).to.have.property('currentVolumePerHour');
        // expect(instance.currentVolumePerHour).to.be(expectedValueLiteral);
      });

      it('should have the property decreasePercentage (base name: "decreasePercentage")', function() {
        // TODO: update the code to test the property decreasePercentage
        expect(instance).to.have.property('decreasePercentage');
        // expect(instance.decreasePercentage).to.be(expectedValueLiteral);
      });

      it('should have the property deliverabilityGoal (base name: "deliverabilityGoal")', function() {
        // TODO: update the code to test the property deliverabilityGoal
        expect(instance).to.have.property('deliverabilityGoal');
        // expect(instance.deliverabilityGoal).to.be(expectedValueLiteral);
      });

      it('should have the property gracePeriodNeeded (base name: "gracePeriodNeeded")', function() {
        // TODO: update the code to test the property gracePeriodNeeded
        expect(instance).to.have.property('gracePeriodNeeded');
        // expect(instance.gracePeriodNeeded).to.be(expectedValueLiteral);
      });

      it('should have the property increasePercentage (base name: "increasePercentage")', function() {
        // TODO: update the code to test the property increasePercentage
        expect(instance).to.have.property('increasePercentage');
        // expect(instance.increasePercentage).to.be(expectedValueLiteral);
      });

      it('should have the property isPaused (base name: "isPaused")', function() {
        // TODO: update the code to test the property isPaused
        expect(instance).to.have.property('isPaused');
        // expect(instance.isPaused).to.be(expectedValueLiteral);
      });

      it('should have the property isWarmupCompleted (base name: "isWarmupCompleted")', function() {
        // TODO: update the code to test the property isWarmupCompleted
        expect(instance).to.have.property('isWarmupCompleted');
        // expect(instance.isWarmupCompleted).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "lastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property maxBounceRate (base name: "maxBounceRate")', function() {
        // TODO: update the code to test the property maxBounceRate
        expect(instance).to.have.property('maxBounceRate');
        // expect(instance.maxBounceRate).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property reasonForSpeedChange (base name: "reasonForSpeedChange")', function() {
        // TODO: update the code to test the property reasonForSpeedChange
        expect(instance).to.have.property('reasonForSpeedChange');
        // expect(instance.reasonForSpeedChange).to.be(expectedValueLiteral);
      });

      it('should have the property timePerEmail (base name: "timePerEmail")', function() {
        // TODO: update the code to test the property timePerEmail
        expect(instance).to.have.property('timePerEmail');
        // expect(instance.timePerEmail).to.be(expectedValueLiteral);
      });

      it('should have the property warmupDay (base name: "warmupDay")', function() {
        // TODO: update the code to test the property warmupDay
        expect(instance).to.have.property('warmupDay');
        // expect(instance.warmupDay).to.be(expectedValueLiteral);
      });

    });
  });

}));
