/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsBlackListResult', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsBlackListResult();
      });

      it('should create an instance of ModelsBlackListResult', function() {
        // TODO: update the code to test ModelsBlackListResult
        expect(instance).to.be.a(SendPostApi.ModelsBlackListResult);
      });

      it('should have the property alexaTop100k (base name: "alexaTop100k")', function() {
        // TODO: update the code to test the property alexaTop100k
        expect(instance).to.have.property('alexaTop100k');
        // expect(instance.alexaTop100k).to.be(expectedValueLiteral);
      });

      it('should have the property alexaTop10k (base name: "alexaTop10k")', function() {
        // TODO: update the code to test the property alexaTop10k
        expect(instance).to.have.property('alexaTop10k');
        // expect(instance.alexaTop10k).to.be(expectedValueLiteral);
      });

      it('should have the property alexaTop250k (base name: "alexaTop250k")', function() {
        // TODO: update the code to test the property alexaTop250k
        expect(instance).to.have.property('alexaTop250k');
        // expect(instance.alexaTop250k).to.be(expectedValueLiteral);
      });

      it('should have the property blackLists (base name: "blackLists")', function() {
        // TODO: update the code to test the property blackLists
        expect(instance).to.have.property('blackLists');
        // expect(instance.blackLists).to.be(expectedValueLiteral);
      });

      it('should have the property domainLength (base name: "domainLength")', function() {
        // TODO: update the code to test the property domainLength
        expect(instance).to.have.property('domainLength');
        // expect(instance.domainLength).to.be(expectedValueLiteral);
      });

      it('should have the property host (base name: "host")', function() {
        // TODO: update the code to test the property host
        expect(instance).to.have.property('host');
        // expect(instance.host).to.be(expectedValueLiteral);
      });

      it('should have the property mostAbusedTld (base name: "mostAbusedTld")', function() {
        // TODO: update the code to test the property mostAbusedTld
        expect(instance).to.have.property('mostAbusedTld');
        // expect(instance.mostAbusedTld).to.be(expectedValueLiteral);
      });

    });
  });

}));
