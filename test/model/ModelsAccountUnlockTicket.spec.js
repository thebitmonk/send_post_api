/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsAccountUnlockTicket', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsAccountUnlockTicket();
      });

      it('should create an instance of ModelsAccountUnlockTicket', function() {
        // TODO: update the code to test ModelsAccountUnlockTicket
        expect(instance).to.be.a(SendPostApi.ModelsAccountUnlockTicket);
      });

      it('should have the property accountEmail (base name: "accountEmail")', function() {
        // TODO: update the code to test the property accountEmail
        expect(instance).to.have.property('accountEmail');
        // expect(instance.accountEmail).to.be(expectedValueLiteral);
      });

      it('should have the property businessWebURL (base name: "businessWebURL")', function() {
        // TODO: update the code to test the property businessWebURL
        expect(instance).to.have.property('businessWebURL');
        // expect(instance.businessWebURL).to.be(expectedValueLiteral);
      });

      it('should have the property coldEmails (base name: "coldEmails")', function() {
        // TODO: update the code to test the property coldEmails
        expect(instance).to.have.property('coldEmails');
        // expect(instance.coldEmails).to.be(expectedValueLiteral);
      });

      it('should have the property emailCollection (base name: "emailCollection")', function() {
        // TODO: update the code to test the property emailCollection
        expect(instance).to.have.property('emailCollection');
        // expect(instance.emailCollection).to.be(expectedValueLiteral);
      });

      it('should have the property emailContent (base name: "emailContent")', function() {
        // TODO: update the code to test the property emailContent
        expect(instance).to.have.property('emailContent');
        // expect(instance.emailContent).to.be(expectedValueLiteral);
      });

      it('should have the property sendingDomains (base name: "sendingDomains")', function() {
        // TODO: update the code to test the property sendingDomains
        expect(instance).to.have.property('sendingDomains');
        // expect(instance.sendingDomains).to.be(expectedValueLiteral);
      });

      it('should have the property sendingVolumePerMonth (base name: "sendingVolumePerMonth")', function() {
        // TODO: update the code to test the property sendingVolumePerMonth
        expect(instance).to.have.property('sendingVolumePerMonth');
        // expect(instance.sendingVolumePerMonth).to.be(expectedValueLiteral);
      });

    });
  });

}));
