/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.ModelsEIncident();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelsEIncident', function() {
    it('should create an instance of ModelsEIncident', function() {
      // uncomment below and update the code to test ModelsEIncident
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be.a(SendPostApi.ModelsEIncident);
    });

    it('should have the property assignedTo (base name: "assignedTo")', function() {
      // uncomment below and update the code to test the property assignedTo
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property author (base name: "author")', function() {
      // uncomment below and update the code to test the property author
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property relatedIP (base name: "relatedIP")', function() {
      // uncomment below and update the code to test the property relatedIP
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property relatedSubAccount (base name: "relatedSubAccount")', function() {
      // uncomment below and update the code to test the property relatedSubAccount
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new SendPostApi.ModelsEIncident();
      //expect(instance).to.be();
    });

  });

}));
