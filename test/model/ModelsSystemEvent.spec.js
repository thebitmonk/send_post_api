/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsSystemEvent', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsSystemEvent();
      });

      it('should create an instance of ModelsSystemEvent', function() {
        // TODO: update the code to test ModelsSystemEvent
        expect(instance).to.be.a(SendPostApi.ModelsSystemEvent);
      });

      it('should have the property accountTemplate (base name: "AccountTemplate")', function() {
        // TODO: update the code to test the property accountTemplate
        expect(instance).to.have.property('accountTemplate');
        // expect(instance.accountTemplate).to.be(expectedValueLiteral);
      });

      it('should have the property accountWebhook (base name: "AccountWebhook")', function() {
        // TODO: update the code to test the property accountWebhook
        expect(instance).to.have.property('accountWebhook');
        // expect(instance.accountWebhook).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property domain (base name: "domain")', function() {
        // TODO: update the code to test the property domain
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property entity (base name: "entity")', function() {
        // TODO: update the code to test the property entity
        expect(instance).to.have.property('entity');
        // expect(instance.entity).to.be(expectedValueLiteral);
      });

      it('should have the property eventId (base name: "eventId")', function() {
        // TODO: update the code to test the property eventId
        expect(instance).to.have.property('eventId');
        // expect(instance.eventId).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "eventType")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property incident (base name: "incident")', function() {
        // TODO: update the code to test the property incident
        expect(instance).to.have.property('incident');
        // expect(instance.incident).to.be(expectedValueLiteral);
      });

      it('should have the property integration (base name: "integration")', function() {
        // TODO: update the code to test the property integration
        expect(instance).to.have.property('integration');
        // expect(instance.integration).to.be(expectedValueLiteral);
      });

      it('should have the property invitation (base name: "invitation")', function() {
        // TODO: update the code to test the property invitation
        expect(instance).to.have.property('invitation');
        // expect(instance.invitation).to.be(expectedValueLiteral);
      });

      it('should have the property ip (base name: "ip")', function() {
        // TODO: update the code to test the property ip
        expect(instance).to.have.property('ip');
        // expect(instance.ip).to.be(expectedValueLiteral);
      });

      it('should have the property ipPool (base name: "ipPool")', function() {
        // TODO: update the code to test the property ipPool
        expect(instance).to.have.property('ipPool');
        // expect(instance.ipPool).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property member (base name: "member")', function() {
        // TODO: update the code to test the property member
        expect(instance).to.have.property('member');
        // expect(instance.member).to.be(expectedValueLiteral);
      });

      it('should have the property subAccount (base name: "subAccount")', function() {
        // TODO: update the code to test the property subAccount
        expect(instance).to.have.property('subAccount');
        // expect(instance.subAccount).to.be(expectedValueLiteral);
      });

      it('should have the property submittedAt (base name: "submittedAt")', function() {
        // TODO: update the code to test the property submittedAt
        expect(instance).to.have.property('submittedAt');
        // expect(instance.submittedAt).to.be(expectedValueLiteral);
      });

      it('should have the property systemEventMetadata (base name: "systemEventMetadata")', function() {
        // TODO: update the code to test the property systemEventMetadata
        expect(instance).to.have.property('systemEventMetadata');
        // expect(instance.systemEventMetadata).to.be(expectedValueLiteral);
      });

    });
  });

}));
