/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountsettingApi();
  });

  describe('(package)', function() {
    describe('AccountsettingApi', function() {
      describe('accountSettingRouterCheckDedicatedIPExist', function() {
        it('should call accountSettingRouterCheckDedicatedIPExist successfully', function(done) {
          // TODO: uncomment, update parameter values for accountSettingRouterCheckDedicatedIPExist call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";

          instance.accountSettingRouterCheckDedicatedIPExist(xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsDedicatedIPs);
            expect(data.found).to.be.a('boolean');
            expect(data.found).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountSettingRouterGetAccount', function() {
        it('should call accountSettingRouterGetAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for accountSettingRouterGetAccount call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";

          instance.accountSettingRouterGetAccount(xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsAccount);
            expect(data.alertSlackEndpoint).to.be.a('string');
            expect(data.alertSlackEndpoint).to.be("");
            expect(data.apiKey).to.be.a('string');
            expect(data.apiKey).to.be("");
            expect(data.brandColor).to.be.a('string');
            expect(data.brandColor).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.createdBy.companyName).to.be.a('string');
              expect(data.createdBy.companyName).to.be("");
              expect(data.createdBy.created).to.be.a('number');
              expect(data.createdBy.created).to.be("0");
              expect(data.createdBy.email).to.be.a('string');
              expect(data.createdBy.email).to.be("");
              expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be("0");
              expect(data.createdBy.isForbidden).to.be.a('boolean');
              expect(data.createdBy.isForbidden).to.be(false);
              expect(data.createdBy.isVerified).to.be.a('boolean');
              expect(data.createdBy.isVerified).to.be(false);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
              expect(data.createdBy.onboardQAnswered).to.be(false);
              expect(data.createdBy.phoneNumber).to.be.a('string');
              expect(data.createdBy.phoneNumber).to.be("");
              expect(data.createdBy.url).to.be.a('string');
              expect(data.createdBy.url).to.be("");
            expect(data.currentEmailServiceProvider).to.be.a('string');
            expect(data.currentEmailServiceProvider).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.incidentSlackEndpoint).to.be.a('string');
            expect(data.incidentSlackEndpoint).to.be("");
            expect(data.industry).to.be.a('string');
            expect(data.industry).to.be("");
            expect(data.isAdmin).to.be.a('boolean');
            expect(data.isAdmin).to.be(false);
            expect(data.isCanceled).to.be.a('boolean');
            expect(data.isCanceled).to.be(false);
            expect(data.isLastPaymentFailed).to.be.a('boolean');
            expect(data.isLastPaymentFailed).to.be(false);
            expect(data.isUpgraded).to.be.a('boolean');
            expect(data.isUpgraded).to.be(false);
            expect(data.lockThreshold).to.be.a('number');
            expect(data.lockThreshold).to.be("0");
            expect(data.locked).to.be.a('boolean');
            expect(data.locked).to.be(false);
            expect(data.logoURL).to.be.a('string');
            expect(data.logoURL).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.onboardCFinished).to.be.a('boolean');
            expect(data.onboardCFinished).to.be(false);
            expect(data.onboardQAnswered).to.be.a('boolean');
            expect(data.onboardQAnswered).to.be(false);
            expect(data.sendingVolumePerMonth).to.be.a('string');
            expect(data.sendingVolumePerMonth).to.be("");
            expect(data.slackToken).to.be.a('string');
            expect(data.slackToken).to.be("");
            expect(data.stripeBasePriceId).to.be.a('string');
            expect(data.stripeBasePriceId).to.be("");
            expect(data.stripeSubscriptionItemId).to.be.a('string');
            expect(data.stripeSubscriptionItemId).to.be("");
            expect(data.stripeUsagePriceId).to.be.a('string');
            expect(data.stripeUsagePriceId).to.be("");
            expect(data.switchingSendpostDescription).to.be.a('string');
            expect(data.switchingSendpostDescription).to.be("");
            expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.updatedBy.companyName).to.be.a('string');
              expect(data.updatedBy.companyName).to.be("");
              expect(data.updatedBy.created).to.be.a('number');
              expect(data.updatedBy.created).to.be("0");
              expect(data.updatedBy.email).to.be.a('string');
              expect(data.updatedBy.email).to.be("");
              expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be("0");
              expect(data.updatedBy.isForbidden).to.be.a('boolean');
              expect(data.updatedBy.isForbidden).to.be(false);
              expect(data.updatedBy.isVerified).to.be.a('boolean');
              expect(data.updatedBy.isVerified).to.be(false);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
              expect(data.updatedBy.onboardQAnswered).to.be(false);
              expect(data.updatedBy.phoneNumber).to.be.a('string');
              expect(data.updatedBy.phoneNumber).to.be("");
              expect(data.updatedBy.url).to.be.a('string');
              expect(data.updatedBy.url).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountSettingRouterUpdate', function() {
        it('should call accountSettingRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for accountSettingRouterUpdate call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var body = new SendPostApi.ModelsEAccountSetting();
          body.companyName = "";
          body.logoURL = "";
          body.memberId = "0";

          instance.accountSettingRouterUpdate(xAccountApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsAccount);
            expect(data.alertSlackEndpoint).to.be.a('string');
            expect(data.alertSlackEndpoint).to.be("");
            expect(data.apiKey).to.be.a('string');
            expect(data.apiKey).to.be("");
            expect(data.brandColor).to.be.a('string');
            expect(data.brandColor).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.createdBy.companyName).to.be.a('string');
              expect(data.createdBy.companyName).to.be("");
              expect(data.createdBy.created).to.be.a('number');
              expect(data.createdBy.created).to.be("0");
              expect(data.createdBy.email).to.be.a('string');
              expect(data.createdBy.email).to.be("");
              expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be("0");
              expect(data.createdBy.isForbidden).to.be.a('boolean');
              expect(data.createdBy.isForbidden).to.be(false);
              expect(data.createdBy.isVerified).to.be.a('boolean');
              expect(data.createdBy.isVerified).to.be(false);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
              expect(data.createdBy.onboardQAnswered).to.be(false);
              expect(data.createdBy.phoneNumber).to.be.a('string');
              expect(data.createdBy.phoneNumber).to.be("");
              expect(data.createdBy.url).to.be.a('string');
              expect(data.createdBy.url).to.be("");
            expect(data.currentEmailServiceProvider).to.be.a('string');
            expect(data.currentEmailServiceProvider).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.incidentSlackEndpoint).to.be.a('string');
            expect(data.incidentSlackEndpoint).to.be("");
            expect(data.industry).to.be.a('string');
            expect(data.industry).to.be("");
            expect(data.isAdmin).to.be.a('boolean');
            expect(data.isAdmin).to.be(false);
            expect(data.isCanceled).to.be.a('boolean');
            expect(data.isCanceled).to.be(false);
            expect(data.isLastPaymentFailed).to.be.a('boolean');
            expect(data.isLastPaymentFailed).to.be(false);
            expect(data.isUpgraded).to.be.a('boolean');
            expect(data.isUpgraded).to.be(false);
            expect(data.lockThreshold).to.be.a('number');
            expect(data.lockThreshold).to.be("0");
            expect(data.locked).to.be.a('boolean');
            expect(data.locked).to.be(false);
            expect(data.logoURL).to.be.a('string');
            expect(data.logoURL).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.onboardCFinished).to.be.a('boolean');
            expect(data.onboardCFinished).to.be(false);
            expect(data.onboardQAnswered).to.be.a('boolean');
            expect(data.onboardQAnswered).to.be(false);
            expect(data.sendingVolumePerMonth).to.be.a('string');
            expect(data.sendingVolumePerMonth).to.be("");
            expect(data.slackToken).to.be.a('string');
            expect(data.slackToken).to.be("");
            expect(data.stripeBasePriceId).to.be.a('string');
            expect(data.stripeBasePriceId).to.be("");
            expect(data.stripeSubscriptionItemId).to.be.a('string');
            expect(data.stripeSubscriptionItemId).to.be("");
            expect(data.stripeUsagePriceId).to.be.a('string');
            expect(data.stripeUsagePriceId).to.be("");
            expect(data.switchingSendpostDescription).to.be.a('string');
            expect(data.switchingSendpostDescription).to.be("");
            expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.updatedBy.companyName).to.be.a('string');
              expect(data.updatedBy.companyName).to.be("");
              expect(data.updatedBy.created).to.be.a('number');
              expect(data.updatedBy.created).to.be("0");
              expect(data.updatedBy.email).to.be.a('string');
              expect(data.updatedBy.email).to.be("");
              expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be("0");
              expect(data.updatedBy.isForbidden).to.be.a('boolean');
              expect(data.updatedBy.isForbidden).to.be(false);
              expect(data.updatedBy.isVerified).to.be.a('boolean');
              expect(data.updatedBy.isVerified).to.be(false);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
              expect(data.updatedBy.onboardQAnswered).to.be(false);
              expect(data.updatedBy.phoneNumber).to.be.a('string');
              expect(data.updatedBy.phoneNumber).to.be("");
              expect(data.updatedBy.url).to.be.a('string');
              expect(data.updatedBy.url).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
