/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.SubaccountippoolApi();
  });

  describe('(package)', function() {
    describe('SubaccountippoolApi', function() {
      describe('iPPoolRouterCount', function() {
        it('should call iPPoolRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterCount call and complete the assertions
          /*

          instance.iPPoolRouterCount(xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterCreate', function() {
        it('should call iPPoolRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterCreate call and complete the assertions
          /*

          instance.iPPoolRouterCreate(body, xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterDelete', function() {
        it('should call iPPoolRouterDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterDelete call and complete the assertions
          /*

          instance.iPPoolRouterDelete(xSubAccountApiKey, ippoolid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsDeleteResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterGet', function() {
        it('should call iPPoolRouterGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterGet call and complete the assertions
          /*

          instance.iPPoolRouterGet(xSubAccountApiKey, ippoolid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterGetAll', function() {
        it('should call iPPoolRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterGetAll call and complete the assertions
          /*
          var opts = {};

          instance.iPPoolRouterGetAll(xSubAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIPPool);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterUpdate', function() {
        it('should call iPPoolRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterUpdate call and complete the assertions
          /*

          instance.iPPoolRouterUpdate(body, xSubAccountApiKey, ippoolid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
