/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountvalidationApi();
  });

  describe('(package)', function() {
    describe('AccountvalidationApi', function() {
      describe('validateRouterValidateEmailBulk', function() {
        it('should call validateRouterValidateEmailBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for validateRouterValidateEmailBulk call and complete the assertions
          /*
          var fileinput = "/path/to/file.txt";
          var xAccountApiKey = "xAccountApiKey_example";

          instance.validateRouterValidateEmailBulk(fileinput, xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsBulkResponse);
            expect(data.jobId).to.be.a('number');
            expect(data.jobId).to.be("0");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validationRouterCount', function() {
        it('should call validationRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for validationRouterCount call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";

          instance.validationRouterCount(xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validationRouterDeleteValidation', function() {
        it('should call validationRouterDeleteValidation successfully', function(done) {
          // TODO: uncomment, update parameter values for validationRouterDeleteValidation call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var body = new SendPostApi.ModelsEValidation();

          instance.validationRouterDeleteValidation(xAccountApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsValidation);
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.error).to.be.a('string');
            expect(data.error).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.reason).to.be.a(SendPostApi.ModelsValidationReason);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validationRouterGetAll', function() {
        it('should call validationRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for validationRouterGetAll call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var opts = {};
          opts.offset = 789;
          opts.limit = 789;
          opts.search = "search_example";

          instance.validationRouterGetAll(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsValidation);
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.error).to.be.a('string');
              expect(data.error).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.reason).to.be.a(SendPostApi.ModelsValidationReason);
      
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validationRouterValidateEmailList', function() {
        it('should call validationRouterValidateEmailList successfully', function(done) {
          // TODO: uncomment, update parameter values for validationRouterValidateEmailList call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var body = new SendPostApi.ModelsEmailList();
          body.emailIds = ;

          instance.validationRouterValidateEmailList(xAccountApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCleanedList);
            {
              let dataCtr = data.detailedResponse;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsSingleCleanedMail);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.error).to.be.a('string');
                expect(data.error).to.be("");
                expect(data.reason).to.be.a(SendPostApi.ModelsValidationReason);
                    expect(data.valid).to.be.a('boolean');
                expect(data.valid).to.be(false);

                      }
            }
            expect(data.invalid).to.be.a(Object);
            expect(data.invalid).to.be();
            expect(data.valid).to.be.a(Object);
            expect(data.valid).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
