/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountIncidentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountIncidentApi', function() {
    describe('incidentRouterAdd', function() {
      it('should call incidentRouterAdd successfully', function(done) {
        //uncomment below and update the code to test incidentRouterAdd
        //instance.incidentRouterAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterCount', function() {
      it('should call incidentRouterCount successfully', function(done) {
        //uncomment below and update the code to test incidentRouterCount
        //instance.incidentRouterCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterCreate', function() {
      it('should call incidentRouterCreate successfully', function(done) {
        //uncomment below and update the code to test incidentRouterCreate
        //instance.incidentRouterCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterGetAll', function() {
      it('should call incidentRouterGetAll successfully', function(done) {
        //uncomment below and update the code to test incidentRouterGetAll
        //instance.incidentRouterGetAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterGetAllComments', function() {
      it('should call incidentRouterGetAllComments successfully', function(done) {
        //uncomment below and update the code to test incidentRouterGetAllComments
        //instance.incidentRouterGetAllComments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterGetIncident', function() {
      it('should call incidentRouterGetIncident successfully', function(done) {
        //uncomment below and update the code to test incidentRouterGetIncident
        //instance.incidentRouterGetIncident(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incidentRouterUpdate', function() {
      it('should call incidentRouterUpdate successfully', function(done) {
        //uncomment below and update the code to test incidentRouterUpdate
        //instance.incidentRouterUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
