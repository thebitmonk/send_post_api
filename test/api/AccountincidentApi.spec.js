/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountincidentApi();
  });

  describe('(package)', function() {
    describe('AccountincidentApi', function() {
      describe('incidentRouterAdd', function() {
        it('should call incidentRouterAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterAdd call and complete the assertions
          /*

          instance.incidentRouterAdd(body, xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsComment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterCount', function() {
        it('should call incidentRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterCount call and complete the assertions
          /*
          var opts = {};

          instance.incidentRouterCount(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterCreate', function() {
        it('should call incidentRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterCreate call and complete the assertions
          /*

          instance.incidentRouterCreate(body, xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetAll', function() {
        it('should call incidentRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetAll call and complete the assertions
          /*
          var opts = {};

          instance.incidentRouterGetAll(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIncident);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetAllComments', function() {
        it('should call incidentRouterGetAllComments successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetAllComments call and complete the assertions
          /*

          instance.incidentRouterGetAllComments(xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsComment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetIncident', function() {
        it('should call incidentRouterGetIncident successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetIncident call and complete the assertions
          /*

          instance.incidentRouterGetIncident(xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterUpdate', function() {
        it('should call incidentRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterUpdate call and complete the assertions
          /*

          instance.incidentRouterUpdate(body, xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
