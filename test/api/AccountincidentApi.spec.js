/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountincidentApi();
  });

  describe('(package)', function() {
    describe('AccountincidentApi', function() {
      describe('incidentRouterAdd', function() {
        it('should call incidentRouterAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterAdd call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var incidentId = 789;
          var body = new SendPostApi.ModelsEComment();
          body.author = new SendPostApi.ModelsIEMember();
          body.author.id = "0";
          body.content = "";

          instance.incidentRouterAdd(xAccountApiKey, incidentId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsComment);
            expect(data.author).to.be.a(SendPostApi.ModelsMember);
                  expect(data.author.companyName).to.be.a('string');
              expect(data.author.companyName).to.be("");
              expect(data.author.created).to.be.a('number');
              expect(data.author.created).to.be("0");
              expect(data.author.email).to.be.a('string');
              expect(data.author.email).to.be("");
              expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.isForbidden).to.be.a('boolean');
              expect(data.author.isForbidden).to.be(false);
              expect(data.author.isVerified).to.be.a('boolean');
              expect(data.author.isVerified).to.be(false);
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
              expect(data.author.onboardQAnswered).to.be.a('boolean');
              expect(data.author.onboardQAnswered).to.be(false);
              expect(data.author.phoneNumber).to.be.a('string');
              expect(data.author.phoneNumber).to.be("");
              expect(data.author.url).to.be.a('string');
              expect(data.author.url).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.incident).to.be.a(SendPostApi.ModelsIncident);
                  expect(data.incident.assignedTo).to.be.a(SendPostApi.ModelsMember);
                    expect(data.incident.assignedTo.companyName).to.be.a('string');
                expect(data.incident.assignedTo.companyName).to.be("");
                expect(data.incident.assignedTo.created).to.be.a('number');
                expect(data.incident.assignedTo.created).to.be("0");
                expect(data.incident.assignedTo.email).to.be.a('string');
                expect(data.incident.assignedTo.email).to.be("");
                expect(data.incident.assignedTo.id).to.be.a('number');
                expect(data.incident.assignedTo.id).to.be("0");
                expect(data.incident.assignedTo.isForbidden).to.be.a('boolean');
                expect(data.incident.assignedTo.isForbidden).to.be(false);
                expect(data.incident.assignedTo.isVerified).to.be.a('boolean');
                expect(data.incident.assignedTo.isVerified).to.be(false);
                expect(data.incident.assignedTo.name).to.be.a('string');
                expect(data.incident.assignedTo.name).to.be("");
                expect(data.incident.assignedTo.onboardQAnswered).to.be.a('boolean');
                expect(data.incident.assignedTo.onboardQAnswered).to.be(false);
                expect(data.incident.assignedTo.phoneNumber).to.be.a('string');
                expect(data.incident.assignedTo.phoneNumber).to.be("");
                expect(data.incident.assignedTo.url).to.be.a('string');
                expect(data.incident.assignedTo.url).to.be("");
              expect(data.incident.author).to.be.a(SendPostApi.ModelsMember);
                    expect(data.incident.author.companyName).to.be.a('string');
                expect(data.incident.author.companyName).to.be("");
                expect(data.incident.author.created).to.be.a('number');
                expect(data.incident.author.created).to.be("0");
                expect(data.incident.author.email).to.be.a('string');
                expect(data.incident.author.email).to.be("");
                expect(data.incident.author.id).to.be.a('number');
                expect(data.incident.author.id).to.be("0");
                expect(data.incident.author.isForbidden).to.be.a('boolean');
                expect(data.incident.author.isForbidden).to.be(false);
                expect(data.incident.author.isVerified).to.be.a('boolean');
                expect(data.incident.author.isVerified).to.be(false);
                expect(data.incident.author.name).to.be.a('string');
                expect(data.incident.author.name).to.be("");
                expect(data.incident.author.onboardQAnswered).to.be.a('boolean');
                expect(data.incident.author.onboardQAnswered).to.be(false);
                expect(data.incident.author.phoneNumber).to.be.a('string');
                expect(data.incident.author.phoneNumber).to.be("");
                expect(data.incident.author.url).to.be.a('string');
                expect(data.incident.author.url).to.be("");
              expect(data.incident.closed).to.be.a('number');
              expect(data.incident.closed).to.be("0");
              expect(data.incident.created).to.be.a('number');
              expect(data.incident.created).to.be("0");
              expect(data.incident.description).to.be.a('string');
              expect(data.incident.description).to.be("");
              expect(data.incident.id).to.be.a('number');
              expect(data.incident.id).to.be("0");
              expect(data.incident.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.incident.modifiedBy.companyName).to.be.a('string');
                expect(data.incident.modifiedBy.companyName).to.be("");
                expect(data.incident.modifiedBy.created).to.be.a('number');
                expect(data.incident.modifiedBy.created).to.be("0");
                expect(data.incident.modifiedBy.email).to.be.a('string');
                expect(data.incident.modifiedBy.email).to.be("");
                expect(data.incident.modifiedBy.id).to.be.a('number');
                expect(data.incident.modifiedBy.id).to.be("0");
                expect(data.incident.modifiedBy.isForbidden).to.be.a('boolean');
                expect(data.incident.modifiedBy.isForbidden).to.be(false);
                expect(data.incident.modifiedBy.isVerified).to.be.a('boolean');
                expect(data.incident.modifiedBy.isVerified).to.be(false);
                expect(data.incident.modifiedBy.name).to.be.a('string');
                expect(data.incident.modifiedBy.name).to.be("");
                expect(data.incident.modifiedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.incident.modifiedBy.onboardQAnswered).to.be(false);
                expect(data.incident.modifiedBy.phoneNumber).to.be.a('string');
                expect(data.incident.modifiedBy.phoneNumber).to.be("");
                expect(data.incident.modifiedBy.url).to.be.a('string');
                expect(data.incident.modifiedBy.url).to.be("");
              expect(data.incident.relatedIP).to.be.a(SendPostApi.ModelsIP);
                    expect(data.incident.relatedIP.aolSettings).to.be.a('string');
                expect(data.incident.relatedIP.aolSettings).to.be("");
                expect(data.incident.relatedIP.attSettings).to.be.a('string');
                expect(data.incident.relatedIP.attSettings).to.be("");
                expect(data.incident.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                      expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.created).to.be.a('number');
                  expect(data.incident.relatedIP.autoWarmupPlan.created).to.be("0");
                  expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.id).to.be.a('number');
                  expect(data.incident.relatedIP.autoWarmupPlan.id).to.be("0");
                  expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.name).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.name).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                  expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be("0");
                  expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                  expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                  expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                  expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
                expect(data.incident.relatedIP.comcastSettings).to.be.a('string');
                expect(data.incident.relatedIP.comcastSettings).to.be("");
                expect(data.incident.relatedIP.created).to.be.a('number');
                expect(data.incident.relatedIP.created).to.be("0");
                expect(data.incident.relatedIP.defaultSettings).to.be.a('string');
                expect(data.incident.relatedIP.defaultSettings).to.be("");
                expect(data.incident.relatedIP.gmailSettings).to.be.a('string');
                expect(data.incident.relatedIP.gmailSettings).to.be("");
                expect(data.incident.relatedIP.gmxSettings).to.be.a('string');
                expect(data.incident.relatedIP.gmxSettings).to.be("");
                expect(data.incident.relatedIP.icloudSettings).to.be.a('string');
                expect(data.incident.relatedIP.icloudSettings).to.be("");
                expect(data.incident.relatedIP.id).to.be.a('number');
                expect(data.incident.relatedIP.id).to.be("0");
                expect(data.incident.relatedIP.infraClassification).to.be.a('string');
                expect(data.incident.relatedIP.infraClassification).to.be("");
                expect(data.incident.relatedIP.infraMonitor).to.be.a('boolean');
                expect(data.incident.relatedIP.infraMonitor).to.be(false);
                {
                  let dataCtr = data.incident.relatedIP.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.incident.relatedIP.mailruSettings).to.be.a('string');
                expect(data.incident.relatedIP.mailruSettings).to.be("");
                expect(data.incident.relatedIP.microsoftSettings).to.be.a('string');
                expect(data.incident.relatedIP.microsoftSettings).to.be("");
                expect(data.incident.relatedIP.publicIP).to.be.a('string');
                expect(data.incident.relatedIP.publicIP).to.be("");
                expect(data.incident.relatedIP.qqSettings).to.be.a('string');
                expect(data.incident.relatedIP.qqSettings).to.be("");
                expect(data.incident.relatedIP.reverseDNSHostname).to.be.a('string');
                expect(data.incident.relatedIP.reverseDNSHostname).to.be("");
                expect(data.incident.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                    expect(data.incident.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                      expect(data.incident.relatedIP.systemDomain.created).to.be.a('number');
                  expect(data.incident.relatedIP.systemDomain.created).to.be("0");
                  expect(data.incident.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.incident.relatedIP.systemDomain.dkim.host).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.dkim.host).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkim.type).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.dkim.type).to.be("");
                  expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                  expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be("");
                  expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                  expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be(false);
                  expect(data.incident.relatedIP.systemDomain.id).to.be.a('number');
                  expect(data.incident.relatedIP.systemDomain.id).to.be("0");
                  expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                  expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be(false);
                  expect(data.incident.relatedIP.systemDomain.name).to.be.a('string');
                  expect(data.incident.relatedIP.systemDomain.name).to.be("");
                  expect(data.incident.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.incident.relatedIP.systemDomain.spf.host).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.spf.host).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spf.type).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.spf.type).to.be("");
                  expect(data.incident.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                  expect(data.incident.relatedIP.systemDomain.spfVerified).to.be(false);
                  expect(data.incident.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.incident.relatedIP.systemDomain.track.host).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.track.host).to.be("");
                    expect(data.incident.relatedIP.systemDomain.track.textValue).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.track.textValue).to.be("");
                    expect(data.incident.relatedIP.systemDomain.track.type).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.track.type).to.be("");
                  expect(data.incident.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                  expect(data.incident.relatedIP.systemDomain.trackVerified).to.be(false);
                expect(data.incident.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                    expect(data.incident.relatedIP.yahooSettings).to.be.a('string');
                expect(data.incident.relatedIP.yahooSettings).to.be("");
                expect(data.incident.relatedIP.yandexSettings).to.be.a('string');
                expect(data.incident.relatedIP.yandexSettings).to.be("");
                expect(data.incident.relatedIP.zohoSettings).to.be.a('string');
                expect(data.incident.relatedIP.zohoSettings).to.be("");
              expect(data.incident.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                    expect(data.incident.relatedSubAccount.apiKey).to.be.a('string');
                expect(data.incident.relatedSubAccount.apiKey).to.be("");
                expect(data.incident.relatedSubAccount.created).to.be.a('number');
                expect(data.incident.relatedSubAccount.created).to.be("0");
                expect(data.incident.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.relatedSubAccount.createdBy.companyName).to.be.a('string');
                  expect(data.incident.relatedSubAccount.createdBy.companyName).to.be("");
                  expect(data.incident.relatedSubAccount.createdBy.created).to.be.a('number');
                  expect(data.incident.relatedSubAccount.createdBy.created).to.be("0");
                  expect(data.incident.relatedSubAccount.createdBy.email).to.be.a('string');
                  expect(data.incident.relatedSubAccount.createdBy.email).to.be("");
                  expect(data.incident.relatedSubAccount.createdBy.id).to.be.a('number');
                  expect(data.incident.relatedSubAccount.createdBy.id).to.be("0");
                  expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be(false);
                  expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be(false);
                  expect(data.incident.relatedSubAccount.createdBy.name).to.be.a('string');
                  expect(data.incident.relatedSubAccount.createdBy.name).to.be("");
                  expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                  expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                  expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be("");
                  expect(data.incident.relatedSubAccount.createdBy.url).to.be.a('string');
                  expect(data.incident.relatedSubAccount.createdBy.url).to.be("");
                expect(data.incident.relatedSubAccount.id).to.be.a('number');
                expect(data.incident.relatedSubAccount.id).to.be("0");
                expect(data.incident.relatedSubAccount.isPlus).to.be.a('boolean');
                expect(data.incident.relatedSubAccount.isPlus).to.be(false);
                {
                  let dataCtr = data.incident.relatedSubAccount.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.incident.relatedSubAccount.name).to.be.a('string');
                expect(data.incident.relatedSubAccount.name).to.be("");
                {
                  let dataCtr = data.incident.relatedSubAccount.smtpAuths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.password).to.be.a('string');
                    expect(data.password).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.username).to.be.a('string');
                    expect(data.username).to.be("");
    
                          }
                }
                expect(data.incident.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                    expect(data.incident.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                  expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be("");
                  expect(data.incident.relatedSubAccount.updatedBy.created).to.be.a('number');
                  expect(data.incident.relatedSubAccount.updatedBy.created).to.be("0");
                  expect(data.incident.relatedSubAccount.updatedBy.email).to.be.a('string');
                  expect(data.incident.relatedSubAccount.updatedBy.email).to.be("");
                  expect(data.incident.relatedSubAccount.updatedBy.id).to.be.a('number');
                  expect(data.incident.relatedSubAccount.updatedBy.id).to.be("0");
                  expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                  expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be(false);
                  expect(data.incident.relatedSubAccount.updatedBy.name).to.be.a('string');
                  expect(data.incident.relatedSubAccount.updatedBy.name).to.be("");
                  expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                  expect(data.incident.relatedSubAccount.updatedBy.url).to.be.a('string');
                  expect(data.incident.relatedSubAccount.updatedBy.url).to.be("");
              expect(data.incident.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                  expect(data.incident.summary).to.be.a('string');
              expect(data.incident.summary).to.be("");
              {
                let dataCtr = data.incident.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsTag);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.createdBy.companyName).to.be.a('string');
                    expect(data.createdBy.companyName).to.be("");
                    expect(data.createdBy.created).to.be.a('number');
                    expect(data.createdBy.created).to.be("0");
                    expect(data.createdBy.email).to.be.a('string');
                    expect(data.createdBy.email).to.be("");
                    expect(data.createdBy.id).to.be.a('number');
                    expect(data.createdBy.id).to.be("0");
                    expect(data.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.createdBy.isForbidden).to.be(false);
                    expect(data.createdBy.isVerified).to.be.a('boolean');
                    expect(data.createdBy.isVerified).to.be(false);
                    expect(data.createdBy.name).to.be.a('string');
                    expect(data.createdBy.name).to.be("");
                    expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.createdBy.onboardQAnswered).to.be(false);
                    expect(data.createdBy.phoneNumber).to.be.a('string');
                    expect(data.createdBy.phoneNumber).to.be("");
                    expect(data.createdBy.url).to.be.a('string');
                    expect(data.createdBy.url).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.updatedBy.companyName).to.be.a('string');
                    expect(data.updatedBy.companyName).to.be("");
                    expect(data.updatedBy.created).to.be.a('number');
                    expect(data.updatedBy.created).to.be("0");
                    expect(data.updatedBy.email).to.be.a('string');
                    expect(data.updatedBy.email).to.be("");
                    expect(data.updatedBy.id).to.be.a('number');
                    expect(data.updatedBy.id).to.be("0");
                    expect(data.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.updatedBy.isForbidden).to.be(false);
                    expect(data.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.updatedBy.isVerified).to.be(false);
                    expect(data.updatedBy.name).to.be.a('string');
                    expect(data.updatedBy.name).to.be("");
                    expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.updatedBy.phoneNumber).to.be("");
                    expect(data.updatedBy.url).to.be.a('string');
                    expect(data.updatedBy.url).to.be("");
  
                        }
              }
              expect(data.incident.updated).to.be.a('number');
              expect(data.incident.updated).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterCount', function() {
        it('should call incidentRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterCount call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var opts = {};
          opts.status = 789;
          opts.tag = 789;
          opts.search = "search_example";

          instance.incidentRouterCount(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterCreate', function() {
        it('should call incidentRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterCreate call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var body = new SendPostApi.ModelsEIncident();
          body.assignedTo = new SendPostApi.ModelsIEMember();
          body.assignedTo.id = "0";
          body.author = new SendPostApi.ModelsIEMember();
          body.author.id = "0";
          body.description = "";
          body.modifiedBy = new SendPostApi.ModelsIEMember();
          body.modifiedBy.id = "0";
          body.relatedIP = new SendPostApi.ModelsIEIP();
          body.relatedIP.id = "0";
          body.relatedSubAccount = new SendPostApi.ModelsIESubAccount();
          body.relatedSubAccount.id = "0";
          body.status = "0";
          body.summary = "";
          body.tags = [new SendPostApi.ModelsIETag()];
          body.tags[0].id = "0";

          instance.incidentRouterCreate(xAccountApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);
            expect(data.assignedTo).to.be.a(SendPostApi.ModelsMember);
                  expect(data.assignedTo.companyName).to.be.a('string');
              expect(data.assignedTo.companyName).to.be("");
              expect(data.assignedTo.created).to.be.a('number');
              expect(data.assignedTo.created).to.be("0");
              expect(data.assignedTo.email).to.be.a('string');
              expect(data.assignedTo.email).to.be("");
              expect(data.assignedTo.id).to.be.a('number');
              expect(data.assignedTo.id).to.be("0");
              expect(data.assignedTo.isForbidden).to.be.a('boolean');
              expect(data.assignedTo.isForbidden).to.be(false);
              expect(data.assignedTo.isVerified).to.be.a('boolean');
              expect(data.assignedTo.isVerified).to.be(false);
              expect(data.assignedTo.name).to.be.a('string');
              expect(data.assignedTo.name).to.be("");
              expect(data.assignedTo.onboardQAnswered).to.be.a('boolean');
              expect(data.assignedTo.onboardQAnswered).to.be(false);
              expect(data.assignedTo.phoneNumber).to.be.a('string');
              expect(data.assignedTo.phoneNumber).to.be("");
              expect(data.assignedTo.url).to.be.a('string');
              expect(data.assignedTo.url).to.be("");
            expect(data.author).to.be.a(SendPostApi.ModelsMember);
                  expect(data.author.companyName).to.be.a('string');
              expect(data.author.companyName).to.be("");
              expect(data.author.created).to.be.a('number');
              expect(data.author.created).to.be("0");
              expect(data.author.email).to.be.a('string');
              expect(data.author.email).to.be("");
              expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.isForbidden).to.be.a('boolean');
              expect(data.author.isForbidden).to.be(false);
              expect(data.author.isVerified).to.be.a('boolean');
              expect(data.author.isVerified).to.be(false);
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
              expect(data.author.onboardQAnswered).to.be.a('boolean');
              expect(data.author.onboardQAnswered).to.be(false);
              expect(data.author.phoneNumber).to.be.a('string');
              expect(data.author.phoneNumber).to.be("");
              expect(data.author.url).to.be.a('string');
              expect(data.author.url).to.be("");
            expect(data.closed).to.be.a('number');
            expect(data.closed).to.be("0");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.modifiedBy.companyName).to.be.a('string');
              expect(data.modifiedBy.companyName).to.be("");
              expect(data.modifiedBy.created).to.be.a('number');
              expect(data.modifiedBy.created).to.be("0");
              expect(data.modifiedBy.email).to.be.a('string');
              expect(data.modifiedBy.email).to.be("");
              expect(data.modifiedBy.id).to.be.a('number');
              expect(data.modifiedBy.id).to.be("0");
              expect(data.modifiedBy.isForbidden).to.be.a('boolean');
              expect(data.modifiedBy.isForbidden).to.be(false);
              expect(data.modifiedBy.isVerified).to.be.a('boolean');
              expect(data.modifiedBy.isVerified).to.be(false);
              expect(data.modifiedBy.name).to.be.a('string');
              expect(data.modifiedBy.name).to.be("");
              expect(data.modifiedBy.onboardQAnswered).to.be.a('boolean');
              expect(data.modifiedBy.onboardQAnswered).to.be(false);
              expect(data.modifiedBy.phoneNumber).to.be.a('string');
              expect(data.modifiedBy.phoneNumber).to.be("");
              expect(data.modifiedBy.url).to.be.a('string');
              expect(data.modifiedBy.url).to.be("");
            expect(data.relatedIP).to.be.a(SendPostApi.ModelsIP);
                  expect(data.relatedIP.aolSettings).to.be.a('string');
              expect(data.relatedIP.aolSettings).to.be("");
              expect(data.relatedIP.attSettings).to.be.a('string');
              expect(data.relatedIP.attSettings).to.be("");
              expect(data.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                    expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.created).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.created).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.id).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.id).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.name).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.name).to.be("");
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.updated).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
              expect(data.relatedIP.comcastSettings).to.be.a('string');
              expect(data.relatedIP.comcastSettings).to.be("");
              expect(data.relatedIP.created).to.be.a('number');
              expect(data.relatedIP.created).to.be("0");
              expect(data.relatedIP.defaultSettings).to.be.a('string');
              expect(data.relatedIP.defaultSettings).to.be("");
              expect(data.relatedIP.gmailSettings).to.be.a('string');
              expect(data.relatedIP.gmailSettings).to.be("");
              expect(data.relatedIP.gmxSettings).to.be.a('string');
              expect(data.relatedIP.gmxSettings).to.be("");
              expect(data.relatedIP.icloudSettings).to.be.a('string');
              expect(data.relatedIP.icloudSettings).to.be("");
              expect(data.relatedIP.id).to.be.a('number');
              expect(data.relatedIP.id).to.be("0");
              expect(data.relatedIP.infraClassification).to.be.a('string');
              expect(data.relatedIP.infraClassification).to.be("");
              expect(data.relatedIP.infraMonitor).to.be.a('boolean');
              expect(data.relatedIP.infraMonitor).to.be(false);
              {
                let dataCtr = data.relatedIP.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedIP.mailruSettings).to.be.a('string');
              expect(data.relatedIP.mailruSettings).to.be("");
              expect(data.relatedIP.microsoftSettings).to.be.a('string');
              expect(data.relatedIP.microsoftSettings).to.be("");
              expect(data.relatedIP.publicIP).to.be.a('string');
              expect(data.relatedIP.publicIP).to.be("");
              expect(data.relatedIP.qqSettings).to.be.a('string');
              expect(data.relatedIP.qqSettings).to.be("");
              expect(data.relatedIP.reverseDNSHostname).to.be.a('string');
              expect(data.relatedIP.reverseDNSHostname).to.be("");
              expect(data.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                  expect(data.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                    expect(data.relatedIP.systemDomain.created).to.be.a('number');
                expect(data.relatedIP.systemDomain.created).to.be("0");
                expect(data.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.dkim.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.host).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.type).to.be("");
                expect(data.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                expect(data.relatedIP.systemDomain.dkimConfig).to.be("");
                expect(data.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.dkimVerified).to.be(false);
                expect(data.relatedIP.systemDomain.id).to.be.a('number');
                expect(data.relatedIP.systemDomain.id).to.be("0");
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be(false);
                expect(data.relatedIP.systemDomain.name).to.be.a('string');
                expect(data.relatedIP.systemDomain.name).to.be("");
                expect(data.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.spf.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.host).to.be("");
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.spf.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.type).to.be("");
                expect(data.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.spfVerified).to.be(false);
                expect(data.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.track.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.host).to.be("");
                  expect(data.relatedIP.systemDomain.track.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.track.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.type).to.be("");
                expect(data.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.trackVerified).to.be(false);
              expect(data.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                  expect(data.relatedIP.yahooSettings).to.be.a('string');
              expect(data.relatedIP.yahooSettings).to.be("");
              expect(data.relatedIP.yandexSettings).to.be.a('string');
              expect(data.relatedIP.yandexSettings).to.be("");
              expect(data.relatedIP.zohoSettings).to.be.a('string');
              expect(data.relatedIP.zohoSettings).to.be("");
            expect(data.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                  expect(data.relatedSubAccount.apiKey).to.be.a('string');
              expect(data.relatedSubAccount.apiKey).to.be("");
              expect(data.relatedSubAccount.created).to.be.a('number');
              expect(data.relatedSubAccount.created).to.be("0");
              expect(data.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.createdBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.companyName).to.be("");
                expect(data.relatedSubAccount.createdBy.created).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.created).to.be("0");
                expect(data.relatedSubAccount.createdBy.email).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.email).to.be("");
                expect(data.relatedSubAccount.createdBy.id).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.id).to.be("0");
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.createdBy.name).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.name).to.be("");
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.createdBy.url).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.url).to.be("");
              expect(data.relatedSubAccount.id).to.be.a('number');
              expect(data.relatedSubAccount.id).to.be("0");
              expect(data.relatedSubAccount.isPlus).to.be.a('boolean');
              expect(data.relatedSubAccount.isPlus).to.be(false);
              {
                let dataCtr = data.relatedSubAccount.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedSubAccount.name).to.be.a('string');
              expect(data.relatedSubAccount.name).to.be("");
              {
                let dataCtr = data.relatedSubAccount.smtpAuths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.password).to.be.a('string');
                  expect(data.password).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.username).to.be.a('string');
                  expect(data.username).to.be("");
  
                        }
              }
              expect(data.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                  expect(data.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.companyName).to.be("");
                expect(data.relatedSubAccount.updatedBy.created).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.created).to.be("0");
                expect(data.relatedSubAccount.updatedBy.email).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.email).to.be("");
                expect(data.relatedSubAccount.updatedBy.id).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.id).to.be("0");
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.updatedBy.name).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.name).to.be("");
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.updatedBy.url).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.url).to.be("");
            expect(data.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                expect(data.summary).to.be.a('string');
            expect(data.summary).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsTag);
                expect(data.color).to.be.a('string');
                expect(data.color).to.be("");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.createdBy.companyName).to.be.a('string');
                  expect(data.createdBy.companyName).to.be("");
                  expect(data.createdBy.created).to.be.a('number');
                  expect(data.createdBy.created).to.be("0");
                  expect(data.createdBy.email).to.be.a('string');
                  expect(data.createdBy.email).to.be("");
                  expect(data.createdBy.id).to.be.a('number');
                  expect(data.createdBy.id).to.be("0");
                  expect(data.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.createdBy.isForbidden).to.be(false);
                  expect(data.createdBy.isVerified).to.be.a('boolean');
                  expect(data.createdBy.isVerified).to.be(false);
                  expect(data.createdBy.name).to.be.a('string');
                  expect(data.createdBy.name).to.be("");
                  expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.createdBy.onboardQAnswered).to.be(false);
                  expect(data.createdBy.phoneNumber).to.be.a('string');
                  expect(data.createdBy.phoneNumber).to.be("");
                  expect(data.createdBy.url).to.be.a('string');
                  expect(data.createdBy.url).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.updated).to.be.a('number');
                expect(data.updated).to.be("0");
                expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.updatedBy.companyName).to.be.a('string');
                  expect(data.updatedBy.companyName).to.be("");
                  expect(data.updatedBy.created).to.be.a('number');
                  expect(data.updatedBy.created).to.be("0");
                  expect(data.updatedBy.email).to.be.a('string');
                  expect(data.updatedBy.email).to.be("");
                  expect(data.updatedBy.id).to.be.a('number');
                  expect(data.updatedBy.id).to.be("0");
                  expect(data.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.updatedBy.isForbidden).to.be(false);
                  expect(data.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.updatedBy.isVerified).to.be(false);
                  expect(data.updatedBy.name).to.be.a('string');
                  expect(data.updatedBy.name).to.be("");
                  expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.updatedBy.phoneNumber).to.be("");
                  expect(data.updatedBy.url).to.be.a('string');
                  expect(data.updatedBy.url).to.be("");

                      }
            }
            expect(data.updated).to.be.a('number');
            expect(data.updated).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetAll', function() {
        it('should call incidentRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetAll call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var opts = {};
          opts.offset = 789;
          opts.limit = 789;
          opts.search = "search_example";
          opts.status = 789;
          opts.tag = 789;

          instance.incidentRouterGetAll(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIncident);
              expect(data.assignedTo).to.be.a(SendPostApi.ModelsMember);
                    expect(data.assignedTo.companyName).to.be.a('string');
                expect(data.assignedTo.companyName).to.be("");
                expect(data.assignedTo.created).to.be.a('number');
                expect(data.assignedTo.created).to.be("0");
                expect(data.assignedTo.email).to.be.a('string');
                expect(data.assignedTo.email).to.be("");
                expect(data.assignedTo.id).to.be.a('number');
                expect(data.assignedTo.id).to.be("0");
                expect(data.assignedTo.isForbidden).to.be.a('boolean');
                expect(data.assignedTo.isForbidden).to.be(false);
                expect(data.assignedTo.isVerified).to.be.a('boolean');
                expect(data.assignedTo.isVerified).to.be(false);
                expect(data.assignedTo.name).to.be.a('string');
                expect(data.assignedTo.name).to.be("");
                expect(data.assignedTo.onboardQAnswered).to.be.a('boolean');
                expect(data.assignedTo.onboardQAnswered).to.be(false);
                expect(data.assignedTo.phoneNumber).to.be.a('string');
                expect(data.assignedTo.phoneNumber).to.be("");
                expect(data.assignedTo.url).to.be.a('string');
                expect(data.assignedTo.url).to.be("");
              expect(data.author).to.be.a(SendPostApi.ModelsMember);
                    expect(data.author.companyName).to.be.a('string');
                expect(data.author.companyName).to.be("");
                expect(data.author.created).to.be.a('number');
                expect(data.author.created).to.be("0");
                expect(data.author.email).to.be.a('string');
                expect(data.author.email).to.be("");
                expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.isForbidden).to.be.a('boolean');
                expect(data.author.isForbidden).to.be(false);
                expect(data.author.isVerified).to.be.a('boolean');
                expect(data.author.isVerified).to.be(false);
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
                expect(data.author.onboardQAnswered).to.be.a('boolean');
                expect(data.author.onboardQAnswered).to.be(false);
                expect(data.author.phoneNumber).to.be.a('string');
                expect(data.author.phoneNumber).to.be("");
                expect(data.author.url).to.be.a('string');
                expect(data.author.url).to.be("");
              expect(data.closed).to.be.a('number');
              expect(data.closed).to.be("0");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.modifiedBy.companyName).to.be.a('string');
                expect(data.modifiedBy.companyName).to.be("");
                expect(data.modifiedBy.created).to.be.a('number');
                expect(data.modifiedBy.created).to.be("0");
                expect(data.modifiedBy.email).to.be.a('string');
                expect(data.modifiedBy.email).to.be("");
                expect(data.modifiedBy.id).to.be.a('number');
                expect(data.modifiedBy.id).to.be("0");
                expect(data.modifiedBy.isForbidden).to.be.a('boolean');
                expect(data.modifiedBy.isForbidden).to.be(false);
                expect(data.modifiedBy.isVerified).to.be.a('boolean');
                expect(data.modifiedBy.isVerified).to.be(false);
                expect(data.modifiedBy.name).to.be.a('string');
                expect(data.modifiedBy.name).to.be("");
                expect(data.modifiedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.modifiedBy.onboardQAnswered).to.be(false);
                expect(data.modifiedBy.phoneNumber).to.be.a('string');
                expect(data.modifiedBy.phoneNumber).to.be("");
                expect(data.modifiedBy.url).to.be.a('string');
                expect(data.modifiedBy.url).to.be("");
              expect(data.relatedIP).to.be.a(SendPostApi.ModelsIP);
                    expect(data.relatedIP.aolSettings).to.be.a('string');
                expect(data.relatedIP.aolSettings).to.be("");
                expect(data.relatedIP.attSettings).to.be.a('string');
                expect(data.relatedIP.attSettings).to.be("");
                expect(data.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                      expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.created).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.created).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.id).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.id).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.name).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.name).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.updated).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
                expect(data.relatedIP.comcastSettings).to.be.a('string');
                expect(data.relatedIP.comcastSettings).to.be("");
                expect(data.relatedIP.created).to.be.a('number');
                expect(data.relatedIP.created).to.be("0");
                expect(data.relatedIP.defaultSettings).to.be.a('string');
                expect(data.relatedIP.defaultSettings).to.be("");
                expect(data.relatedIP.gmailSettings).to.be.a('string');
                expect(data.relatedIP.gmailSettings).to.be("");
                expect(data.relatedIP.gmxSettings).to.be.a('string');
                expect(data.relatedIP.gmxSettings).to.be("");
                expect(data.relatedIP.icloudSettings).to.be.a('string');
                expect(data.relatedIP.icloudSettings).to.be("");
                expect(data.relatedIP.id).to.be.a('number');
                expect(data.relatedIP.id).to.be("0");
                expect(data.relatedIP.infraClassification).to.be.a('string');
                expect(data.relatedIP.infraClassification).to.be("");
                expect(data.relatedIP.infraMonitor).to.be.a('boolean');
                expect(data.relatedIP.infraMonitor).to.be(false);
                {
                  let dataCtr = data.relatedIP.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.relatedIP.mailruSettings).to.be.a('string');
                expect(data.relatedIP.mailruSettings).to.be("");
                expect(data.relatedIP.microsoftSettings).to.be.a('string');
                expect(data.relatedIP.microsoftSettings).to.be("");
                expect(data.relatedIP.publicIP).to.be.a('string');
                expect(data.relatedIP.publicIP).to.be("");
                expect(data.relatedIP.qqSettings).to.be.a('string');
                expect(data.relatedIP.qqSettings).to.be("");
                expect(data.relatedIP.reverseDNSHostname).to.be.a('string');
                expect(data.relatedIP.reverseDNSHostname).to.be("");
                expect(data.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                    expect(data.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                      expect(data.relatedIP.systemDomain.created).to.be.a('number');
                  expect(data.relatedIP.systemDomain.created).to.be("0");
                  expect(data.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.dkim.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.host).to.be("");
                    expect(data.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.dkim.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.type).to.be("");
                  expect(data.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkimConfig).to.be("");
                  expect(data.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.dkimVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.id).to.be.a('number');
                  expect(data.relatedIP.systemDomain.id).to.be("0");
                  expect(data.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.mailboxVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.name).to.be.a('string');
                  expect(data.relatedIP.systemDomain.name).to.be("");
                  expect(data.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.spf.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.host).to.be("");
                    expect(data.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.spf.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.type).to.be("");
                  expect(data.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.spfVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.track.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.host).to.be("");
                    expect(data.relatedIP.systemDomain.track.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.track.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.type).to.be("");
                  expect(data.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.trackVerified).to.be(false);
                expect(data.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                    expect(data.relatedIP.yahooSettings).to.be.a('string');
                expect(data.relatedIP.yahooSettings).to.be("");
                expect(data.relatedIP.yandexSettings).to.be.a('string');
                expect(data.relatedIP.yandexSettings).to.be("");
                expect(data.relatedIP.zohoSettings).to.be.a('string');
                expect(data.relatedIP.zohoSettings).to.be("");
              expect(data.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                    expect(data.relatedSubAccount.apiKey).to.be.a('string');
                expect(data.relatedSubAccount.apiKey).to.be("");
                expect(data.relatedSubAccount.created).to.be.a('number');
                expect(data.relatedSubAccount.created).to.be("0");
                expect(data.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.relatedSubAccount.createdBy.companyName).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.companyName).to.be("");
                  expect(data.relatedSubAccount.createdBy.created).to.be.a('number');
                  expect(data.relatedSubAccount.createdBy.created).to.be("0");
                  expect(data.relatedSubAccount.createdBy.email).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.email).to.be("");
                  expect(data.relatedSubAccount.createdBy.id).to.be.a('number');
                  expect(data.relatedSubAccount.createdBy.id).to.be("0");
                  expect(data.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.isForbidden).to.be(false);
                  expect(data.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.isVerified).to.be(false);
                  expect(data.relatedSubAccount.createdBy.name).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.name).to.be("");
                  expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                  expect(data.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.phoneNumber).to.be("");
                  expect(data.relatedSubAccount.createdBy.url).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.url).to.be("");
                expect(data.relatedSubAccount.id).to.be.a('number');
                expect(data.relatedSubAccount.id).to.be("0");
                expect(data.relatedSubAccount.isPlus).to.be.a('boolean');
                expect(data.relatedSubAccount.isPlus).to.be(false);
                {
                  let dataCtr = data.relatedSubAccount.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.relatedSubAccount.name).to.be.a('string');
                expect(data.relatedSubAccount.name).to.be("");
                {
                  let dataCtr = data.relatedSubAccount.smtpAuths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.password).to.be.a('string');
                    expect(data.password).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.username).to.be.a('string');
                    expect(data.username).to.be("");
    
                          }
                }
                expect(data.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                    expect(data.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.companyName).to.be("");
                  expect(data.relatedSubAccount.updatedBy.created).to.be.a('number');
                  expect(data.relatedSubAccount.updatedBy.created).to.be("0");
                  expect(data.relatedSubAccount.updatedBy.email).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.email).to.be("");
                  expect(data.relatedSubAccount.updatedBy.id).to.be.a('number');
                  expect(data.relatedSubAccount.updatedBy.id).to.be("0");
                  expect(data.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.isVerified).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.name).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.name).to.be("");
                  expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                  expect(data.relatedSubAccount.updatedBy.url).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.url).to.be("");
              expect(data.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                  expect(data.summary).to.be.a('string');
              expect(data.summary).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsTag);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.createdBy.companyName).to.be.a('string');
                    expect(data.createdBy.companyName).to.be("");
                    expect(data.createdBy.created).to.be.a('number');
                    expect(data.createdBy.created).to.be("0");
                    expect(data.createdBy.email).to.be.a('string');
                    expect(data.createdBy.email).to.be("");
                    expect(data.createdBy.id).to.be.a('number');
                    expect(data.createdBy.id).to.be("0");
                    expect(data.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.createdBy.isForbidden).to.be(false);
                    expect(data.createdBy.isVerified).to.be.a('boolean');
                    expect(data.createdBy.isVerified).to.be(false);
                    expect(data.createdBy.name).to.be.a('string');
                    expect(data.createdBy.name).to.be("");
                    expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.createdBy.onboardQAnswered).to.be(false);
                    expect(data.createdBy.phoneNumber).to.be.a('string');
                    expect(data.createdBy.phoneNumber).to.be("");
                    expect(data.createdBy.url).to.be.a('string');
                    expect(data.createdBy.url).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.updatedBy.companyName).to.be.a('string');
                    expect(data.updatedBy.companyName).to.be("");
                    expect(data.updatedBy.created).to.be.a('number');
                    expect(data.updatedBy.created).to.be("0");
                    expect(data.updatedBy.email).to.be.a('string');
                    expect(data.updatedBy.email).to.be("");
                    expect(data.updatedBy.id).to.be.a('number');
                    expect(data.updatedBy.id).to.be("0");
                    expect(data.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.updatedBy.isForbidden).to.be(false);
                    expect(data.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.updatedBy.isVerified).to.be(false);
                    expect(data.updatedBy.name).to.be.a('string');
                    expect(data.updatedBy.name).to.be("");
                    expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.updatedBy.phoneNumber).to.be("");
                    expect(data.updatedBy.url).to.be.a('string');
                    expect(data.updatedBy.url).to.be("");
  
                        }
              }
              expect(data.updated).to.be.a('number');
              expect(data.updated).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetAllComments', function() {
        it('should call incidentRouterGetAllComments successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetAllComments call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var incidentId = 789;

          instance.incidentRouterGetAllComments(xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsComment);
              expect(data.author).to.be.a(SendPostApi.ModelsMember);
                    expect(data.author.companyName).to.be.a('string');
                expect(data.author.companyName).to.be("");
                expect(data.author.created).to.be.a('number');
                expect(data.author.created).to.be("0");
                expect(data.author.email).to.be.a('string');
                expect(data.author.email).to.be("");
                expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.isForbidden).to.be.a('boolean');
                expect(data.author.isForbidden).to.be(false);
                expect(data.author.isVerified).to.be.a('boolean');
                expect(data.author.isVerified).to.be(false);
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
                expect(data.author.onboardQAnswered).to.be.a('boolean');
                expect(data.author.onboardQAnswered).to.be(false);
                expect(data.author.phoneNumber).to.be.a('string');
                expect(data.author.phoneNumber).to.be("");
                expect(data.author.url).to.be.a('string');
                expect(data.author.url).to.be("");
              expect(data.content).to.be.a('string');
              expect(data.content).to.be("");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.incident).to.be.a(SendPostApi.ModelsIncident);
                    expect(data.incident.assignedTo).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.assignedTo.companyName).to.be.a('string');
                  expect(data.incident.assignedTo.companyName).to.be("");
                  expect(data.incident.assignedTo.created).to.be.a('number');
                  expect(data.incident.assignedTo.created).to.be("0");
                  expect(data.incident.assignedTo.email).to.be.a('string');
                  expect(data.incident.assignedTo.email).to.be("");
                  expect(data.incident.assignedTo.id).to.be.a('number');
                  expect(data.incident.assignedTo.id).to.be("0");
                  expect(data.incident.assignedTo.isForbidden).to.be.a('boolean');
                  expect(data.incident.assignedTo.isForbidden).to.be(false);
                  expect(data.incident.assignedTo.isVerified).to.be.a('boolean');
                  expect(data.incident.assignedTo.isVerified).to.be(false);
                  expect(data.incident.assignedTo.name).to.be.a('string');
                  expect(data.incident.assignedTo.name).to.be("");
                  expect(data.incident.assignedTo.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.assignedTo.onboardQAnswered).to.be(false);
                  expect(data.incident.assignedTo.phoneNumber).to.be.a('string');
                  expect(data.incident.assignedTo.phoneNumber).to.be("");
                  expect(data.incident.assignedTo.url).to.be.a('string');
                  expect(data.incident.assignedTo.url).to.be("");
                expect(data.incident.author).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.author.companyName).to.be.a('string');
                  expect(data.incident.author.companyName).to.be("");
                  expect(data.incident.author.created).to.be.a('number');
                  expect(data.incident.author.created).to.be("0");
                  expect(data.incident.author.email).to.be.a('string');
                  expect(data.incident.author.email).to.be("");
                  expect(data.incident.author.id).to.be.a('number');
                  expect(data.incident.author.id).to.be("0");
                  expect(data.incident.author.isForbidden).to.be.a('boolean');
                  expect(data.incident.author.isForbidden).to.be(false);
                  expect(data.incident.author.isVerified).to.be.a('boolean');
                  expect(data.incident.author.isVerified).to.be(false);
                  expect(data.incident.author.name).to.be.a('string');
                  expect(data.incident.author.name).to.be("");
                  expect(data.incident.author.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.author.onboardQAnswered).to.be(false);
                  expect(data.incident.author.phoneNumber).to.be.a('string');
                  expect(data.incident.author.phoneNumber).to.be("");
                  expect(data.incident.author.url).to.be.a('string');
                  expect(data.incident.author.url).to.be("");
                expect(data.incident.closed).to.be.a('number');
                expect(data.incident.closed).to.be("0");
                expect(data.incident.created).to.be.a('number');
                expect(data.incident.created).to.be("0");
                expect(data.incident.description).to.be.a('string');
                expect(data.incident.description).to.be("");
                expect(data.incident.id).to.be.a('number');
                expect(data.incident.id).to.be("0");
                expect(data.incident.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.modifiedBy.companyName).to.be.a('string');
                  expect(data.incident.modifiedBy.companyName).to.be("");
                  expect(data.incident.modifiedBy.created).to.be.a('number');
                  expect(data.incident.modifiedBy.created).to.be("0");
                  expect(data.incident.modifiedBy.email).to.be.a('string');
                  expect(data.incident.modifiedBy.email).to.be("");
                  expect(data.incident.modifiedBy.id).to.be.a('number');
                  expect(data.incident.modifiedBy.id).to.be("0");
                  expect(data.incident.modifiedBy.isForbidden).to.be.a('boolean');
                  expect(data.incident.modifiedBy.isForbidden).to.be(false);
                  expect(data.incident.modifiedBy.isVerified).to.be.a('boolean');
                  expect(data.incident.modifiedBy.isVerified).to.be(false);
                  expect(data.incident.modifiedBy.name).to.be.a('string');
                  expect(data.incident.modifiedBy.name).to.be("");
                  expect(data.incident.modifiedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.modifiedBy.onboardQAnswered).to.be(false);
                  expect(data.incident.modifiedBy.phoneNumber).to.be.a('string');
                  expect(data.incident.modifiedBy.phoneNumber).to.be("");
                  expect(data.incident.modifiedBy.url).to.be.a('string');
                  expect(data.incident.modifiedBy.url).to.be("");
                expect(data.incident.relatedIP).to.be.a(SendPostApi.ModelsIP);
                      expect(data.incident.relatedIP.aolSettings).to.be.a('string');
                  expect(data.incident.relatedIP.aolSettings).to.be("");
                  expect(data.incident.relatedIP.attSettings).to.be.a('string');
                  expect(data.incident.relatedIP.attSettings).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                        expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.created).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.created).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.id).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.id).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.name).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.name).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.comcastSettings).to.be.a('string');
                  expect(data.incident.relatedIP.comcastSettings).to.be("");
                  expect(data.incident.relatedIP.created).to.be.a('number');
                  expect(data.incident.relatedIP.created).to.be("0");
                  expect(data.incident.relatedIP.defaultSettings).to.be.a('string');
                  expect(data.incident.relatedIP.defaultSettings).to.be("");
                  expect(data.incident.relatedIP.gmailSettings).to.be.a('string');
                  expect(data.incident.relatedIP.gmailSettings).to.be("");
                  expect(data.incident.relatedIP.gmxSettings).to.be.a('string');
                  expect(data.incident.relatedIP.gmxSettings).to.be("");
                  expect(data.incident.relatedIP.icloudSettings).to.be.a('string');
                  expect(data.incident.relatedIP.icloudSettings).to.be("");
                  expect(data.incident.relatedIP.id).to.be.a('number');
                  expect(data.incident.relatedIP.id).to.be("0");
                  expect(data.incident.relatedIP.infraClassification).to.be.a('string');
                  expect(data.incident.relatedIP.infraClassification).to.be("");
                  expect(data.incident.relatedIP.infraMonitor).to.be.a('boolean');
                  expect(data.incident.relatedIP.infraMonitor).to.be(false);
                  {
                    let dataCtr = data.incident.relatedIP.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsLabel);
                      expect(data.color).to.be.a('string');
                      expect(data.color).to.be("");
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('number');
                      expect(data.type).to.be("0");
      
                            }
                  }
                  expect(data.incident.relatedIP.mailruSettings).to.be.a('string');
                  expect(data.incident.relatedIP.mailruSettings).to.be("");
                  expect(data.incident.relatedIP.microsoftSettings).to.be.a('string');
                  expect(data.incident.relatedIP.microsoftSettings).to.be("");
                  expect(data.incident.relatedIP.publicIP).to.be.a('string');
                  expect(data.incident.relatedIP.publicIP).to.be("");
                  expect(data.incident.relatedIP.qqSettings).to.be.a('string');
                  expect(data.incident.relatedIP.qqSettings).to.be("");
                  expect(data.incident.relatedIP.reverseDNSHostname).to.be.a('string');
                  expect(data.incident.relatedIP.reverseDNSHostname).to.be("");
                  expect(data.incident.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                      expect(data.incident.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                        expect(data.incident.relatedIP.systemDomain.created).to.be.a('number');
                    expect(data.incident.relatedIP.systemDomain.created).to.be("0");
                    expect(data.incident.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.dkim.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.dkim.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.id).to.be.a('number');
                    expect(data.incident.relatedIP.systemDomain.id).to.be("0");
                    expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.name).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.name).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.spf.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.spf.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.spfVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.track.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.track.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.track.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.trackVerified).to.be(false);
                  expect(data.incident.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                      expect(data.incident.relatedIP.yahooSettings).to.be.a('string');
                  expect(data.incident.relatedIP.yahooSettings).to.be("");
                  expect(data.incident.relatedIP.yandexSettings).to.be.a('string');
                  expect(data.incident.relatedIP.yandexSettings).to.be("");
                  expect(data.incident.relatedIP.zohoSettings).to.be.a('string');
                  expect(data.incident.relatedIP.zohoSettings).to.be("");
                expect(data.incident.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                      expect(data.incident.relatedSubAccount.apiKey).to.be.a('string');
                  expect(data.incident.relatedSubAccount.apiKey).to.be("");
                  expect(data.incident.relatedSubAccount.created).to.be.a('number');
                  expect(data.incident.relatedSubAccount.created).to.be("0");
                  expect(data.incident.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.incident.relatedSubAccount.createdBy.companyName).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.companyName).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.created).to.be.a('number');
                    expect(data.incident.relatedSubAccount.createdBy.created).to.be("0");
                    expect(data.incident.relatedSubAccount.createdBy.email).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.email).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.id).to.be.a('number');
                    expect(data.incident.relatedSubAccount.createdBy.id).to.be("0");
                    expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.name).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.name).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.url).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.url).to.be("");
                  expect(data.incident.relatedSubAccount.id).to.be.a('number');
                  expect(data.incident.relatedSubAccount.id).to.be("0");
                  expect(data.incident.relatedSubAccount.isPlus).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.isPlus).to.be(false);
                  {
                    let dataCtr = data.incident.relatedSubAccount.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsLabel);
                      expect(data.color).to.be.a('string');
                      expect(data.color).to.be("");
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('number');
                      expect(data.type).to.be("0");
      
                            }
                  }
                  expect(data.incident.relatedSubAccount.name).to.be.a('string');
                  expect(data.incident.relatedSubAccount.name).to.be("");
                  {
                    let dataCtr = data.incident.relatedSubAccount.smtpAuths;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.password).to.be.a('string');
                      expect(data.password).to.be("");
                      expect(data.updated).to.be.a('number');
                      expect(data.updated).to.be("0");
                      expect(data.username).to.be.a('string');
                      expect(data.username).to.be("");
      
                            }
                  }
                  expect(data.incident.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                      expect(data.incident.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.created).to.be.a('number');
                    expect(data.incident.relatedSubAccount.updatedBy.created).to.be("0");
                    expect(data.incident.relatedSubAccount.updatedBy.email).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.email).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.id).to.be.a('number');
                    expect(data.incident.relatedSubAccount.updatedBy.id).to.be("0");
                    expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.name).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.name).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.url).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.url).to.be("");
                expect(data.incident.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                    expect(data.incident.summary).to.be.a('string');
                expect(data.incident.summary).to.be("");
                {
                  let dataCtr = data.incident.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsTag);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.createdBy.companyName).to.be.a('string');
                      expect(data.createdBy.companyName).to.be("");
                      expect(data.createdBy.created).to.be.a('number');
                      expect(data.createdBy.created).to.be("0");
                      expect(data.createdBy.email).to.be.a('string');
                      expect(data.createdBy.email).to.be("");
                      expect(data.createdBy.id).to.be.a('number');
                      expect(data.createdBy.id).to.be("0");
                      expect(data.createdBy.isForbidden).to.be.a('boolean');
                      expect(data.createdBy.isForbidden).to.be(false);
                      expect(data.createdBy.isVerified).to.be.a('boolean');
                      expect(data.createdBy.isVerified).to.be(false);
                      expect(data.createdBy.name).to.be.a('string');
                      expect(data.createdBy.name).to.be("");
                      expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.createdBy.onboardQAnswered).to.be(false);
                      expect(data.createdBy.phoneNumber).to.be.a('string');
                      expect(data.createdBy.phoneNumber).to.be("");
                      expect(data.createdBy.url).to.be.a('string');
                      expect(data.createdBy.url).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.updatedBy.companyName).to.be.a('string');
                      expect(data.updatedBy.companyName).to.be("");
                      expect(data.updatedBy.created).to.be.a('number');
                      expect(data.updatedBy.created).to.be("0");
                      expect(data.updatedBy.email).to.be.a('string');
                      expect(data.updatedBy.email).to.be("");
                      expect(data.updatedBy.id).to.be.a('number');
                      expect(data.updatedBy.id).to.be("0");
                      expect(data.updatedBy.isForbidden).to.be.a('boolean');
                      expect(data.updatedBy.isForbidden).to.be(false);
                      expect(data.updatedBy.isVerified).to.be.a('boolean');
                      expect(data.updatedBy.isVerified).to.be(false);
                      expect(data.updatedBy.name).to.be.a('string');
                      expect(data.updatedBy.name).to.be("");
                      expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.updatedBy.onboardQAnswered).to.be(false);
                      expect(data.updatedBy.phoneNumber).to.be.a('string');
                      expect(data.updatedBy.phoneNumber).to.be("");
                      expect(data.updatedBy.url).to.be.a('string');
                      expect(data.updatedBy.url).to.be("");
    
                          }
                }
                expect(data.incident.updated).to.be.a('number');
                expect(data.incident.updated).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterGetIncident', function() {
        it('should call incidentRouterGetIncident successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterGetIncident call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var incidentId = 789;

          instance.incidentRouterGetIncident(xAccountApiKey, incidentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);
            expect(data.assignedTo).to.be.a(SendPostApi.ModelsMember);
                  expect(data.assignedTo.companyName).to.be.a('string');
              expect(data.assignedTo.companyName).to.be("");
              expect(data.assignedTo.created).to.be.a('number');
              expect(data.assignedTo.created).to.be("0");
              expect(data.assignedTo.email).to.be.a('string');
              expect(data.assignedTo.email).to.be("");
              expect(data.assignedTo.id).to.be.a('number');
              expect(data.assignedTo.id).to.be("0");
              expect(data.assignedTo.isForbidden).to.be.a('boolean');
              expect(data.assignedTo.isForbidden).to.be(false);
              expect(data.assignedTo.isVerified).to.be.a('boolean');
              expect(data.assignedTo.isVerified).to.be(false);
              expect(data.assignedTo.name).to.be.a('string');
              expect(data.assignedTo.name).to.be("");
              expect(data.assignedTo.onboardQAnswered).to.be.a('boolean');
              expect(data.assignedTo.onboardQAnswered).to.be(false);
              expect(data.assignedTo.phoneNumber).to.be.a('string');
              expect(data.assignedTo.phoneNumber).to.be("");
              expect(data.assignedTo.url).to.be.a('string');
              expect(data.assignedTo.url).to.be("");
            expect(data.author).to.be.a(SendPostApi.ModelsMember);
                  expect(data.author.companyName).to.be.a('string');
              expect(data.author.companyName).to.be("");
              expect(data.author.created).to.be.a('number');
              expect(data.author.created).to.be("0");
              expect(data.author.email).to.be.a('string');
              expect(data.author.email).to.be("");
              expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.isForbidden).to.be.a('boolean');
              expect(data.author.isForbidden).to.be(false);
              expect(data.author.isVerified).to.be.a('boolean');
              expect(data.author.isVerified).to.be(false);
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
              expect(data.author.onboardQAnswered).to.be.a('boolean');
              expect(data.author.onboardQAnswered).to.be(false);
              expect(data.author.phoneNumber).to.be.a('string');
              expect(data.author.phoneNumber).to.be("");
              expect(data.author.url).to.be.a('string');
              expect(data.author.url).to.be("");
            expect(data.closed).to.be.a('number');
            expect(data.closed).to.be("0");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.modifiedBy.companyName).to.be.a('string');
              expect(data.modifiedBy.companyName).to.be("");
              expect(data.modifiedBy.created).to.be.a('number');
              expect(data.modifiedBy.created).to.be("0");
              expect(data.modifiedBy.email).to.be.a('string');
              expect(data.modifiedBy.email).to.be("");
              expect(data.modifiedBy.id).to.be.a('number');
              expect(data.modifiedBy.id).to.be("0");
              expect(data.modifiedBy.isForbidden).to.be.a('boolean');
              expect(data.modifiedBy.isForbidden).to.be(false);
              expect(data.modifiedBy.isVerified).to.be.a('boolean');
              expect(data.modifiedBy.isVerified).to.be(false);
              expect(data.modifiedBy.name).to.be.a('string');
              expect(data.modifiedBy.name).to.be("");
              expect(data.modifiedBy.onboardQAnswered).to.be.a('boolean');
              expect(data.modifiedBy.onboardQAnswered).to.be(false);
              expect(data.modifiedBy.phoneNumber).to.be.a('string');
              expect(data.modifiedBy.phoneNumber).to.be("");
              expect(data.modifiedBy.url).to.be.a('string');
              expect(data.modifiedBy.url).to.be("");
            expect(data.relatedIP).to.be.a(SendPostApi.ModelsIP);
                  expect(data.relatedIP.aolSettings).to.be.a('string');
              expect(data.relatedIP.aolSettings).to.be("");
              expect(data.relatedIP.attSettings).to.be.a('string');
              expect(data.relatedIP.attSettings).to.be("");
              expect(data.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                    expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.created).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.created).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.id).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.id).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.name).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.name).to.be("");
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.updated).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
              expect(data.relatedIP.comcastSettings).to.be.a('string');
              expect(data.relatedIP.comcastSettings).to.be("");
              expect(data.relatedIP.created).to.be.a('number');
              expect(data.relatedIP.created).to.be("0");
              expect(data.relatedIP.defaultSettings).to.be.a('string');
              expect(data.relatedIP.defaultSettings).to.be("");
              expect(data.relatedIP.gmailSettings).to.be.a('string');
              expect(data.relatedIP.gmailSettings).to.be("");
              expect(data.relatedIP.gmxSettings).to.be.a('string');
              expect(data.relatedIP.gmxSettings).to.be("");
              expect(data.relatedIP.icloudSettings).to.be.a('string');
              expect(data.relatedIP.icloudSettings).to.be("");
              expect(data.relatedIP.id).to.be.a('number');
              expect(data.relatedIP.id).to.be("0");
              expect(data.relatedIP.infraClassification).to.be.a('string');
              expect(data.relatedIP.infraClassification).to.be("");
              expect(data.relatedIP.infraMonitor).to.be.a('boolean');
              expect(data.relatedIP.infraMonitor).to.be(false);
              {
                let dataCtr = data.relatedIP.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedIP.mailruSettings).to.be.a('string');
              expect(data.relatedIP.mailruSettings).to.be("");
              expect(data.relatedIP.microsoftSettings).to.be.a('string');
              expect(data.relatedIP.microsoftSettings).to.be("");
              expect(data.relatedIP.publicIP).to.be.a('string');
              expect(data.relatedIP.publicIP).to.be("");
              expect(data.relatedIP.qqSettings).to.be.a('string');
              expect(data.relatedIP.qqSettings).to.be("");
              expect(data.relatedIP.reverseDNSHostname).to.be.a('string');
              expect(data.relatedIP.reverseDNSHostname).to.be("");
              expect(data.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                  expect(data.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                    expect(data.relatedIP.systemDomain.created).to.be.a('number');
                expect(data.relatedIP.systemDomain.created).to.be("0");
                expect(data.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.dkim.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.host).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.type).to.be("");
                expect(data.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                expect(data.relatedIP.systemDomain.dkimConfig).to.be("");
                expect(data.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.dkimVerified).to.be(false);
                expect(data.relatedIP.systemDomain.id).to.be.a('number');
                expect(data.relatedIP.systemDomain.id).to.be("0");
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be(false);
                expect(data.relatedIP.systemDomain.name).to.be.a('string');
                expect(data.relatedIP.systemDomain.name).to.be("");
                expect(data.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.spf.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.host).to.be("");
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.spf.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.type).to.be("");
                expect(data.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.spfVerified).to.be(false);
                expect(data.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.track.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.host).to.be("");
                  expect(data.relatedIP.systemDomain.track.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.track.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.type).to.be("");
                expect(data.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.trackVerified).to.be(false);
              expect(data.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                  expect(data.relatedIP.yahooSettings).to.be.a('string');
              expect(data.relatedIP.yahooSettings).to.be("");
              expect(data.relatedIP.yandexSettings).to.be.a('string');
              expect(data.relatedIP.yandexSettings).to.be("");
              expect(data.relatedIP.zohoSettings).to.be.a('string');
              expect(data.relatedIP.zohoSettings).to.be("");
            expect(data.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                  expect(data.relatedSubAccount.apiKey).to.be.a('string');
              expect(data.relatedSubAccount.apiKey).to.be("");
              expect(data.relatedSubAccount.created).to.be.a('number');
              expect(data.relatedSubAccount.created).to.be("0");
              expect(data.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.createdBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.companyName).to.be("");
                expect(data.relatedSubAccount.createdBy.created).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.created).to.be("0");
                expect(data.relatedSubAccount.createdBy.email).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.email).to.be("");
                expect(data.relatedSubAccount.createdBy.id).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.id).to.be("0");
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.createdBy.name).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.name).to.be("");
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.createdBy.url).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.url).to.be("");
              expect(data.relatedSubAccount.id).to.be.a('number');
              expect(data.relatedSubAccount.id).to.be("0");
              expect(data.relatedSubAccount.isPlus).to.be.a('boolean');
              expect(data.relatedSubAccount.isPlus).to.be(false);
              {
                let dataCtr = data.relatedSubAccount.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedSubAccount.name).to.be.a('string');
              expect(data.relatedSubAccount.name).to.be("");
              {
                let dataCtr = data.relatedSubAccount.smtpAuths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.password).to.be.a('string');
                  expect(data.password).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.username).to.be.a('string');
                  expect(data.username).to.be("");
  
                        }
              }
              expect(data.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                  expect(data.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.companyName).to.be("");
                expect(data.relatedSubAccount.updatedBy.created).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.created).to.be("0");
                expect(data.relatedSubAccount.updatedBy.email).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.email).to.be("");
                expect(data.relatedSubAccount.updatedBy.id).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.id).to.be("0");
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.updatedBy.name).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.name).to.be("");
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.updatedBy.url).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.url).to.be("");
            expect(data.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                expect(data.summary).to.be.a('string');
            expect(data.summary).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsTag);
                expect(data.color).to.be.a('string');
                expect(data.color).to.be("");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.createdBy.companyName).to.be.a('string');
                  expect(data.createdBy.companyName).to.be("");
                  expect(data.createdBy.created).to.be.a('number');
                  expect(data.createdBy.created).to.be("0");
                  expect(data.createdBy.email).to.be.a('string');
                  expect(data.createdBy.email).to.be("");
                  expect(data.createdBy.id).to.be.a('number');
                  expect(data.createdBy.id).to.be("0");
                  expect(data.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.createdBy.isForbidden).to.be(false);
                  expect(data.createdBy.isVerified).to.be.a('boolean');
                  expect(data.createdBy.isVerified).to.be(false);
                  expect(data.createdBy.name).to.be.a('string');
                  expect(data.createdBy.name).to.be("");
                  expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.createdBy.onboardQAnswered).to.be(false);
                  expect(data.createdBy.phoneNumber).to.be.a('string');
                  expect(data.createdBy.phoneNumber).to.be("");
                  expect(data.createdBy.url).to.be.a('string');
                  expect(data.createdBy.url).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.updated).to.be.a('number');
                expect(data.updated).to.be("0");
                expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.updatedBy.companyName).to.be.a('string');
                  expect(data.updatedBy.companyName).to.be("");
                  expect(data.updatedBy.created).to.be.a('number');
                  expect(data.updatedBy.created).to.be("0");
                  expect(data.updatedBy.email).to.be.a('string');
                  expect(data.updatedBy.email).to.be("");
                  expect(data.updatedBy.id).to.be.a('number');
                  expect(data.updatedBy.id).to.be("0");
                  expect(data.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.updatedBy.isForbidden).to.be(false);
                  expect(data.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.updatedBy.isVerified).to.be(false);
                  expect(data.updatedBy.name).to.be.a('string');
                  expect(data.updatedBy.name).to.be("");
                  expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.updatedBy.phoneNumber).to.be("");
                  expect(data.updatedBy.url).to.be.a('string');
                  expect(data.updatedBy.url).to.be("");

                      }
            }
            expect(data.updated).to.be.a('number');
            expect(data.updated).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incidentRouterUpdate', function() {
        it('should call incidentRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for incidentRouterUpdate call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var incidentId = 789;
          var body = new SendPostApi.ModelsEIncident();
          body.assignedTo = new SendPostApi.ModelsIEMember();
          body.assignedTo.id = "0";
          body.author = new SendPostApi.ModelsIEMember();
          body.author.id = "0";
          body.description = "";
          body.modifiedBy = new SendPostApi.ModelsIEMember();
          body.modifiedBy.id = "0";
          body.relatedIP = new SendPostApi.ModelsIEIP();
          body.relatedIP.id = "0";
          body.relatedSubAccount = new SendPostApi.ModelsIESubAccount();
          body.relatedSubAccount.id = "0";
          body.status = "0";
          body.summary = "";
          body.tags = [new SendPostApi.ModelsIETag()];
          body.tags[0].id = "0";

          instance.incidentRouterUpdate(xAccountApiKey, incidentId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIncident);
            expect(data.assignedTo).to.be.a(SendPostApi.ModelsMember);
                  expect(data.assignedTo.companyName).to.be.a('string');
              expect(data.assignedTo.companyName).to.be("");
              expect(data.assignedTo.created).to.be.a('number');
              expect(data.assignedTo.created).to.be("0");
              expect(data.assignedTo.email).to.be.a('string');
              expect(data.assignedTo.email).to.be("");
              expect(data.assignedTo.id).to.be.a('number');
              expect(data.assignedTo.id).to.be("0");
              expect(data.assignedTo.isForbidden).to.be.a('boolean');
              expect(data.assignedTo.isForbidden).to.be(false);
              expect(data.assignedTo.isVerified).to.be.a('boolean');
              expect(data.assignedTo.isVerified).to.be(false);
              expect(data.assignedTo.name).to.be.a('string');
              expect(data.assignedTo.name).to.be("");
              expect(data.assignedTo.onboardQAnswered).to.be.a('boolean');
              expect(data.assignedTo.onboardQAnswered).to.be(false);
              expect(data.assignedTo.phoneNumber).to.be.a('string');
              expect(data.assignedTo.phoneNumber).to.be("");
              expect(data.assignedTo.url).to.be.a('string');
              expect(data.assignedTo.url).to.be("");
            expect(data.author).to.be.a(SendPostApi.ModelsMember);
                  expect(data.author.companyName).to.be.a('string');
              expect(data.author.companyName).to.be("");
              expect(data.author.created).to.be.a('number');
              expect(data.author.created).to.be("0");
              expect(data.author.email).to.be.a('string');
              expect(data.author.email).to.be("");
              expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.isForbidden).to.be.a('boolean');
              expect(data.author.isForbidden).to.be(false);
              expect(data.author.isVerified).to.be.a('boolean');
              expect(data.author.isVerified).to.be(false);
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
              expect(data.author.onboardQAnswered).to.be.a('boolean');
              expect(data.author.onboardQAnswered).to.be(false);
              expect(data.author.phoneNumber).to.be.a('string');
              expect(data.author.phoneNumber).to.be("");
              expect(data.author.url).to.be.a('string');
              expect(data.author.url).to.be("");
            expect(data.closed).to.be.a('number');
            expect(data.closed).to.be("0");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                  expect(data.modifiedBy.companyName).to.be.a('string');
              expect(data.modifiedBy.companyName).to.be("");
              expect(data.modifiedBy.created).to.be.a('number');
              expect(data.modifiedBy.created).to.be("0");
              expect(data.modifiedBy.email).to.be.a('string');
              expect(data.modifiedBy.email).to.be("");
              expect(data.modifiedBy.id).to.be.a('number');
              expect(data.modifiedBy.id).to.be("0");
              expect(data.modifiedBy.isForbidden).to.be.a('boolean');
              expect(data.modifiedBy.isForbidden).to.be(false);
              expect(data.modifiedBy.isVerified).to.be.a('boolean');
              expect(data.modifiedBy.isVerified).to.be(false);
              expect(data.modifiedBy.name).to.be.a('string');
              expect(data.modifiedBy.name).to.be("");
              expect(data.modifiedBy.onboardQAnswered).to.be.a('boolean');
              expect(data.modifiedBy.onboardQAnswered).to.be(false);
              expect(data.modifiedBy.phoneNumber).to.be.a('string');
              expect(data.modifiedBy.phoneNumber).to.be("");
              expect(data.modifiedBy.url).to.be.a('string');
              expect(data.modifiedBy.url).to.be("");
            expect(data.relatedIP).to.be.a(SendPostApi.ModelsIP);
                  expect(data.relatedIP.aolSettings).to.be.a('string');
              expect(data.relatedIP.aolSettings).to.be("");
              expect(data.relatedIP.attSettings).to.be.a('string');
              expect(data.relatedIP.attSettings).to.be("");
              expect(data.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                    expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.created).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.created).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.id).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.id).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.name).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.name).to.be("");
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.updated).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
              expect(data.relatedIP.comcastSettings).to.be.a('string');
              expect(data.relatedIP.comcastSettings).to.be("");
              expect(data.relatedIP.created).to.be.a('number');
              expect(data.relatedIP.created).to.be("0");
              expect(data.relatedIP.defaultSettings).to.be.a('string');
              expect(data.relatedIP.defaultSettings).to.be("");
              expect(data.relatedIP.gmailSettings).to.be.a('string');
              expect(data.relatedIP.gmailSettings).to.be("");
              expect(data.relatedIP.gmxSettings).to.be.a('string');
              expect(data.relatedIP.gmxSettings).to.be("");
              expect(data.relatedIP.icloudSettings).to.be.a('string');
              expect(data.relatedIP.icloudSettings).to.be("");
              expect(data.relatedIP.id).to.be.a('number');
              expect(data.relatedIP.id).to.be("0");
              expect(data.relatedIP.infraClassification).to.be.a('string');
              expect(data.relatedIP.infraClassification).to.be("");
              expect(data.relatedIP.infraMonitor).to.be.a('boolean');
              expect(data.relatedIP.infraMonitor).to.be(false);
              {
                let dataCtr = data.relatedIP.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedIP.mailruSettings).to.be.a('string');
              expect(data.relatedIP.mailruSettings).to.be("");
              expect(data.relatedIP.microsoftSettings).to.be.a('string');
              expect(data.relatedIP.microsoftSettings).to.be("");
              expect(data.relatedIP.publicIP).to.be.a('string');
              expect(data.relatedIP.publicIP).to.be("");
              expect(data.relatedIP.qqSettings).to.be.a('string');
              expect(data.relatedIP.qqSettings).to.be("");
              expect(data.relatedIP.reverseDNSHostname).to.be.a('string');
              expect(data.relatedIP.reverseDNSHostname).to.be("");
              expect(data.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                  expect(data.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                    expect(data.relatedIP.systemDomain.created).to.be.a('number');
                expect(data.relatedIP.systemDomain.created).to.be("0");
                expect(data.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.dkim.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.host).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.dkim.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkim.type).to.be("");
                expect(data.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                expect(data.relatedIP.systemDomain.dkimConfig).to.be("");
                expect(data.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.dkimVerified).to.be(false);
                expect(data.relatedIP.systemDomain.id).to.be.a('number');
                expect(data.relatedIP.systemDomain.id).to.be("0");
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.mailboxVerified).to.be(false);
                expect(data.relatedIP.systemDomain.name).to.be.a('string');
                expect(data.relatedIP.systemDomain.name).to.be("");
                expect(data.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.spf.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.host).to.be("");
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.spf.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.spf.type).to.be("");
                expect(data.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.spfVerified).to.be(false);
                expect(data.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.relatedIP.systemDomain.track.host).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.host).to.be("");
                  expect(data.relatedIP.systemDomain.track.textValue).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.textValue).to.be("");
                  expect(data.relatedIP.systemDomain.track.type).to.be.a('string');
                  expect(data.relatedIP.systemDomain.track.type).to.be("");
                expect(data.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                expect(data.relatedIP.systemDomain.trackVerified).to.be(false);
              expect(data.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                  expect(data.relatedIP.yahooSettings).to.be.a('string');
              expect(data.relatedIP.yahooSettings).to.be("");
              expect(data.relatedIP.yandexSettings).to.be.a('string');
              expect(data.relatedIP.yandexSettings).to.be("");
              expect(data.relatedIP.zohoSettings).to.be.a('string');
              expect(data.relatedIP.zohoSettings).to.be("");
            expect(data.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                  expect(data.relatedSubAccount.apiKey).to.be.a('string');
              expect(data.relatedSubAccount.apiKey).to.be("");
              expect(data.relatedSubAccount.created).to.be.a('number');
              expect(data.relatedSubAccount.created).to.be("0");
              expect(data.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.createdBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.companyName).to.be("");
                expect(data.relatedSubAccount.createdBy.created).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.created).to.be("0");
                expect(data.relatedSubAccount.createdBy.email).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.email).to.be("");
                expect(data.relatedSubAccount.createdBy.id).to.be.a('number');
                expect(data.relatedSubAccount.createdBy.id).to.be("0");
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.createdBy.name).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.name).to.be("");
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.createdBy.url).to.be.a('string');
                expect(data.relatedSubAccount.createdBy.url).to.be("");
              expect(data.relatedSubAccount.id).to.be.a('number');
              expect(data.relatedSubAccount.id).to.be("0");
              expect(data.relatedSubAccount.isPlus).to.be.a('boolean');
              expect(data.relatedSubAccount.isPlus).to.be(false);
              {
                let dataCtr = data.relatedSubAccount.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.relatedSubAccount.name).to.be.a('string');
              expect(data.relatedSubAccount.name).to.be("");
              {
                let dataCtr = data.relatedSubAccount.smtpAuths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.password).to.be.a('string');
                  expect(data.password).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.username).to.be.a('string');
                  expect(data.username).to.be("");
  
                        }
              }
              expect(data.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                  expect(data.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.companyName).to.be("");
                expect(data.relatedSubAccount.updatedBy.created).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.created).to.be("0");
                expect(data.relatedSubAccount.updatedBy.email).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.email).to.be("");
                expect(data.relatedSubAccount.updatedBy.id).to.be.a('number');
                expect(data.relatedSubAccount.updatedBy.id).to.be("0");
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.isVerified).to.be(false);
                expect(data.relatedSubAccount.updatedBy.name).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.name).to.be("");
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                expect(data.relatedSubAccount.updatedBy.url).to.be.a('string');
                expect(data.relatedSubAccount.updatedBy.url).to.be("");
            expect(data.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                expect(data.summary).to.be.a('string');
            expect(data.summary).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsTag);
                expect(data.color).to.be.a('string');
                expect(data.color).to.be("");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.createdBy.companyName).to.be.a('string');
                  expect(data.createdBy.companyName).to.be("");
                  expect(data.createdBy.created).to.be.a('number');
                  expect(data.createdBy.created).to.be("0");
                  expect(data.createdBy.email).to.be.a('string');
                  expect(data.createdBy.email).to.be("");
                  expect(data.createdBy.id).to.be.a('number');
                  expect(data.createdBy.id).to.be("0");
                  expect(data.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.createdBy.isForbidden).to.be(false);
                  expect(data.createdBy.isVerified).to.be.a('boolean');
                  expect(data.createdBy.isVerified).to.be(false);
                  expect(data.createdBy.name).to.be.a('string');
                  expect(data.createdBy.name).to.be("");
                  expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.createdBy.onboardQAnswered).to.be(false);
                  expect(data.createdBy.phoneNumber).to.be.a('string');
                  expect(data.createdBy.phoneNumber).to.be("");
                  expect(data.createdBy.url).to.be.a('string');
                  expect(data.createdBy.url).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.updated).to.be.a('number');
                expect(data.updated).to.be("0");
                expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.updatedBy.companyName).to.be.a('string');
                  expect(data.updatedBy.companyName).to.be("");
                  expect(data.updatedBy.created).to.be.a('number');
                  expect(data.updatedBy.created).to.be("0");
                  expect(data.updatedBy.email).to.be.a('string');
                  expect(data.updatedBy.email).to.be("");
                  expect(data.updatedBy.id).to.be.a('number');
                  expect(data.updatedBy.id).to.be("0");
                  expect(data.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.updatedBy.isForbidden).to.be(false);
                  expect(data.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.updatedBy.isVerified).to.be(false);
                  expect(data.updatedBy.name).to.be.a('string');
                  expect(data.updatedBy.name).to.be("");
                  expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.updatedBy.phoneNumber).to.be("");
                  expect(data.updatedBy.url).to.be.a('string');
                  expect(data.updatedBy.url).to.be("");

                      }
            }
            expect(data.updated).to.be.a('number');
            expect(data.updated).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
