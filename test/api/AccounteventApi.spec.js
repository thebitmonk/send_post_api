/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountEventApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountEventApi', function() {
    describe('eventRouterCountAllEventsFromAAccountForAGivenTimeRange', function() {
      it('should call eventRouterCountAllEventsFromAAccountForAGivenTimeRange successfully', function(done) {
        //uncomment below and update the code to test eventRouterCountAllEventsFromAAccountForAGivenTimeRange
        //instance.eventRouterCountAllEventsFromAAccountForAGivenTimeRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange', function() {
      it('should call eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange successfully', function(done) {
        //uncomment below and update the code to test eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange
        //instance.eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGet', function() {
      it('should call eventRouterGet successfully', function(done) {
        //uncomment below and update the code to test eventRouterGet
        //instance.eventRouterGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange', function() {
      it('should call eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange successfully', function(done) {
        //uncomment below and update the code to test eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange
        //instance.eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGetAllEventsFromAAccountForAGivenTimeRange', function() {
      it('should call eventRouterGetAllEventsFromAAccountForAGivenTimeRange successfully', function(done) {
        //uncomment below and update the code to test eventRouterGetAllEventsFromAAccountForAGivenTimeRange
        //instance.eventRouterGetAllEventsFromAAccountForAGivenTimeRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed', function() {
      it('should call eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed successfully', function(done) {
        //uncomment below and update the code to test eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed
        //instance.eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGetAllEventsOfAAccountFromASpecificNode', function() {
      it('should call eventRouterGetAllEventsOfAAccountFromASpecificNode successfully', function(done) {
        //uncomment below and update the code to test eventRouterGetAllEventsOfAAccountFromASpecificNode
        //instance.eventRouterGetAllEventsOfAAccountFromASpecificNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventRouterGetEventInNode', function() {
      it('should call eventRouterGetEventInNode successfully', function(done) {
        //uncomment below and update the code to test eventRouterGetEventInNode
        //instance.eventRouterGetEventInNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
