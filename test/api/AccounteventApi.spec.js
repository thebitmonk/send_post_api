/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccounteventApi();
  });

  describe('(package)', function() {
    describe('AccounteventApi', function() {
      describe('eventRouterCountAllEventsFromAAccountForAGivenTimeRange', function() {
        it('should call eventRouterCountAllEventsFromAAccountForAGivenTimeRange successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterCountAllEventsFromAAccountForAGivenTimeRange call and complete the assertions
          /*
          var opts = {};

          instance.eventRouterCountAllEventsFromAAccountForAGivenTimeRange(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange', function() {
        it('should call eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange call and complete the assertions
          /*
          var opts = {};

          instance.eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGet', function() {
        it('should call eventRouterGet successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGet call and complete the assertions
          /*

          instance.eventRouterGet(xAccountApiKey, eventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsQEvent);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange', function() {
        it('should call eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange call and complete the assertions
          /*
          var opts = {};

          instance.eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsQEvent);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGetAllEventsFromAAccountForAGivenTimeRange', function() {
        it('should call eventRouterGetAllEventsFromAAccountForAGivenTimeRange successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGetAllEventsFromAAccountForAGivenTimeRange call and complete the assertions
          /*
          var opts = {};

          instance.eventRouterGetAllEventsFromAAccountForAGivenTimeRange(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsQEvent);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed', function() {
        it('should call eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed call and complete the assertions
          /*
          var opts = {};

          instance.eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsQEvent);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGetAllEventsOfAAccountFromASpecificNode', function() {
        it('should call eventRouterGetAllEventsOfAAccountFromASpecificNode successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGetAllEventsOfAAccountFromASpecificNode call and complete the assertions
          /*

          instance.eventRouterGetAllEventsOfAAccountFromASpecificNode(xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsQEvent);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventRouterGetEventInNode', function() {
        it('should call eventRouterGetEventInNode successfully', function(done) {
          // TODO: uncomment, update parameter values for eventRouterGetEventInNode call and complete the assertions
          /*

          instance.eventRouterGetEventInNode(xAccountApiKey, eventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsQEvent);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
