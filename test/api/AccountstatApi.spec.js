/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountstatApi();
  });

  describe('(package)', function() {
    describe('AccountstatApi', function() {
      describe('accountStatRouterGetAllAccountStats', function() {
        it('should call accountStatRouterGetAllAccountStats successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAccountStats call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAccountStats(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsRStat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountStatRouterGetAllAccountStatsByGroup', function() {
        it('should call accountStatRouterGetAllAccountStatsByGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAccountStatsByGroup call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAccountStatsByGroup(xAccountApiKey, group, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsRStat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountStatRouterGetAllAggregateAccountStats', function() {
        it('should call accountStatRouterGetAllAggregateAccountStats successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAggregateAccountStats call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAggregateAccountStats(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountStatRouterGetAllAggregateAccountStatsByGroup', function() {
        it('should call accountStatRouterGetAllAggregateAccountStatsByGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAggregateAccountStatsByGroup call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAggregateAccountStatsByGroup(xAccountApiKey, group, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountStatRouterGetAllAggregateIPStats', function() {
        it('should call accountStatRouterGetAllAggregateIPStats successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAggregateIPStats call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAggregateIPStats(xAccountApiKey, from, to, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsAGIPStat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountStatRouterGetAllAggregateSubAccountStats', function() {
        it('should call accountStatRouterGetAllAggregateSubAccountStats successfully', function(done) {
          // TODO: uncomment, update parameter values for accountStatRouterGetAllAggregateSubAccountStats call and complete the assertions
          /*
          var opts = {};

          instance.accountStatRouterGetAllAggregateSubAccountStats(xAccountApiKey, from, to, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsAGSubAccountStat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
