/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountsubaccountApi();
  });

  describe('(package)', function() {
    describe('AccountsubaccountApi', function() {
      describe('subAccountRouterCount', function() {
        it('should call subAccountRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterCount call and complete the assertions
          /*
          var opts = {};

          instance.subAccountRouterCount(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterCreate', function() {
        it('should call subAccountRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterCreate call and complete the assertions
          /*

          instance.subAccountRouterCreate(body, xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsSubAccount);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterDelete', function() {
        it('should call subAccountRouterDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterDelete call and complete the assertions
          /*

          instance.subAccountRouterDelete(xAccountApiKey, subAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsDeleteResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterGet', function() {
        it('should call subAccountRouterGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterGet call and complete the assertions
          /*

          instance.subAccountRouterGet(xAccountApiKey, subAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsSubAccount);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterGetAll', function() {
        it('should call subAccountRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterGetAll call and complete the assertions
          /*
          var opts = {};

          instance.subAccountRouterGetAll(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsSubAccount);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterGetAllSubAccountIncidents', function() {
        it('should call subAccountRouterGetAllSubAccountIncidents successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterGetAllSubAccountIncidents call and complete the assertions
          /*

          instance.subAccountRouterGetAllSubAccountIncidents(xAccountApiKey, subAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIncident);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountRouterUpdate', function() {
        it('should call subAccountRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountRouterUpdate call and complete the assertions
          /*

          instance.subAccountRouterUpdate(body, xAccountApiKey, subAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsSubAccount);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
