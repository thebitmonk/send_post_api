/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.AccountipApi();
  });

  describe('(package)', function() {
    describe('AccountipApi', function() {
      describe('iPRouterAllocateIP', function() {
        it('should call iPRouterAllocateIP successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterAllocateIP call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";

          instance.iPRouterAllocateIP(xAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIP);
              expect(data.aolSettings).to.be.a('string');
              expect(data.aolSettings).to.be("");
              expect(data.attSettings).to.be.a('string');
              expect(data.attSettings).to.be("");
              expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                    expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.created).to.be.a('number');
                expect(data.autoWarmupPlan.created).to.be("0");
                expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.id).to.be.a('number');
                expect(data.autoWarmupPlan.id).to.be("0");
                expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.name).to.be.a('string');
                expect(data.autoWarmupPlan.name).to.be("");
                expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.updated).to.be.a('number');
                expect(data.autoWarmupPlan.updated).to.be("0");
                expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
                expect(data.autoWarmupPlan.warmupInterval).to.be("0");
                expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
              expect(data.comcastSettings).to.be.a('string');
              expect(data.comcastSettings).to.be("");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.defaultSettings).to.be.a('string');
              expect(data.defaultSettings).to.be("");
              expect(data.gmailSettings).to.be.a('string');
              expect(data.gmailSettings).to.be("");
              expect(data.gmxSettings).to.be.a('string');
              expect(data.gmxSettings).to.be("");
              expect(data.icloudSettings).to.be.a('string');
              expect(data.icloudSettings).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.infraClassification).to.be.a('string');
              expect(data.infraClassification).to.be("");
              expect(data.infraMonitor).to.be.a('boolean');
              expect(data.infraMonitor).to.be(false);
              {
                let dataCtr = data.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.mailruSettings).to.be.a('string');
              expect(data.mailruSettings).to.be("");
              expect(data.microsoftSettings).to.be.a('string');
              expect(data.microsoftSettings).to.be("");
              expect(data.publicIP).to.be.a('string');
              expect(data.publicIP).to.be("");
              expect(data.qqSettings).to.be.a('string');
              expect(data.qqSettings).to.be("");
              expect(data.reverseDNSHostname).to.be.a('string');
              expect(data.reverseDNSHostname).to.be("");
              expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                  expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                    expect(data.systemDomain.created).to.be.a('number');
                expect(data.systemDomain.created).to.be("0");
                expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.dkim.host).to.be.a('string');
                  expect(data.systemDomain.dkim.host).to.be("");
                  expect(data.systemDomain.dkim.textValue).to.be.a('string');
                  expect(data.systemDomain.dkim.textValue).to.be("");
                  expect(data.systemDomain.dkim.type).to.be.a('string');
                  expect(data.systemDomain.dkim.type).to.be("");
                expect(data.systemDomain.dkimConfig).to.be.a('string');
                expect(data.systemDomain.dkimConfig).to.be("");
                expect(data.systemDomain.dkimVerified).to.be.a('boolean');
                expect(data.systemDomain.dkimVerified).to.be(false);
                expect(data.systemDomain.id).to.be.a('number');
                expect(data.systemDomain.id).to.be("0");
                expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
                expect(data.systemDomain.mailboxVerified).to.be(false);
                expect(data.systemDomain.name).to.be.a('string');
                expect(data.systemDomain.name).to.be("");
                expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.spf.host).to.be.a('string');
                  expect(data.systemDomain.spf.host).to.be("");
                  expect(data.systemDomain.spf.textValue).to.be.a('string');
                  expect(data.systemDomain.spf.textValue).to.be("");
                  expect(data.systemDomain.spf.type).to.be.a('string');
                  expect(data.systemDomain.spf.type).to.be("");
                expect(data.systemDomain.spfVerified).to.be.a('boolean');
                expect(data.systemDomain.spfVerified).to.be(false);
                expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.track.host).to.be.a('string');
                  expect(data.systemDomain.track.host).to.be("");
                  expect(data.systemDomain.track.textValue).to.be.a('string');
                  expect(data.systemDomain.track.textValue).to.be("");
                  expect(data.systemDomain.track.type).to.be.a('string');
                  expect(data.systemDomain.track.type).to.be("");
                expect(data.systemDomain.trackVerified).to.be.a('boolean');
                expect(data.systemDomain.trackVerified).to.be(false);
              expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                  expect(data.yahooSettings).to.be.a('string');
              expect(data.yahooSettings).to.be("");
              expect(data.yandexSettings).to.be.a('string');
              expect(data.yandexSettings).to.be("");
              expect(data.zohoSettings).to.be.a('string');
              expect(data.zohoSettings).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterCount', function() {
        it('should call iPRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterCount call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var opts = {};
          opts.filterBy = "filterBy_example";
          opts.filterValue = 789;
          opts.search = "search_example";

          instance.iPRouterCount(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterDelete', function() {
        it('should call iPRouterDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterDelete call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;

          instance.iPRouterDelete(xAccountApiKey, ipid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsDeleteResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGet', function() {
        it('should call iPRouterGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGet call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;

          instance.iPRouterGet(xAccountApiKey, ipid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIP);
            expect(data.aolSettings).to.be.a('string');
            expect(data.aolSettings).to.be("");
            expect(data.attSettings).to.be.a('string');
            expect(data.attSettings).to.be("");
            expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                  expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.created).to.be.a('number');
              expect(data.autoWarmupPlan.created).to.be("0");
              expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.id).to.be.a('number');
              expect(data.autoWarmupPlan.id).to.be("0");
              expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.name).to.be.a('string');
              expect(data.autoWarmupPlan.name).to.be("");
              expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.updated).to.be.a('number');
              expect(data.autoWarmupPlan.updated).to.be("0");
              expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
              expect(data.autoWarmupPlan.warmupInterval).to.be("0");
              expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
            expect(data.comcastSettings).to.be.a('string');
            expect(data.comcastSettings).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.defaultSettings).to.be.a('string');
            expect(data.defaultSettings).to.be("");
            expect(data.gmailSettings).to.be.a('string');
            expect(data.gmailSettings).to.be("");
            expect(data.gmxSettings).to.be.a('string');
            expect(data.gmxSettings).to.be("");
            expect(data.icloudSettings).to.be.a('string');
            expect(data.icloudSettings).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.infraClassification).to.be.a('string');
            expect(data.infraClassification).to.be("");
            expect(data.infraMonitor).to.be.a('boolean');
            expect(data.infraMonitor).to.be(false);
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsLabel);
                expect(data.color).to.be.a('string');
                expect(data.color).to.be("");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be("0");

                      }
            }
            expect(data.mailruSettings).to.be.a('string');
            expect(data.mailruSettings).to.be("");
            expect(data.microsoftSettings).to.be.a('string');
            expect(data.microsoftSettings).to.be("");
            expect(data.publicIP).to.be.a('string');
            expect(data.publicIP).to.be("");
            expect(data.qqSettings).to.be.a('string');
            expect(data.qqSettings).to.be("");
            expect(data.reverseDNSHostname).to.be.a('string');
            expect(data.reverseDNSHostname).to.be("");
            expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                  expect(data.systemDomain.created).to.be.a('number');
              expect(data.systemDomain.created).to.be("0");
              expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.dkim.host).to.be.a('string');
                expect(data.systemDomain.dkim.host).to.be("");
                expect(data.systemDomain.dkim.textValue).to.be.a('string');
                expect(data.systemDomain.dkim.textValue).to.be("");
                expect(data.systemDomain.dkim.type).to.be.a('string');
                expect(data.systemDomain.dkim.type).to.be("");
              expect(data.systemDomain.dkimConfig).to.be.a('string');
              expect(data.systemDomain.dkimConfig).to.be("");
              expect(data.systemDomain.dkimVerified).to.be.a('boolean');
              expect(data.systemDomain.dkimVerified).to.be(false);
              expect(data.systemDomain.id).to.be.a('number');
              expect(data.systemDomain.id).to.be("0");
              expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
              expect(data.systemDomain.mailboxVerified).to.be(false);
              expect(data.systemDomain.name).to.be.a('string');
              expect(data.systemDomain.name).to.be("");
              expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.spf.host).to.be.a('string');
                expect(data.systemDomain.spf.host).to.be("");
                expect(data.systemDomain.spf.textValue).to.be.a('string');
                expect(data.systemDomain.spf.textValue).to.be("");
                expect(data.systemDomain.spf.type).to.be.a('string');
                expect(data.systemDomain.spf.type).to.be("");
              expect(data.systemDomain.spfVerified).to.be.a('boolean');
              expect(data.systemDomain.spfVerified).to.be(false);
              expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.track.host).to.be.a('string');
                expect(data.systemDomain.track.host).to.be("");
                expect(data.systemDomain.track.textValue).to.be.a('string');
                expect(data.systemDomain.track.textValue).to.be("");
                expect(data.systemDomain.track.type).to.be.a('string');
                expect(data.systemDomain.track.type).to.be("");
              expect(data.systemDomain.trackVerified).to.be.a('boolean');
              expect(data.systemDomain.trackVerified).to.be(false);
            expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                expect(data.yahooSettings).to.be.a('string');
            expect(data.yahooSettings).to.be("");
            expect(data.yandexSettings).to.be.a('string');
            expect(data.yandexSettings).to.be("");
            expect(data.zohoSettings).to.be.a('string');
            expect(data.zohoSettings).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGetAll', function() {
        it('should call iPRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGetAll call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var opts = {};
          opts.offset = 789;
          opts.limit = 789;
          opts.filterBy = "filterBy_example";
          opts.filterValue = 789;
          opts.search = "search_example";

          instance.iPRouterGetAll(xAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIP);
              expect(data.aolSettings).to.be.a('string');
              expect(data.aolSettings).to.be("");
              expect(data.attSettings).to.be.a('string');
              expect(data.attSettings).to.be("");
              expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                    expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.created).to.be.a('number');
                expect(data.autoWarmupPlan.created).to.be("0");
                expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.id).to.be.a('number');
                expect(data.autoWarmupPlan.id).to.be("0");
                expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.name).to.be.a('string');
                expect(data.autoWarmupPlan.name).to.be("");
                expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.updated).to.be.a('number');
                expect(data.autoWarmupPlan.updated).to.be("0");
                expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
                expect(data.autoWarmupPlan.warmupInterval).to.be("0");
                expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
                expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
              expect(data.comcastSettings).to.be.a('string');
              expect(data.comcastSettings).to.be("");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.defaultSettings).to.be.a('string');
              expect(data.defaultSettings).to.be("");
              expect(data.gmailSettings).to.be.a('string');
              expect(data.gmailSettings).to.be("");
              expect(data.gmxSettings).to.be.a('string');
              expect(data.gmxSettings).to.be("");
              expect(data.icloudSettings).to.be.a('string');
              expect(data.icloudSettings).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.infraClassification).to.be.a('string');
              expect(data.infraClassification).to.be("");
              expect(data.infraMonitor).to.be.a('boolean');
              expect(data.infraMonitor).to.be(false);
              {
                let dataCtr = data.labels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsLabel);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be("0");
  
                        }
              }
              expect(data.mailruSettings).to.be.a('string');
              expect(data.mailruSettings).to.be("");
              expect(data.microsoftSettings).to.be.a('string');
              expect(data.microsoftSettings).to.be("");
              expect(data.publicIP).to.be.a('string');
              expect(data.publicIP).to.be("");
              expect(data.qqSettings).to.be.a('string');
              expect(data.qqSettings).to.be("");
              expect(data.reverseDNSHostname).to.be.a('string');
              expect(data.reverseDNSHostname).to.be("");
              expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                  expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                    expect(data.systemDomain.created).to.be.a('number');
                expect(data.systemDomain.created).to.be("0");
                expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.dkim.host).to.be.a('string');
                  expect(data.systemDomain.dkim.host).to.be("");
                  expect(data.systemDomain.dkim.textValue).to.be.a('string');
                  expect(data.systemDomain.dkim.textValue).to.be("");
                  expect(data.systemDomain.dkim.type).to.be.a('string');
                  expect(data.systemDomain.dkim.type).to.be("");
                expect(data.systemDomain.dkimConfig).to.be.a('string');
                expect(data.systemDomain.dkimConfig).to.be("");
                expect(data.systemDomain.dkimVerified).to.be.a('boolean');
                expect(data.systemDomain.dkimVerified).to.be(false);
                expect(data.systemDomain.id).to.be.a('number');
                expect(data.systemDomain.id).to.be("0");
                expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
                expect(data.systemDomain.mailboxVerified).to.be(false);
                expect(data.systemDomain.name).to.be.a('string');
                expect(data.systemDomain.name).to.be("");
                expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.spf.host).to.be.a('string');
                  expect(data.systemDomain.spf.host).to.be("");
                  expect(data.systemDomain.spf.textValue).to.be.a('string');
                  expect(data.systemDomain.spf.textValue).to.be("");
                  expect(data.systemDomain.spf.type).to.be.a('string');
                  expect(data.systemDomain.spf.type).to.be("");
                expect(data.systemDomain.spfVerified).to.be.a('boolean');
                expect(data.systemDomain.spfVerified).to.be(false);
                expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                      expect(data.systemDomain.track.host).to.be.a('string');
                  expect(data.systemDomain.track.host).to.be("");
                  expect(data.systemDomain.track.textValue).to.be.a('string');
                  expect(data.systemDomain.track.textValue).to.be("");
                  expect(data.systemDomain.track.type).to.be.a('string');
                  expect(data.systemDomain.track.type).to.be("");
                expect(data.systemDomain.trackVerified).to.be.a('boolean');
                expect(data.systemDomain.trackVerified).to.be(false);
              expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                  expect(data.yahooSettings).to.be.a('string');
              expect(data.yahooSettings).to.be("");
              expect(data.yandexSettings).to.be.a('string');
              expect(data.yandexSettings).to.be("");
              expect(data.zohoSettings).to.be.a('string');
              expect(data.zohoSettings).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGetAllIPIncidents', function() {
        it('should call iPRouterGetAllIPIncidents successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGetAllIPIncidents call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;

          instance.iPRouterGetAllIPIncidents(xAccountApiKey, ipid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIncident);
              expect(data.assignedTo).to.be.a(SendPostApi.ModelsMember);
                    expect(data.assignedTo.companyName).to.be.a('string');
                expect(data.assignedTo.companyName).to.be("");
                expect(data.assignedTo.created).to.be.a('number');
                expect(data.assignedTo.created).to.be("0");
                expect(data.assignedTo.email).to.be.a('string');
                expect(data.assignedTo.email).to.be("");
                expect(data.assignedTo.id).to.be.a('number');
                expect(data.assignedTo.id).to.be("0");
                expect(data.assignedTo.isForbidden).to.be.a('boolean');
                expect(data.assignedTo.isForbidden).to.be(false);
                expect(data.assignedTo.isVerified).to.be.a('boolean');
                expect(data.assignedTo.isVerified).to.be(false);
                expect(data.assignedTo.name).to.be.a('string');
                expect(data.assignedTo.name).to.be("");
                expect(data.assignedTo.onboardQAnswered).to.be.a('boolean');
                expect(data.assignedTo.onboardQAnswered).to.be(false);
                expect(data.assignedTo.phoneNumber).to.be.a('string');
                expect(data.assignedTo.phoneNumber).to.be("");
                expect(data.assignedTo.url).to.be.a('string');
                expect(data.assignedTo.url).to.be("");
              expect(data.author).to.be.a(SendPostApi.ModelsMember);
                    expect(data.author.companyName).to.be.a('string');
                expect(data.author.companyName).to.be("");
                expect(data.author.created).to.be.a('number');
                expect(data.author.created).to.be("0");
                expect(data.author.email).to.be.a('string');
                expect(data.author.email).to.be("");
                expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.isForbidden).to.be.a('boolean');
                expect(data.author.isForbidden).to.be(false);
                expect(data.author.isVerified).to.be.a('boolean');
                expect(data.author.isVerified).to.be(false);
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
                expect(data.author.onboardQAnswered).to.be.a('boolean');
                expect(data.author.onboardQAnswered).to.be(false);
                expect(data.author.phoneNumber).to.be.a('string');
                expect(data.author.phoneNumber).to.be("");
                expect(data.author.url).to.be.a('string');
                expect(data.author.url).to.be("");
              expect(data.closed).to.be.a('number');
              expect(data.closed).to.be("0");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                    expect(data.modifiedBy.companyName).to.be.a('string');
                expect(data.modifiedBy.companyName).to.be("");
                expect(data.modifiedBy.created).to.be.a('number');
                expect(data.modifiedBy.created).to.be("0");
                expect(data.modifiedBy.email).to.be.a('string');
                expect(data.modifiedBy.email).to.be("");
                expect(data.modifiedBy.id).to.be.a('number');
                expect(data.modifiedBy.id).to.be("0");
                expect(data.modifiedBy.isForbidden).to.be.a('boolean');
                expect(data.modifiedBy.isForbidden).to.be(false);
                expect(data.modifiedBy.isVerified).to.be.a('boolean');
                expect(data.modifiedBy.isVerified).to.be(false);
                expect(data.modifiedBy.name).to.be.a('string');
                expect(data.modifiedBy.name).to.be("");
                expect(data.modifiedBy.onboardQAnswered).to.be.a('boolean');
                expect(data.modifiedBy.onboardQAnswered).to.be(false);
                expect(data.modifiedBy.phoneNumber).to.be.a('string');
                expect(data.modifiedBy.phoneNumber).to.be("");
                expect(data.modifiedBy.url).to.be.a('string');
                expect(data.modifiedBy.url).to.be("");
              expect(data.relatedIP).to.be.a(SendPostApi.ModelsIP);
                    expect(data.relatedIP.aolSettings).to.be.a('string');
                expect(data.relatedIP.aolSettings).to.be("");
                expect(data.relatedIP.attSettings).to.be.a('string');
                expect(data.relatedIP.attSettings).to.be("");
                expect(data.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                      expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.created).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.created).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.id).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.id).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.name).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.name).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.updated).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                  expect(data.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                  expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                  expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                  expect(data.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
                expect(data.relatedIP.comcastSettings).to.be.a('string');
                expect(data.relatedIP.comcastSettings).to.be("");
                expect(data.relatedIP.created).to.be.a('number');
                expect(data.relatedIP.created).to.be("0");
                expect(data.relatedIP.defaultSettings).to.be.a('string');
                expect(data.relatedIP.defaultSettings).to.be("");
                expect(data.relatedIP.gmailSettings).to.be.a('string');
                expect(data.relatedIP.gmailSettings).to.be("");
                expect(data.relatedIP.gmxSettings).to.be.a('string');
                expect(data.relatedIP.gmxSettings).to.be("");
                expect(data.relatedIP.icloudSettings).to.be.a('string');
                expect(data.relatedIP.icloudSettings).to.be("");
                expect(data.relatedIP.id).to.be.a('number');
                expect(data.relatedIP.id).to.be("0");
                expect(data.relatedIP.infraClassification).to.be.a('string');
                expect(data.relatedIP.infraClassification).to.be("");
                expect(data.relatedIP.infraMonitor).to.be.a('boolean');
                expect(data.relatedIP.infraMonitor).to.be(false);
                {
                  let dataCtr = data.relatedIP.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.relatedIP.mailruSettings).to.be.a('string');
                expect(data.relatedIP.mailruSettings).to.be("");
                expect(data.relatedIP.microsoftSettings).to.be.a('string');
                expect(data.relatedIP.microsoftSettings).to.be("");
                expect(data.relatedIP.publicIP).to.be.a('string');
                expect(data.relatedIP.publicIP).to.be("");
                expect(data.relatedIP.qqSettings).to.be.a('string');
                expect(data.relatedIP.qqSettings).to.be("");
                expect(data.relatedIP.reverseDNSHostname).to.be.a('string');
                expect(data.relatedIP.reverseDNSHostname).to.be("");
                expect(data.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                    expect(data.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                      expect(data.relatedIP.systemDomain.created).to.be.a('number');
                  expect(data.relatedIP.systemDomain.created).to.be("0");
                  expect(data.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.dkim.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.host).to.be("");
                    expect(data.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.dkim.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.dkim.type).to.be("");
                  expect(data.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                  expect(data.relatedIP.systemDomain.dkimConfig).to.be("");
                  expect(data.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.dkimVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.id).to.be.a('number');
                  expect(data.relatedIP.systemDomain.id).to.be("0");
                  expect(data.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.mailboxVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.name).to.be.a('string');
                  expect(data.relatedIP.systemDomain.name).to.be("");
                  expect(data.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.spf.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.host).to.be("");
                    expect(data.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.spf.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.spf.type).to.be("");
                  expect(data.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.spfVerified).to.be(false);
                  expect(data.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.relatedIP.systemDomain.track.host).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.host).to.be("");
                    expect(data.relatedIP.systemDomain.track.textValue).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.textValue).to.be("");
                    expect(data.relatedIP.systemDomain.track.type).to.be.a('string');
                    expect(data.relatedIP.systemDomain.track.type).to.be("");
                  expect(data.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                  expect(data.relatedIP.systemDomain.trackVerified).to.be(false);
                expect(data.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                    expect(data.relatedIP.yahooSettings).to.be.a('string');
                expect(data.relatedIP.yahooSettings).to.be("");
                expect(data.relatedIP.yandexSettings).to.be.a('string');
                expect(data.relatedIP.yandexSettings).to.be("");
                expect(data.relatedIP.zohoSettings).to.be.a('string');
                expect(data.relatedIP.zohoSettings).to.be("");
              expect(data.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                    expect(data.relatedSubAccount.apiKey).to.be.a('string');
                expect(data.relatedSubAccount.apiKey).to.be("");
                expect(data.relatedSubAccount.created).to.be.a('number');
                expect(data.relatedSubAccount.created).to.be("0");
                expect(data.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.relatedSubAccount.createdBy.companyName).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.companyName).to.be("");
                  expect(data.relatedSubAccount.createdBy.created).to.be.a('number');
                  expect(data.relatedSubAccount.createdBy.created).to.be("0");
                  expect(data.relatedSubAccount.createdBy.email).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.email).to.be("");
                  expect(data.relatedSubAccount.createdBy.id).to.be.a('number');
                  expect(data.relatedSubAccount.createdBy.id).to.be("0");
                  expect(data.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.isForbidden).to.be(false);
                  expect(data.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.isVerified).to.be(false);
                  expect(data.relatedSubAccount.createdBy.name).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.name).to.be("");
                  expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                  expect(data.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.phoneNumber).to.be("");
                  expect(data.relatedSubAccount.createdBy.url).to.be.a('string');
                  expect(data.relatedSubAccount.createdBy.url).to.be("");
                expect(data.relatedSubAccount.id).to.be.a('number');
                expect(data.relatedSubAccount.id).to.be("0");
                expect(data.relatedSubAccount.isPlus).to.be.a('boolean');
                expect(data.relatedSubAccount.isPlus).to.be(false);
                {
                  let dataCtr = data.relatedSubAccount.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.relatedSubAccount.name).to.be.a('string');
                expect(data.relatedSubAccount.name).to.be("");
                {
                  let dataCtr = data.relatedSubAccount.smtpAuths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.password).to.be.a('string');
                    expect(data.password).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.username).to.be.a('string');
                    expect(data.username).to.be("");
    
                          }
                }
                expect(data.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                    expect(data.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.companyName).to.be("");
                  expect(data.relatedSubAccount.updatedBy.created).to.be.a('number');
                  expect(data.relatedSubAccount.updatedBy.created).to.be("0");
                  expect(data.relatedSubAccount.updatedBy.email).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.email).to.be("");
                  expect(data.relatedSubAccount.updatedBy.id).to.be.a('number');
                  expect(data.relatedSubAccount.updatedBy.id).to.be("0");
                  expect(data.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.isVerified).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.name).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.name).to.be("");
                  expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                  expect(data.relatedSubAccount.updatedBy.url).to.be.a('string');
                  expect(data.relatedSubAccount.updatedBy.url).to.be("");
              expect(data.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                  expect(data.summary).to.be.a('string');
              expect(data.summary).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsTag);
                  expect(data.color).to.be.a('string');
                  expect(data.color).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.createdBy.companyName).to.be.a('string');
                    expect(data.createdBy.companyName).to.be("");
                    expect(data.createdBy.created).to.be.a('number');
                    expect(data.createdBy.created).to.be("0");
                    expect(data.createdBy.email).to.be.a('string');
                    expect(data.createdBy.email).to.be("");
                    expect(data.createdBy.id).to.be.a('number');
                    expect(data.createdBy.id).to.be("0");
                    expect(data.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.createdBy.isForbidden).to.be(false);
                    expect(data.createdBy.isVerified).to.be.a('boolean');
                    expect(data.createdBy.isVerified).to.be(false);
                    expect(data.createdBy.name).to.be.a('string');
                    expect(data.createdBy.name).to.be("");
                    expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.createdBy.onboardQAnswered).to.be(false);
                    expect(data.createdBy.phoneNumber).to.be.a('string');
                    expect(data.createdBy.phoneNumber).to.be("");
                    expect(data.createdBy.url).to.be.a('string');
                    expect(data.createdBy.url).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.updated).to.be.a('number');
                  expect(data.updated).to.be("0");
                  expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.updatedBy.companyName).to.be.a('string');
                    expect(data.updatedBy.companyName).to.be("");
                    expect(data.updatedBy.created).to.be.a('number');
                    expect(data.updatedBy.created).to.be("0");
                    expect(data.updatedBy.email).to.be.a('string');
                    expect(data.updatedBy.email).to.be("");
                    expect(data.updatedBy.id).to.be.a('number');
                    expect(data.updatedBy.id).to.be("0");
                    expect(data.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.updatedBy.isForbidden).to.be(false);
                    expect(data.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.updatedBy.isVerified).to.be(false);
                    expect(data.updatedBy.name).to.be.a('string');
                    expect(data.updatedBy.name).to.be("");
                    expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.updatedBy.phoneNumber).to.be("");
                    expect(data.updatedBy.url).to.be.a('string');
                    expect(data.updatedBy.url).to.be("");
  
                        }
              }
              expect(data.updated).to.be.a('number');
              expect(data.updated).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGetIPAccountIPPools', function() {
        it('should call iPRouterGetIPAccountIPPools successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGetIPAccountIPPools call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;

          instance.iPRouterGetIPAccountIPPools(xAccountApiKey, ipid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsAccountIPPool);
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              {
                let dataCtr = data.ips;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsIP);
                  expect(data.aolSettings).to.be.a('string');
                  expect(data.aolSettings).to.be("");
                  expect(data.attSettings).to.be.a('string');
                  expect(data.attSettings).to.be("");
                  expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                        expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.created).to.be.a('number');
                    expect(data.autoWarmupPlan.created).to.be("0");
                    expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.id).to.be.a('number');
                    expect(data.autoWarmupPlan.id).to.be("0");
                    expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.name).to.be.a('string');
                    expect(data.autoWarmupPlan.name).to.be("");
                    expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.updated).to.be.a('number');
                    expect(data.autoWarmupPlan.updated).to.be("0");
                    expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
                    expect(data.autoWarmupPlan.warmupInterval).to.be("0");
                    expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
                    expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                    expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
                  expect(data.comcastSettings).to.be.a('string');
                  expect(data.comcastSettings).to.be("");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.defaultSettings).to.be.a('string');
                  expect(data.defaultSettings).to.be("");
                  expect(data.gmailSettings).to.be.a('string');
                  expect(data.gmailSettings).to.be("");
                  expect(data.gmxSettings).to.be.a('string');
                  expect(data.gmxSettings).to.be("");
                  expect(data.icloudSettings).to.be.a('string');
                  expect(data.icloudSettings).to.be("");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.infraClassification).to.be.a('string');
                  expect(data.infraClassification).to.be("");
                  expect(data.infraMonitor).to.be.a('boolean');
                  expect(data.infraMonitor).to.be(false);
                  {
                    let dataCtr = data.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsLabel);
                      expect(data.color).to.be.a('string');
                      expect(data.color).to.be("");
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('number');
                      expect(data.type).to.be("0");
      
                            }
                  }
                  expect(data.mailruSettings).to.be.a('string');
                  expect(data.mailruSettings).to.be("");
                  expect(data.microsoftSettings).to.be.a('string');
                  expect(data.microsoftSettings).to.be("");
                  expect(data.publicIP).to.be.a('string');
                  expect(data.publicIP).to.be("");
                  expect(data.qqSettings).to.be.a('string');
                  expect(data.qqSettings).to.be("");
                  expect(data.reverseDNSHostname).to.be.a('string');
                  expect(data.reverseDNSHostname).to.be("");
                  expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                      expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                        expect(data.systemDomain.created).to.be.a('number');
                    expect(data.systemDomain.created).to.be("0");
                    expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.systemDomain.dkim.host).to.be.a('string');
                      expect(data.systemDomain.dkim.host).to.be("");
                      expect(data.systemDomain.dkim.textValue).to.be.a('string');
                      expect(data.systemDomain.dkim.textValue).to.be("");
                      expect(data.systemDomain.dkim.type).to.be.a('string');
                      expect(data.systemDomain.dkim.type).to.be("");
                    expect(data.systemDomain.dkimConfig).to.be.a('string');
                    expect(data.systemDomain.dkimConfig).to.be("");
                    expect(data.systemDomain.dkimVerified).to.be.a('boolean');
                    expect(data.systemDomain.dkimVerified).to.be(false);
                    expect(data.systemDomain.id).to.be.a('number');
                    expect(data.systemDomain.id).to.be("0");
                    expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
                    expect(data.systemDomain.mailboxVerified).to.be(false);
                    expect(data.systemDomain.name).to.be.a('string');
                    expect(data.systemDomain.name).to.be("");
                    expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.systemDomain.spf.host).to.be.a('string');
                      expect(data.systemDomain.spf.host).to.be("");
                      expect(data.systemDomain.spf.textValue).to.be.a('string');
                      expect(data.systemDomain.spf.textValue).to.be("");
                      expect(data.systemDomain.spf.type).to.be.a('string');
                      expect(data.systemDomain.spf.type).to.be("");
                    expect(data.systemDomain.spfVerified).to.be.a('boolean');
                    expect(data.systemDomain.spfVerified).to.be(false);
                    expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.systemDomain.track.host).to.be.a('string');
                      expect(data.systemDomain.track.host).to.be("");
                      expect(data.systemDomain.track.textValue).to.be.a('string');
                      expect(data.systemDomain.track.textValue).to.be("");
                      expect(data.systemDomain.track.type).to.be.a('string');
                      expect(data.systemDomain.track.type).to.be("");
                    expect(data.systemDomain.trackVerified).to.be.a('boolean');
                    expect(data.systemDomain.trackVerified).to.be(false);
                  expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                      expect(data.yahooSettings).to.be.a('string');
                  expect(data.yahooSettings).to.be("");
                  expect(data.yandexSettings).to.be.a('string');
                  expect(data.yandexSettings).to.be("");
                  expect(data.zohoSettings).to.be.a('string');
                  expect(data.zohoSettings).to.be("");
  
                        }
              }
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.routingMetaData).to.be.a('string');
              expect(data.routingMetaData).to.be("");
              expect(data.routingStrategy).to.be.a('number');
              expect(data.routingStrategy).to.be("0");
              {
                let dataCtr = data.thirdPartySendingProviders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsThirdPartySendingProvider);
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.createdBy.companyName).to.be.a('string');
                    expect(data.createdBy.companyName).to.be("");
                    expect(data.createdBy.created).to.be.a('number');
                    expect(data.createdBy.created).to.be("0");
                    expect(data.createdBy.email).to.be.a('string');
                    expect(data.createdBy.email).to.be("");
                    expect(data.createdBy.id).to.be.a('number');
                    expect(data.createdBy.id).to.be("0");
                    expect(data.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.createdBy.isForbidden).to.be(false);
                    expect(data.createdBy.isVerified).to.be.a('boolean');
                    expect(data.createdBy.isVerified).to.be(false);
                    expect(data.createdBy.name).to.be.a('string');
                    expect(data.createdBy.name).to.be("");
                    expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.createdBy.onboardQAnswered).to.be(false);
                    expect(data.createdBy.phoneNumber).to.be.a('string');
                    expect(data.createdBy.phoneNumber).to.be("");
                    expect(data.createdBy.url).to.be.a('string');
                    expect(data.createdBy.url).to.be("");
                  expect(data.domain).to.be.a('string');
                  expect(data.domain).to.be("");
                  expect(data.endpoint).to.be.a('string');
                  expect(data.endpoint).to.be("");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.key).to.be.a('string');
                  expect(data.key).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.oauthToken).to.be.a('string');
                  expect(data.oauthToken).to.be("");
                  expect(data.port).to.be.a('number');
                  expect(data.port).to.be("0");
                  expect(data.ratePerHour).to.be.a('number');
                  expect(data.ratePerHour).to.be("0");
                  expect(data.retryTime).to.be.a('number');
                  expect(data.retryTime).to.be("0");
                  expect(data.secret).to.be.a('string');
                  expect(data.secret).to.be("");
                  expect(data.type).to.be.a(SendPostApi.ModelsThirdPartySendingProviderType);
                      expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.updatedBy.companyName).to.be.a('string');
                    expect(data.updatedBy.companyName).to.be("");
                    expect(data.updatedBy.created).to.be.a('number');
                    expect(data.updatedBy.created).to.be("0");
                    expect(data.updatedBy.email).to.be.a('string');
                    expect(data.updatedBy.email).to.be("");
                    expect(data.updatedBy.id).to.be.a('number');
                    expect(data.updatedBy.id).to.be("0");
                    expect(data.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.updatedBy.isForbidden).to.be(false);
                    expect(data.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.updatedBy.isVerified).to.be(false);
                    expect(data.updatedBy.name).to.be.a('string');
                    expect(data.updatedBy.name).to.be("");
                    expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.updatedBy.phoneNumber).to.be("");
                    expect(data.updatedBy.url).to.be.a('string');
                    expect(data.updatedBy.url).to.be("");
  
                        }
              }
              {
                let dataCtr = data.toAccountIPPools;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.type).to.be.a(SendPostApi.ModelsIPPoolType);
                  expect(data.threshold).to.be.a('string');
              expect(data.threshold).to.be("");
              expect(data.shouldOverflow).to.be.a('boolean');
              expect(data.shouldOverflow).to.be(false);
              expect(data.overflowPoolName).to.be.a('string');
              expect(data.overflowPoolName).to.be("");
              expect(data.warmupInterval).to.be.a('number');
              expect(data.warmupInterval).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGetIPTimeline', function() {
        it('should call iPRouterGetIPTimeline successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGetIPTimeline call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;
          var opts = {};
          opts.from = "from_example";
          opts.to = "to_example";
          opts.provider = "provider_example";
          opts.offset = 789;
          opts.limit = 789;

          instance.iPRouterGetIPTimeline(xAccountApiKey, ipid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsSystemEvent);
              expect(data.accountTemplate).to.be.a(SendPostApi.ModelsAccountTemplate);
                    expect(data.accountTemplate.created).to.be.a('number');
                expect(data.accountTemplate.created).to.be("0");
                expect(data.accountTemplate.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.accountTemplate.createdBy.companyName).to.be.a('string');
                  expect(data.accountTemplate.createdBy.companyName).to.be("");
                  expect(data.accountTemplate.createdBy.created).to.be.a('number');
                  expect(data.accountTemplate.createdBy.created).to.be("0");
                  expect(data.accountTemplate.createdBy.email).to.be.a('string');
                  expect(data.accountTemplate.createdBy.email).to.be("");
                  expect(data.accountTemplate.createdBy.id).to.be.a('number');
                  expect(data.accountTemplate.createdBy.id).to.be("0");
                  expect(data.accountTemplate.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.accountTemplate.createdBy.isForbidden).to.be(false);
                  expect(data.accountTemplate.createdBy.isVerified).to.be.a('boolean');
                  expect(data.accountTemplate.createdBy.isVerified).to.be(false);
                  expect(data.accountTemplate.createdBy.name).to.be.a('string');
                  expect(data.accountTemplate.createdBy.name).to.be("");
                  expect(data.accountTemplate.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.accountTemplate.createdBy.onboardQAnswered).to.be(false);
                  expect(data.accountTemplate.createdBy.phoneNumber).to.be.a('string');
                  expect(data.accountTemplate.createdBy.phoneNumber).to.be("");
                  expect(data.accountTemplate.createdBy.url).to.be.a('string');
                  expect(data.accountTemplate.createdBy.url).to.be("");
                expect(data.accountTemplate.html).to.be.a('string');
                expect(data.accountTemplate.html).to.be("");
                expect(data.accountTemplate.id).to.be.a('number');
                expect(data.accountTemplate.id).to.be("0");
                expect(data.accountTemplate.name).to.be.a('string');
                expect(data.accountTemplate.name).to.be("");
                expect(data.accountTemplate.template).to.be.a('string');
                expect(data.accountTemplate.template).to.be("");
                expect(data.accountTemplate.text).to.be.a('string');
                expect(data.accountTemplate.text).to.be("");
                expect(data.accountTemplate.updated).to.be.a('number');
                expect(data.accountTemplate.updated).to.be("0");
                expect(data.accountTemplate.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.accountTemplate.updatedBy.companyName).to.be.a('string');
                  expect(data.accountTemplate.updatedBy.companyName).to.be("");
                  expect(data.accountTemplate.updatedBy.created).to.be.a('number');
                  expect(data.accountTemplate.updatedBy.created).to.be("0");
                  expect(data.accountTemplate.updatedBy.email).to.be.a('string');
                  expect(data.accountTemplate.updatedBy.email).to.be("");
                  expect(data.accountTemplate.updatedBy.id).to.be.a('number');
                  expect(data.accountTemplate.updatedBy.id).to.be("0");
                  expect(data.accountTemplate.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.accountTemplate.updatedBy.isForbidden).to.be(false);
                  expect(data.accountTemplate.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.accountTemplate.updatedBy.isVerified).to.be(false);
                  expect(data.accountTemplate.updatedBy.name).to.be.a('string');
                  expect(data.accountTemplate.updatedBy.name).to.be("");
                  expect(data.accountTemplate.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.accountTemplate.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.accountTemplate.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.accountTemplate.updatedBy.phoneNumber).to.be("");
                  expect(data.accountTemplate.updatedBy.url).to.be.a('string');
                  expect(data.accountTemplate.updatedBy.url).to.be("");
              expect(data.accountWebhook).to.be.a(SendPostApi.ModelsAccountWebhook);
                    expect(data.accountWebhook.clicked).to.be.a('boolean');
                expect(data.accountWebhook.clicked).to.be(false);
                expect(data.accountWebhook.created).to.be.a('number');
                expect(data.accountWebhook.created).to.be("0");
                expect(data.accountWebhook.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.accountWebhook.createdBy.companyName).to.be.a('string');
                  expect(data.accountWebhook.createdBy.companyName).to.be("");
                  expect(data.accountWebhook.createdBy.created).to.be.a('number');
                  expect(data.accountWebhook.createdBy.created).to.be("0");
                  expect(data.accountWebhook.createdBy.email).to.be.a('string');
                  expect(data.accountWebhook.createdBy.email).to.be("");
                  expect(data.accountWebhook.createdBy.id).to.be.a('number');
                  expect(data.accountWebhook.createdBy.id).to.be("0");
                  expect(data.accountWebhook.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.accountWebhook.createdBy.isForbidden).to.be(false);
                  expect(data.accountWebhook.createdBy.isVerified).to.be.a('boolean');
                  expect(data.accountWebhook.createdBy.isVerified).to.be(false);
                  expect(data.accountWebhook.createdBy.name).to.be.a('string');
                  expect(data.accountWebhook.createdBy.name).to.be("");
                  expect(data.accountWebhook.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.accountWebhook.createdBy.onboardQAnswered).to.be(false);
                  expect(data.accountWebhook.createdBy.phoneNumber).to.be.a('string');
                  expect(data.accountWebhook.createdBy.phoneNumber).to.be("");
                  expect(data.accountWebhook.createdBy.url).to.be.a('string');
                  expect(data.accountWebhook.createdBy.url).to.be("");
                expect(data.accountWebhook.delivered).to.be.a('boolean');
                expect(data.accountWebhook.delivered).to.be(false);
                expect(data.accountWebhook.dropped).to.be.a('boolean');
                expect(data.accountWebhook.dropped).to.be(false);
                expect(data.accountWebhook.enabled).to.be.a('boolean');
                expect(data.accountWebhook.enabled).to.be(false);
                expect(data.accountWebhook.hardBounced).to.be.a('boolean');
                expect(data.accountWebhook.hardBounced).to.be(false);
                expect(data.accountWebhook.id).to.be.a('number');
                expect(data.accountWebhook.id).to.be("0");
                expect(data.accountWebhook.opened).to.be.a('boolean');
                expect(data.accountWebhook.opened).to.be(false);
                expect(data.accountWebhook.processed).to.be.a('boolean');
                expect(data.accountWebhook.processed).to.be(false);
                expect(data.accountWebhook.sent).to.be.a('boolean');
                expect(data.accountWebhook.sent).to.be(false);
                expect(data.accountWebhook.softBounced).to.be.a('boolean');
                expect(data.accountWebhook.softBounced).to.be(false);
                expect(data.accountWebhook.spam).to.be.a('boolean');
                expect(data.accountWebhook.spam).to.be(false);
                expect(data.accountWebhook.uniqueClick).to.be.a('boolean');
                expect(data.accountWebhook.uniqueClick).to.be(false);
                expect(data.accountWebhook.uniqueOpen).to.be.a('boolean');
                expect(data.accountWebhook.uniqueOpen).to.be(false);
                expect(data.accountWebhook.unsubscribed).to.be.a('boolean');
                expect(data.accountWebhook.unsubscribed).to.be(false);
                expect(data.accountWebhook.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.accountWebhook.updatedBy.companyName).to.be.a('string');
                  expect(data.accountWebhook.updatedBy.companyName).to.be("");
                  expect(data.accountWebhook.updatedBy.created).to.be.a('number');
                  expect(data.accountWebhook.updatedBy.created).to.be("0");
                  expect(data.accountWebhook.updatedBy.email).to.be.a('string');
                  expect(data.accountWebhook.updatedBy.email).to.be("");
                  expect(data.accountWebhook.updatedBy.id).to.be.a('number');
                  expect(data.accountWebhook.updatedBy.id).to.be("0");
                  expect(data.accountWebhook.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.accountWebhook.updatedBy.isForbidden).to.be(false);
                  expect(data.accountWebhook.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.accountWebhook.updatedBy.isVerified).to.be(false);
                  expect(data.accountWebhook.updatedBy.name).to.be.a('string');
                  expect(data.accountWebhook.updatedBy.name).to.be("");
                  expect(data.accountWebhook.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.accountWebhook.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.accountWebhook.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.accountWebhook.updatedBy.phoneNumber).to.be("");
                  expect(data.accountWebhook.updatedBy.url).to.be.a('string');
                  expect(data.accountWebhook.updatedBy.url).to.be("");
                expect(data.accountWebhook.url).to.be.a('string');
                expect(data.accountWebhook.url).to.be("");
              expect(data.account).to.be.a(SendPostApi.ModelsAccount);
                    expect(data.account.alertSlackEndpoint).to.be.a('string');
                expect(data.account.alertSlackEndpoint).to.be("");
                expect(data.account.apiKey).to.be.a('string');
                expect(data.account.apiKey).to.be("");
                expect(data.account.brandColor).to.be.a('string');
                expect(data.account.brandColor).to.be("");
                expect(data.account.companyName).to.be.a('string');
                expect(data.account.companyName).to.be("");
                expect(data.account.created).to.be.a('number');
                expect(data.account.created).to.be("0");
                expect(data.account.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.account.createdBy.companyName).to.be.a('string');
                  expect(data.account.createdBy.companyName).to.be("");
                  expect(data.account.createdBy.created).to.be.a('number');
                  expect(data.account.createdBy.created).to.be("0");
                  expect(data.account.createdBy.email).to.be.a('string');
                  expect(data.account.createdBy.email).to.be("");
                  expect(data.account.createdBy.id).to.be.a('number');
                  expect(data.account.createdBy.id).to.be("0");
                  expect(data.account.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.account.createdBy.isForbidden).to.be(false);
                  expect(data.account.createdBy.isVerified).to.be.a('boolean');
                  expect(data.account.createdBy.isVerified).to.be(false);
                  expect(data.account.createdBy.name).to.be.a('string');
                  expect(data.account.createdBy.name).to.be("");
                  expect(data.account.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.account.createdBy.onboardQAnswered).to.be(false);
                  expect(data.account.createdBy.phoneNumber).to.be.a('string');
                  expect(data.account.createdBy.phoneNumber).to.be("");
                  expect(data.account.createdBy.url).to.be.a('string');
                  expect(data.account.createdBy.url).to.be("");
                expect(data.account.currentEmailServiceProvider).to.be.a('string');
                expect(data.account.currentEmailServiceProvider).to.be("");
                expect(data.account.hubspotCompanyId).to.be.a('string');
                expect(data.account.hubspotCompanyId).to.be("");
                expect(data.account.id).to.be.a('number');
                expect(data.account.id).to.be("0");
                expect(data.account.incidentSlackEndpoint).to.be.a('string');
                expect(data.account.incidentSlackEndpoint).to.be("");
                expect(data.account.industry).to.be.a('string');
                expect(data.account.industry).to.be("");
                expect(data.account.isAdmin).to.be.a('boolean');
                expect(data.account.isAdmin).to.be(false);
                expect(data.account.isCanceled).to.be.a('boolean');
                expect(data.account.isCanceled).to.be(false);
                expect(data.account.isLastPaymentFailed).to.be.a('boolean');
                expect(data.account.isLastPaymentFailed).to.be(false);
                expect(data.account.isUpgraded).to.be.a('boolean');
                expect(data.account.isUpgraded).to.be(false);
                expect(data.account.linearIssueUuid).to.be.a('string');
                expect(data.account.linearIssueUuid).to.be("");
                expect(data.account.lockThreshold).to.be.a('number');
                expect(data.account.lockThreshold).to.be("0");
                expect(data.account.locked).to.be.a('boolean');
                expect(data.account.locked).to.be(false);
                expect(data.account.logoURL).to.be.a('string');
                expect(data.account.logoURL).to.be("");
                expect(data.account.name).to.be.a('string');
                expect(data.account.name).to.be("");
                expect(data.account.onboardCFinished).to.be.a('boolean');
                expect(data.account.onboardCFinished).to.be(false);
                expect(data.account.onboardQAnswered).to.be.a('boolean');
                expect(data.account.onboardQAnswered).to.be(false);
                expect(data.account.sendingVolumePerMonth).to.be.a('string');
                expect(data.account.sendingVolumePerMonth).to.be("");
                expect(data.account.slackToken).to.be.a('string');
                expect(data.account.slackToken).to.be("");
                expect(data.account.stripeBasePriceId).to.be.a('string');
                expect(data.account.stripeBasePriceId).to.be("");
                expect(data.account.stripeSubscriptionItemId).to.be.a('string');
                expect(data.account.stripeSubscriptionItemId).to.be("");
                expect(data.account.stripeUsagePriceId).to.be.a('string');
                expect(data.account.stripeUsagePriceId).to.be("");
                expect(data.account.switchingSendpostDescription).to.be.a('string');
                expect(data.account.switchingSendpostDescription).to.be("");
                expect(data.account.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.account.updatedBy.companyName).to.be.a('string');
                  expect(data.account.updatedBy.companyName).to.be("");
                  expect(data.account.updatedBy.created).to.be.a('number');
                  expect(data.account.updatedBy.created).to.be("0");
                  expect(data.account.updatedBy.email).to.be.a('string');
                  expect(data.account.updatedBy.email).to.be("");
                  expect(data.account.updatedBy.id).to.be.a('number');
                  expect(data.account.updatedBy.id).to.be("0");
                  expect(data.account.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.account.updatedBy.isForbidden).to.be(false);
                  expect(data.account.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.account.updatedBy.isVerified).to.be(false);
                  expect(data.account.updatedBy.name).to.be.a('string');
                  expect(data.account.updatedBy.name).to.be("");
                  expect(data.account.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.account.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.account.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.account.updatedBy.phoneNumber).to.be("");
                  expect(data.account.updatedBy.url).to.be.a('string');
                  expect(data.account.updatedBy.url).to.be("");
              expect(data.domain).to.be.a(SendPostApi.ModelsDomain);
                    expect(data.domain.created).to.be.a('number');
                expect(data.domain.created).to.be("0");
                expect(data.domain.dkim).to.be.a(SendPostApi.ModelsDNSRecord);
                      expect(data.domain.dkim.host).to.be.a('string');
                  expect(data.domain.dkim.host).to.be("");
                  expect(data.domain.dkim.textValue).to.be.a('string');
                  expect(data.domain.dkim.textValue).to.be("");
                  expect(data.domain.dkim.type).to.be.a('string');
                  expect(data.domain.dkim.type).to.be("");
                expect(data.domain.dkimConfig).to.be.a('string');
                expect(data.domain.dkimConfig).to.be("");
                expect(data.domain.dkimVerified).to.be.a('boolean');
                expect(data.domain.dkimVerified).to.be(false);
                expect(data.domain.dmarc).to.be.a(SendPostApi.ModelsDNSRecord);
                      expect(data.domain.dmarc.host).to.be.a('string');
                  expect(data.domain.dmarc.host).to.be("");
                  expect(data.domain.dmarc.textValue).to.be.a('string');
                  expect(data.domain.dmarc.textValue).to.be("");
                  expect(data.domain.dmarc.type).to.be.a('string');
                  expect(data.domain.dmarc.type).to.be("");
                expect(data.domain.dmarcVerified).to.be.a('boolean');
                expect(data.domain.dmarcVerified).to.be(false);
                expect(data.domain.id).to.be.a('number');
                expect(data.domain.id).to.be("0");
                expect(data.domain.name).to.be.a('string');
                expect(data.domain.name).to.be("");
                expect(data.domain.returnPath).to.be.a(SendPostApi.ModelsDNSRecord);
                      expect(data.domain.returnPath.host).to.be.a('string');
                  expect(data.domain.returnPath.host).to.be("");
                  expect(data.domain.returnPath.textValue).to.be.a('string');
                  expect(data.domain.returnPath.textValue).to.be("");
                  expect(data.domain.returnPath.type).to.be.a('string');
                  expect(data.domain.returnPath.type).to.be("");
                expect(data.domain.returnPathVerified).to.be.a('boolean');
                expect(data.domain.returnPathVerified).to.be(false);
                expect(data.domain.track).to.be.a(SendPostApi.ModelsDNSRecord);
                      expect(data.domain.track.host).to.be.a('string');
                  expect(data.domain.track.host).to.be("");
                  expect(data.domain.track.textValue).to.be.a('string');
                  expect(data.domain.track.textValue).to.be("");
                  expect(data.domain.track.type).to.be.a('string');
                  expect(data.domain.track.type).to.be("");
                expect(data.domain.trackVerified).to.be.a('boolean');
                expect(data.domain.trackVerified).to.be(false);
                expect(data.domain.verified).to.be.a('boolean');
                expect(data.domain.verified).to.be(false);
              expect(data.entity).to.be.a(SendPostApi.ModelsEntity);
                  expect(data.eventId).to.be.a('string');
              expect(data.eventId).to.be("");
              expect(data.eventType).to.be.a(SendPostApi.ModelsSystemEventType);
                  expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.incident).to.be.a(SendPostApi.ModelsIncident);
                    expect(data.incident.assignedTo).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.assignedTo.companyName).to.be.a('string');
                  expect(data.incident.assignedTo.companyName).to.be("");
                  expect(data.incident.assignedTo.created).to.be.a('number');
                  expect(data.incident.assignedTo.created).to.be("0");
                  expect(data.incident.assignedTo.email).to.be.a('string');
                  expect(data.incident.assignedTo.email).to.be("");
                  expect(data.incident.assignedTo.id).to.be.a('number');
                  expect(data.incident.assignedTo.id).to.be("0");
                  expect(data.incident.assignedTo.isForbidden).to.be.a('boolean');
                  expect(data.incident.assignedTo.isForbidden).to.be(false);
                  expect(data.incident.assignedTo.isVerified).to.be.a('boolean');
                  expect(data.incident.assignedTo.isVerified).to.be(false);
                  expect(data.incident.assignedTo.name).to.be.a('string');
                  expect(data.incident.assignedTo.name).to.be("");
                  expect(data.incident.assignedTo.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.assignedTo.onboardQAnswered).to.be(false);
                  expect(data.incident.assignedTo.phoneNumber).to.be.a('string');
                  expect(data.incident.assignedTo.phoneNumber).to.be("");
                  expect(data.incident.assignedTo.url).to.be.a('string');
                  expect(data.incident.assignedTo.url).to.be("");
                expect(data.incident.author).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.author.companyName).to.be.a('string');
                  expect(data.incident.author.companyName).to.be("");
                  expect(data.incident.author.created).to.be.a('number');
                  expect(data.incident.author.created).to.be("0");
                  expect(data.incident.author.email).to.be.a('string');
                  expect(data.incident.author.email).to.be("");
                  expect(data.incident.author.id).to.be.a('number');
                  expect(data.incident.author.id).to.be("0");
                  expect(data.incident.author.isForbidden).to.be.a('boolean');
                  expect(data.incident.author.isForbidden).to.be(false);
                  expect(data.incident.author.isVerified).to.be.a('boolean');
                  expect(data.incident.author.isVerified).to.be(false);
                  expect(data.incident.author.name).to.be.a('string');
                  expect(data.incident.author.name).to.be("");
                  expect(data.incident.author.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.author.onboardQAnswered).to.be(false);
                  expect(data.incident.author.phoneNumber).to.be.a('string');
                  expect(data.incident.author.phoneNumber).to.be("");
                  expect(data.incident.author.url).to.be.a('string');
                  expect(data.incident.author.url).to.be("");
                expect(data.incident.closed).to.be.a('number');
                expect(data.incident.closed).to.be("0");
                expect(data.incident.created).to.be.a('number');
                expect(data.incident.created).to.be("0");
                expect(data.incident.description).to.be.a('string');
                expect(data.incident.description).to.be("");
                expect(data.incident.id).to.be.a('number');
                expect(data.incident.id).to.be("0");
                expect(data.incident.modifiedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.incident.modifiedBy.companyName).to.be.a('string');
                  expect(data.incident.modifiedBy.companyName).to.be("");
                  expect(data.incident.modifiedBy.created).to.be.a('number');
                  expect(data.incident.modifiedBy.created).to.be("0");
                  expect(data.incident.modifiedBy.email).to.be.a('string');
                  expect(data.incident.modifiedBy.email).to.be("");
                  expect(data.incident.modifiedBy.id).to.be.a('number');
                  expect(data.incident.modifiedBy.id).to.be("0");
                  expect(data.incident.modifiedBy.isForbidden).to.be.a('boolean');
                  expect(data.incident.modifiedBy.isForbidden).to.be(false);
                  expect(data.incident.modifiedBy.isVerified).to.be.a('boolean');
                  expect(data.incident.modifiedBy.isVerified).to.be(false);
                  expect(data.incident.modifiedBy.name).to.be.a('string');
                  expect(data.incident.modifiedBy.name).to.be("");
                  expect(data.incident.modifiedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.incident.modifiedBy.onboardQAnswered).to.be(false);
                  expect(data.incident.modifiedBy.phoneNumber).to.be.a('string');
                  expect(data.incident.modifiedBy.phoneNumber).to.be("");
                  expect(data.incident.modifiedBy.url).to.be.a('string');
                  expect(data.incident.modifiedBy.url).to.be("");
                expect(data.incident.relatedIP).to.be.a(SendPostApi.ModelsIP);
                      expect(data.incident.relatedIP.aolSettings).to.be.a('string');
                  expect(data.incident.relatedIP.aolSettings).to.be("");
                  expect(data.incident.relatedIP.attSettings).to.be.a('string');
                  expect(data.incident.relatedIP.attSettings).to.be("");
                  expect(data.incident.relatedIP.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                        expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.aolWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.attWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.comcastWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.created).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.created).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.defaultWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.gmailWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.gmxWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.icloudWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.id).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.id).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.mailruWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.name).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.name).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.qqWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.updated).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be.a('number');
                    expect(data.incident.relatedIP.autoWarmupPlan.warmupInterval).to.be("0");
                    expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.yahooWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.yandexWarmupPlan).to.be("");
                    expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                    expect(data.incident.relatedIP.autoWarmupPlan.zohoWarmupPlan).to.be("");
                  expect(data.incident.relatedIP.comcastSettings).to.be.a('string');
                  expect(data.incident.relatedIP.comcastSettings).to.be("");
                  expect(data.incident.relatedIP.created).to.be.a('number');
                  expect(data.incident.relatedIP.created).to.be("0");
                  expect(data.incident.relatedIP.defaultSettings).to.be.a('string');
                  expect(data.incident.relatedIP.defaultSettings).to.be("");
                  expect(data.incident.relatedIP.gmailSettings).to.be.a('string');
                  expect(data.incident.relatedIP.gmailSettings).to.be("");
                  expect(data.incident.relatedIP.gmxSettings).to.be.a('string');
                  expect(data.incident.relatedIP.gmxSettings).to.be("");
                  expect(data.incident.relatedIP.icloudSettings).to.be.a('string');
                  expect(data.incident.relatedIP.icloudSettings).to.be("");
                  expect(data.incident.relatedIP.id).to.be.a('number');
                  expect(data.incident.relatedIP.id).to.be("0");
                  expect(data.incident.relatedIP.infraClassification).to.be.a('string');
                  expect(data.incident.relatedIP.infraClassification).to.be("");
                  expect(data.incident.relatedIP.infraMonitor).to.be.a('boolean');
                  expect(data.incident.relatedIP.infraMonitor).to.be(false);
                  {
                    let dataCtr = data.incident.relatedIP.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsLabel);
                      expect(data.color).to.be.a('string');
                      expect(data.color).to.be("");
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('number');
                      expect(data.type).to.be("0");
      
                            }
                  }
                  expect(data.incident.relatedIP.mailruSettings).to.be.a('string');
                  expect(data.incident.relatedIP.mailruSettings).to.be("");
                  expect(data.incident.relatedIP.microsoftSettings).to.be.a('string');
                  expect(data.incident.relatedIP.microsoftSettings).to.be("");
                  expect(data.incident.relatedIP.publicIP).to.be.a('string');
                  expect(data.incident.relatedIP.publicIP).to.be("");
                  expect(data.incident.relatedIP.qqSettings).to.be.a('string');
                  expect(data.incident.relatedIP.qqSettings).to.be("");
                  expect(data.incident.relatedIP.reverseDNSHostname).to.be.a('string');
                  expect(data.incident.relatedIP.reverseDNSHostname).to.be("");
                  expect(data.incident.relatedIP.state).to.be.a(SendPostApi.ModelsIPState);
                      expect(data.incident.relatedIP.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                        expect(data.incident.relatedIP.systemDomain.created).to.be.a('number');
                    expect(data.incident.relatedIP.systemDomain.created).to.be("0");
                    expect(data.incident.relatedIP.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.dkim.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.dkim.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.dkim.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.dkimConfig).to.be("");
                    expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.dkimVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.id).to.be.a('number');
                    expect(data.incident.relatedIP.systemDomain.id).to.be("0");
                    expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.mailboxVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.name).to.be.a('string');
                    expect(data.incident.relatedIP.systemDomain.name).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.spf.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.spf.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.spf.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.spfVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.spfVerified).to.be(false);
                    expect(data.incident.relatedIP.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                          expect(data.incident.relatedIP.systemDomain.track.host).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.host).to.be("");
                      expect(data.incident.relatedIP.systemDomain.track.textValue).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.textValue).to.be("");
                      expect(data.incident.relatedIP.systemDomain.track.type).to.be.a('string');
                      expect(data.incident.relatedIP.systemDomain.track.type).to.be("");
                    expect(data.incident.relatedIP.systemDomain.trackVerified).to.be.a('boolean');
                    expect(data.incident.relatedIP.systemDomain.trackVerified).to.be(false);
                  expect(data.incident.relatedIP.type).to.be.a(SendPostApi.ModelsIPType);
                      expect(data.incident.relatedIP.yahooSettings).to.be.a('string');
                  expect(data.incident.relatedIP.yahooSettings).to.be("");
                  expect(data.incident.relatedIP.yandexSettings).to.be.a('string');
                  expect(data.incident.relatedIP.yandexSettings).to.be("");
                  expect(data.incident.relatedIP.zohoSettings).to.be.a('string');
                  expect(data.incident.relatedIP.zohoSettings).to.be("");
                expect(data.incident.relatedSubAccount).to.be.a(SendPostApi.ModelsSubAccount);
                      expect(data.incident.relatedSubAccount.apiKey).to.be.a('string');
                  expect(data.incident.relatedSubAccount.apiKey).to.be("");
                  expect(data.incident.relatedSubAccount.created).to.be.a('number');
                  expect(data.incident.relatedSubAccount.created).to.be("0");
                  expect(data.incident.relatedSubAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.incident.relatedSubAccount.createdBy.companyName).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.companyName).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.created).to.be.a('number');
                    expect(data.incident.relatedSubAccount.createdBy.created).to.be("0");
                    expect(data.incident.relatedSubAccount.createdBy.email).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.email).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.id).to.be.a('number');
                    expect(data.incident.relatedSubAccount.createdBy.id).to.be("0");
                    expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.isForbidden).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.isVerified).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.name).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.name).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.createdBy.onboardQAnswered).to.be(false);
                    expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.phoneNumber).to.be("");
                    expect(data.incident.relatedSubAccount.createdBy.url).to.be.a('string');
                    expect(data.incident.relatedSubAccount.createdBy.url).to.be("");
                  expect(data.incident.relatedSubAccount.id).to.be.a('number');
                  expect(data.incident.relatedSubAccount.id).to.be("0");
                  expect(data.incident.relatedSubAccount.isPlus).to.be.a('boolean');
                  expect(data.incident.relatedSubAccount.isPlus).to.be(false);
                  {
                    let dataCtr = data.incident.relatedSubAccount.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsLabel);
                      expect(data.color).to.be.a('string');
                      expect(data.color).to.be("");
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('number');
                      expect(data.type).to.be("0");
      
                            }
                  }
                  expect(data.incident.relatedSubAccount.name).to.be.a('string');
                  expect(data.incident.relatedSubAccount.name).to.be("");
                  {
                    let dataCtr = data.incident.relatedSubAccount.smtpAuths;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                      expect(data.created).to.be.a('number');
                      expect(data.created).to.be("0");
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be("0");
                      expect(data.password).to.be.a('string');
                      expect(data.password).to.be("");
                      expect(data.updated).to.be.a('number');
                      expect(data.updated).to.be("0");
                      expect(data.username).to.be.a('string');
                      expect(data.username).to.be("");
      
                            }
                  }
                  expect(data.incident.relatedSubAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                      expect(data.incident.relatedSubAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                        expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.companyName).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.created).to.be.a('number');
                    expect(data.incident.relatedSubAccount.updatedBy.created).to.be("0");
                    expect(data.incident.relatedSubAccount.updatedBy.email).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.email).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.id).to.be.a('number');
                    expect(data.incident.relatedSubAccount.updatedBy.id).to.be("0");
                    expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.isForbidden).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.isVerified).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.name).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.name).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                    expect(data.incident.relatedSubAccount.updatedBy.onboardQAnswered).to.be(false);
                    expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.phoneNumber).to.be("");
                    expect(data.incident.relatedSubAccount.updatedBy.url).to.be.a('string');
                    expect(data.incident.relatedSubAccount.updatedBy.url).to.be("");
                expect(data.incident.status).to.be.a(SendPostApi.ModelsIncidentStatus);
                    expect(data.incident.summary).to.be.a('string');
                expect(data.incident.summary).to.be("");
                {
                  let dataCtr = data.incident.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsTag);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.createdBy.companyName).to.be.a('string');
                      expect(data.createdBy.companyName).to.be("");
                      expect(data.createdBy.created).to.be.a('number');
                      expect(data.createdBy.created).to.be("0");
                      expect(data.createdBy.email).to.be.a('string');
                      expect(data.createdBy.email).to.be("");
                      expect(data.createdBy.id).to.be.a('number');
                      expect(data.createdBy.id).to.be("0");
                      expect(data.createdBy.isForbidden).to.be.a('boolean');
                      expect(data.createdBy.isForbidden).to.be(false);
                      expect(data.createdBy.isVerified).to.be.a('boolean');
                      expect(data.createdBy.isVerified).to.be(false);
                      expect(data.createdBy.name).to.be.a('string');
                      expect(data.createdBy.name).to.be("");
                      expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.createdBy.onboardQAnswered).to.be(false);
                      expect(data.createdBy.phoneNumber).to.be.a('string');
                      expect(data.createdBy.phoneNumber).to.be("");
                      expect(data.createdBy.url).to.be.a('string');
                      expect(data.createdBy.url).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.updatedBy.companyName).to.be.a('string');
                      expect(data.updatedBy.companyName).to.be("");
                      expect(data.updatedBy.created).to.be.a('number');
                      expect(data.updatedBy.created).to.be("0");
                      expect(data.updatedBy.email).to.be.a('string');
                      expect(data.updatedBy.email).to.be("");
                      expect(data.updatedBy.id).to.be.a('number');
                      expect(data.updatedBy.id).to.be("0");
                      expect(data.updatedBy.isForbidden).to.be.a('boolean');
                      expect(data.updatedBy.isForbidden).to.be(false);
                      expect(data.updatedBy.isVerified).to.be.a('boolean');
                      expect(data.updatedBy.isVerified).to.be(false);
                      expect(data.updatedBy.name).to.be.a('string');
                      expect(data.updatedBy.name).to.be("");
                      expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.updatedBy.onboardQAnswered).to.be(false);
                      expect(data.updatedBy.phoneNumber).to.be.a('string');
                      expect(data.updatedBy.phoneNumber).to.be("");
                      expect(data.updatedBy.url).to.be.a('string');
                      expect(data.updatedBy.url).to.be("");
    
                          }
                }
                expect(data.incident.updated).to.be.a('number');
                expect(data.incident.updated).to.be("0");
              expect(data.integration).to.be.a(SendPostApi.ModelsIntegration);
                    expect(data.integration.created).to.be.a('number');
                expect(data.integration.created).to.be("0");
                expect(data.integration.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.integration.createdBy.companyName).to.be.a('string');
                  expect(data.integration.createdBy.companyName).to.be("");
                  expect(data.integration.createdBy.created).to.be.a('number');
                  expect(data.integration.createdBy.created).to.be("0");
                  expect(data.integration.createdBy.email).to.be.a('string');
                  expect(data.integration.createdBy.email).to.be("");
                  expect(data.integration.createdBy.id).to.be.a('number');
                  expect(data.integration.createdBy.id).to.be("0");
                  expect(data.integration.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.integration.createdBy.isForbidden).to.be(false);
                  expect(data.integration.createdBy.isVerified).to.be.a('boolean');
                  expect(data.integration.createdBy.isVerified).to.be(false);
                  expect(data.integration.createdBy.name).to.be.a('string');
                  expect(data.integration.createdBy.name).to.be("");
                  expect(data.integration.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.integration.createdBy.onboardQAnswered).to.be(false);
                  expect(data.integration.createdBy.phoneNumber).to.be.a('string');
                  expect(data.integration.createdBy.phoneNumber).to.be("");
                  expect(data.integration.createdBy.url).to.be.a('string');
                  expect(data.integration.createdBy.url).to.be("");
                expect(data.integration.id).to.be.a('number');
                expect(data.integration.id).to.be("0");
                expect(data.integration.key).to.be.a('string');
                expect(data.integration.key).to.be("");
                expect(data.integration.settings).to.be.a('string');
                expect(data.integration.settings).to.be("");
                expect(data.integration.type).to.be.a(SendPostApi.ModelsIntegrationType);
                    expect(data.integration.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.integration.updatedBy.companyName).to.be.a('string');
                  expect(data.integration.updatedBy.companyName).to.be("");
                  expect(data.integration.updatedBy.created).to.be.a('number');
                  expect(data.integration.updatedBy.created).to.be("0");
                  expect(data.integration.updatedBy.email).to.be.a('string');
                  expect(data.integration.updatedBy.email).to.be("");
                  expect(data.integration.updatedBy.id).to.be.a('number');
                  expect(data.integration.updatedBy.id).to.be("0");
                  expect(data.integration.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.integration.updatedBy.isForbidden).to.be(false);
                  expect(data.integration.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.integration.updatedBy.isVerified).to.be(false);
                  expect(data.integration.updatedBy.name).to.be.a('string');
                  expect(data.integration.updatedBy.name).to.be("");
                  expect(data.integration.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.integration.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.integration.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.integration.updatedBy.phoneNumber).to.be("");
                  expect(data.integration.updatedBy.url).to.be.a('string');
                  expect(data.integration.updatedBy.url).to.be("");
              expect(data.invitation).to.be.a(SendPostApi.ModelsInvitation);
                    expect(data.invitation.id).to.be.a('number');
                expect(data.invitation.id).to.be("0");
                expect(data.invitation.role).to.be.a(SendPostApi.ModelsMemberRole);
                    expect(data.invitation.status).to.be.a(SendPostApi.ModelsInvitationStatus);
                    expect(data.invitation.toEmail).to.be.a('string');
                expect(data.invitation.toEmail).to.be("");
                expect(data.invitation.created).to.be.a('number');
                expect(data.invitation.created).to.be("0");
              expect(data.ip).to.be.a(SendPostApi.ModelsIP);
                    expect(data.ip.aolSettings).to.be.a('string');
                expect(data.ip.aolSettings).to.be("");
                expect(data.ip.attSettings).to.be.a('string');
                expect(data.ip.attSettings).to.be("");
                expect(data.ip.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                      expect(data.ip.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.aolWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.attWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.comcastWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.created).to.be.a('number');
                  expect(data.ip.autoWarmupPlan.created).to.be("0");
                  expect(data.ip.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.defaultWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.gmailWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.gmxWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.icloudWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.id).to.be.a('number');
                  expect(data.ip.autoWarmupPlan.id).to.be("0");
                  expect(data.ip.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.mailruWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.name).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.name).to.be("");
                  expect(data.ip.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.qqWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.updated).to.be.a('number');
                  expect(data.ip.autoWarmupPlan.updated).to.be("0");
                  expect(data.ip.autoWarmupPlan.warmupInterval).to.be.a('number');
                  expect(data.ip.autoWarmupPlan.warmupInterval).to.be("0");
                  expect(data.ip.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.yahooWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.yandexWarmupPlan).to.be("");
                  expect(data.ip.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                  expect(data.ip.autoWarmupPlan.zohoWarmupPlan).to.be("");
                expect(data.ip.comcastSettings).to.be.a('string');
                expect(data.ip.comcastSettings).to.be("");
                expect(data.ip.created).to.be.a('number');
                expect(data.ip.created).to.be("0");
                expect(data.ip.defaultSettings).to.be.a('string');
                expect(data.ip.defaultSettings).to.be("");
                expect(data.ip.gmailSettings).to.be.a('string');
                expect(data.ip.gmailSettings).to.be("");
                expect(data.ip.gmxSettings).to.be.a('string');
                expect(data.ip.gmxSettings).to.be("");
                expect(data.ip.icloudSettings).to.be.a('string');
                expect(data.ip.icloudSettings).to.be("");
                expect(data.ip.id).to.be.a('number');
                expect(data.ip.id).to.be("0");
                expect(data.ip.infraClassification).to.be.a('string');
                expect(data.ip.infraClassification).to.be("");
                expect(data.ip.infraMonitor).to.be.a('boolean');
                expect(data.ip.infraMonitor).to.be(false);
                {
                  let dataCtr = data.ip.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.ip.mailruSettings).to.be.a('string');
                expect(data.ip.mailruSettings).to.be("");
                expect(data.ip.microsoftSettings).to.be.a('string');
                expect(data.ip.microsoftSettings).to.be("");
                expect(data.ip.publicIP).to.be.a('string');
                expect(data.ip.publicIP).to.be("");
                expect(data.ip.qqSettings).to.be.a('string');
                expect(data.ip.qqSettings).to.be("");
                expect(data.ip.reverseDNSHostname).to.be.a('string');
                expect(data.ip.reverseDNSHostname).to.be("");
                expect(data.ip.state).to.be.a(SendPostApi.ModelsIPState);
                    expect(data.ip.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                      expect(data.ip.systemDomain.created).to.be.a('number');
                  expect(data.ip.systemDomain.created).to.be("0");
                  expect(data.ip.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.ip.systemDomain.dkim.host).to.be.a('string');
                    expect(data.ip.systemDomain.dkim.host).to.be("");
                    expect(data.ip.systemDomain.dkim.textValue).to.be.a('string');
                    expect(data.ip.systemDomain.dkim.textValue).to.be("");
                    expect(data.ip.systemDomain.dkim.type).to.be.a('string');
                    expect(data.ip.systemDomain.dkim.type).to.be("");
                  expect(data.ip.systemDomain.dkimConfig).to.be.a('string');
                  expect(data.ip.systemDomain.dkimConfig).to.be("");
                  expect(data.ip.systemDomain.dkimVerified).to.be.a('boolean');
                  expect(data.ip.systemDomain.dkimVerified).to.be(false);
                  expect(data.ip.systemDomain.id).to.be.a('number');
                  expect(data.ip.systemDomain.id).to.be("0");
                  expect(data.ip.systemDomain.mailboxVerified).to.be.a('boolean');
                  expect(data.ip.systemDomain.mailboxVerified).to.be(false);
                  expect(data.ip.systemDomain.name).to.be.a('string');
                  expect(data.ip.systemDomain.name).to.be("");
                  expect(data.ip.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.ip.systemDomain.spf.host).to.be.a('string');
                    expect(data.ip.systemDomain.spf.host).to.be("");
                    expect(data.ip.systemDomain.spf.textValue).to.be.a('string');
                    expect(data.ip.systemDomain.spf.textValue).to.be("");
                    expect(data.ip.systemDomain.spf.type).to.be.a('string');
                    expect(data.ip.systemDomain.spf.type).to.be("");
                  expect(data.ip.systemDomain.spfVerified).to.be.a('boolean');
                  expect(data.ip.systemDomain.spfVerified).to.be(false);
                  expect(data.ip.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                        expect(data.ip.systemDomain.track.host).to.be.a('string');
                    expect(data.ip.systemDomain.track.host).to.be("");
                    expect(data.ip.systemDomain.track.textValue).to.be.a('string');
                    expect(data.ip.systemDomain.track.textValue).to.be("");
                    expect(data.ip.systemDomain.track.type).to.be.a('string');
                    expect(data.ip.systemDomain.track.type).to.be("");
                  expect(data.ip.systemDomain.trackVerified).to.be.a('boolean');
                  expect(data.ip.systemDomain.trackVerified).to.be(false);
                expect(data.ip.type).to.be.a(SendPostApi.ModelsIPType);
                    expect(data.ip.yahooSettings).to.be.a('string');
                expect(data.ip.yahooSettings).to.be("");
                expect(data.ip.yandexSettings).to.be.a('string');
                expect(data.ip.yandexSettings).to.be("");
                expect(data.ip.zohoSettings).to.be.a('string');
                expect(data.ip.zohoSettings).to.be("");
              expect(data.ipPool).to.be.a(SendPostApi.ModelsAccountIPPool);
                    expect(data.ipPool.created).to.be.a('number');
                expect(data.ipPool.created).to.be("0");
                expect(data.ipPool.id).to.be.a('number');
                expect(data.ipPool.id).to.be("0");
                {
                  let dataCtr = data.ipPool.ips;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsIP);
                    expect(data.aolSettings).to.be.a('string');
                    expect(data.aolSettings).to.be("");
                    expect(data.attSettings).to.be.a('string');
                    expect(data.attSettings).to.be("");
                    expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                          expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.created).to.be.a('number');
                      expect(data.autoWarmupPlan.created).to.be("0");
                      expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.id).to.be.a('number');
                      expect(data.autoWarmupPlan.id).to.be("0");
                      expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.name).to.be.a('string');
                      expect(data.autoWarmupPlan.name).to.be("");
                      expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.updated).to.be.a('number');
                      expect(data.autoWarmupPlan.updated).to.be("0");
                      expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
                      expect(data.autoWarmupPlan.warmupInterval).to.be("0");
                      expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
                      expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
                      expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
                    expect(data.comcastSettings).to.be.a('string');
                    expect(data.comcastSettings).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.defaultSettings).to.be.a('string');
                    expect(data.defaultSettings).to.be("");
                    expect(data.gmailSettings).to.be.a('string');
                    expect(data.gmailSettings).to.be("");
                    expect(data.gmxSettings).to.be.a('string');
                    expect(data.gmxSettings).to.be("");
                    expect(data.icloudSettings).to.be.a('string');
                    expect(data.icloudSettings).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.infraClassification).to.be.a('string');
                    expect(data.infraClassification).to.be("");
                    expect(data.infraMonitor).to.be.a('boolean');
                    expect(data.infraMonitor).to.be(false);
                    {
                      let dataCtr = data.labels;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SendPostApi.ModelsLabel);
                        expect(data.color).to.be.a('string');
                        expect(data.color).to.be("");
                        expect(data.created).to.be.a('number');
                        expect(data.created).to.be("0");
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be("0");
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('number');
                        expect(data.type).to.be("0");
        
                              }
                    }
                    expect(data.mailruSettings).to.be.a('string');
                    expect(data.mailruSettings).to.be("");
                    expect(data.microsoftSettings).to.be.a('string');
                    expect(data.microsoftSettings).to.be("");
                    expect(data.publicIP).to.be.a('string');
                    expect(data.publicIP).to.be("");
                    expect(data.qqSettings).to.be.a('string');
                    expect(data.qqSettings).to.be("");
                    expect(data.reverseDNSHostname).to.be.a('string');
                    expect(data.reverseDNSHostname).to.be("");
                    expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                        expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                          expect(data.systemDomain.created).to.be.a('number');
                      expect(data.systemDomain.created).to.be("0");
                      expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                            expect(data.systemDomain.dkim.host).to.be.a('string');
                        expect(data.systemDomain.dkim.host).to.be("");
                        expect(data.systemDomain.dkim.textValue).to.be.a('string');
                        expect(data.systemDomain.dkim.textValue).to.be("");
                        expect(data.systemDomain.dkim.type).to.be.a('string');
                        expect(data.systemDomain.dkim.type).to.be("");
                      expect(data.systemDomain.dkimConfig).to.be.a('string');
                      expect(data.systemDomain.dkimConfig).to.be("");
                      expect(data.systemDomain.dkimVerified).to.be.a('boolean');
                      expect(data.systemDomain.dkimVerified).to.be(false);
                      expect(data.systemDomain.id).to.be.a('number');
                      expect(data.systemDomain.id).to.be("0");
                      expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
                      expect(data.systemDomain.mailboxVerified).to.be(false);
                      expect(data.systemDomain.name).to.be.a('string');
                      expect(data.systemDomain.name).to.be("");
                      expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                            expect(data.systemDomain.spf.host).to.be.a('string');
                        expect(data.systemDomain.spf.host).to.be("");
                        expect(data.systemDomain.spf.textValue).to.be.a('string');
                        expect(data.systemDomain.spf.textValue).to.be("");
                        expect(data.systemDomain.spf.type).to.be.a('string');
                        expect(data.systemDomain.spf.type).to.be("");
                      expect(data.systemDomain.spfVerified).to.be.a('boolean');
                      expect(data.systemDomain.spfVerified).to.be(false);
                      expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                            expect(data.systemDomain.track.host).to.be.a('string');
                        expect(data.systemDomain.track.host).to.be("");
                        expect(data.systemDomain.track.textValue).to.be.a('string');
                        expect(data.systemDomain.track.textValue).to.be("");
                        expect(data.systemDomain.track.type).to.be.a('string');
                        expect(data.systemDomain.track.type).to.be("");
                      expect(data.systemDomain.trackVerified).to.be.a('boolean');
                      expect(data.systemDomain.trackVerified).to.be(false);
                    expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                        expect(data.yahooSettings).to.be.a('string');
                    expect(data.yahooSettings).to.be("");
                    expect(data.yandexSettings).to.be.a('string');
                    expect(data.yandexSettings).to.be("");
                    expect(data.zohoSettings).to.be.a('string');
                    expect(data.zohoSettings).to.be("");
    
                          }
                }
                expect(data.ipPool.name).to.be.a('string');
                expect(data.ipPool.name).to.be("");
                expect(data.ipPool.routingMetaData).to.be.a('string');
                expect(data.ipPool.routingMetaData).to.be("");
                expect(data.ipPool.routingStrategy).to.be.a('number');
                expect(data.ipPool.routingStrategy).to.be("0");
                {
                  let dataCtr = data.ipPool.thirdPartySendingProviders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsThirdPartySendingProvider);
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.createdBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.createdBy.companyName).to.be.a('string');
                      expect(data.createdBy.companyName).to.be("");
                      expect(data.createdBy.created).to.be.a('number');
                      expect(data.createdBy.created).to.be("0");
                      expect(data.createdBy.email).to.be.a('string');
                      expect(data.createdBy.email).to.be("");
                      expect(data.createdBy.id).to.be.a('number');
                      expect(data.createdBy.id).to.be("0");
                      expect(data.createdBy.isForbidden).to.be.a('boolean');
                      expect(data.createdBy.isForbidden).to.be(false);
                      expect(data.createdBy.isVerified).to.be.a('boolean');
                      expect(data.createdBy.isVerified).to.be(false);
                      expect(data.createdBy.name).to.be.a('string');
                      expect(data.createdBy.name).to.be("");
                      expect(data.createdBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.createdBy.onboardQAnswered).to.be(false);
                      expect(data.createdBy.phoneNumber).to.be.a('string');
                      expect(data.createdBy.phoneNumber).to.be("");
                      expect(data.createdBy.url).to.be.a('string');
                      expect(data.createdBy.url).to.be("");
                    expect(data.domain).to.be.a('string');
                    expect(data.domain).to.be("");
                    expect(data.endpoint).to.be.a('string');
                    expect(data.endpoint).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.oauthToken).to.be.a('string');
                    expect(data.oauthToken).to.be("");
                    expect(data.port).to.be.a('number');
                    expect(data.port).to.be("0");
                    expect(data.ratePerHour).to.be.a('number');
                    expect(data.ratePerHour).to.be("0");
                    expect(data.retryTime).to.be.a('number');
                    expect(data.retryTime).to.be("0");
                    expect(data.secret).to.be.a('string');
                    expect(data.secret).to.be("");
                    expect(data.type).to.be.a(SendPostApi.ModelsThirdPartySendingProviderType);
                        expect(data.updatedBy).to.be.a(SendPostApi.ModelsMember);
                          expect(data.updatedBy.companyName).to.be.a('string');
                      expect(data.updatedBy.companyName).to.be("");
                      expect(data.updatedBy.created).to.be.a('number');
                      expect(data.updatedBy.created).to.be("0");
                      expect(data.updatedBy.email).to.be.a('string');
                      expect(data.updatedBy.email).to.be("");
                      expect(data.updatedBy.id).to.be.a('number');
                      expect(data.updatedBy.id).to.be("0");
                      expect(data.updatedBy.isForbidden).to.be.a('boolean');
                      expect(data.updatedBy.isForbidden).to.be(false);
                      expect(data.updatedBy.isVerified).to.be.a('boolean');
                      expect(data.updatedBy.isVerified).to.be(false);
                      expect(data.updatedBy.name).to.be.a('string');
                      expect(data.updatedBy.name).to.be("");
                      expect(data.updatedBy.onboardQAnswered).to.be.a('boolean');
                      expect(data.updatedBy.onboardQAnswered).to.be(false);
                      expect(data.updatedBy.phoneNumber).to.be.a('string');
                      expect(data.updatedBy.phoneNumber).to.be("");
                      expect(data.updatedBy.url).to.be.a('string');
                      expect(data.updatedBy.url).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.ipPool.toAccountIPPools;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.ipPool.type).to.be.a(SendPostApi.ModelsIPPoolType);
                    expect(data.ipPool.threshold).to.be.a('string');
                expect(data.ipPool.threshold).to.be("");
                expect(data.ipPool.shouldOverflow).to.be.a('boolean');
                expect(data.ipPool.shouldOverflow).to.be(false);
                expect(data.ipPool.overflowPoolName).to.be.a('string');
                expect(data.ipPool.overflowPoolName).to.be("");
                expect(data.ipPool.warmupInterval).to.be.a('number');
                expect(data.ipPool.warmupInterval).to.be("0");
              expect(data.label).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.label.color).to.be.a('string');
                expect(data.label.color).to.be("");
                expect(data.label.created).to.be.a('number');
                expect(data.label.created).to.be("0");
                expect(data.label.id).to.be.a('number');
                expect(data.label.id).to.be("0");
                expect(data.label.name).to.be.a('string');
                expect(data.label.name).to.be("");
                expect(data.label.type).to.be.a('number');
                expect(data.label.type).to.be("0");
              expect(data.member).to.be.a(SendPostApi.ModelsMember);
                    expect(data.member.companyName).to.be.a('string');
                expect(data.member.companyName).to.be("");
                expect(data.member.created).to.be.a('number');
                expect(data.member.created).to.be("0");
                expect(data.member.email).to.be.a('string');
                expect(data.member.email).to.be("");
                expect(data.member.id).to.be.a('number');
                expect(data.member.id).to.be("0");
                expect(data.member.isForbidden).to.be.a('boolean');
                expect(data.member.isForbidden).to.be(false);
                expect(data.member.isVerified).to.be.a('boolean');
                expect(data.member.isVerified).to.be(false);
                expect(data.member.name).to.be.a('string');
                expect(data.member.name).to.be("");
                expect(data.member.onboardQAnswered).to.be.a('boolean');
                expect(data.member.onboardQAnswered).to.be(false);
                expect(data.member.phoneNumber).to.be.a('string');
                expect(data.member.phoneNumber).to.be("");
                expect(data.member.url).to.be.a('string');
                expect(data.member.url).to.be("");
              expect(data.subAccount).to.be.a(SendPostApi.ModelsSubAccount);
                    expect(data.subAccount.apiKey).to.be.a('string');
                expect(data.subAccount.apiKey).to.be("");
                expect(data.subAccount.created).to.be.a('number');
                expect(data.subAccount.created).to.be("0");
                expect(data.subAccount.createdBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.subAccount.createdBy.companyName).to.be.a('string');
                  expect(data.subAccount.createdBy.companyName).to.be("");
                  expect(data.subAccount.createdBy.created).to.be.a('number');
                  expect(data.subAccount.createdBy.created).to.be("0");
                  expect(data.subAccount.createdBy.email).to.be.a('string');
                  expect(data.subAccount.createdBy.email).to.be("");
                  expect(data.subAccount.createdBy.id).to.be.a('number');
                  expect(data.subAccount.createdBy.id).to.be("0");
                  expect(data.subAccount.createdBy.isForbidden).to.be.a('boolean');
                  expect(data.subAccount.createdBy.isForbidden).to.be(false);
                  expect(data.subAccount.createdBy.isVerified).to.be.a('boolean');
                  expect(data.subAccount.createdBy.isVerified).to.be(false);
                  expect(data.subAccount.createdBy.name).to.be.a('string');
                  expect(data.subAccount.createdBy.name).to.be("");
                  expect(data.subAccount.createdBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.subAccount.createdBy.onboardQAnswered).to.be(false);
                  expect(data.subAccount.createdBy.phoneNumber).to.be.a('string');
                  expect(data.subAccount.createdBy.phoneNumber).to.be("");
                  expect(data.subAccount.createdBy.url).to.be.a('string');
                  expect(data.subAccount.createdBy.url).to.be("");
                expect(data.subAccount.id).to.be.a('number');
                expect(data.subAccount.id).to.be("0");
                expect(data.subAccount.isPlus).to.be.a('boolean');
                expect(data.subAccount.isPlus).to.be(false);
                {
                  let dataCtr = data.subAccount.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsLabel);
                    expect(data.color).to.be.a('string');
                    expect(data.color).to.be("");
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('number');
                    expect(data.type).to.be("0");
    
                          }
                }
                expect(data.subAccount.name).to.be.a('string');
                expect(data.subAccount.name).to.be("");
                {
                  let dataCtr = data.subAccount.smtpAuths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SendPostApi.ModelsSMTPAuth);
                    expect(data.created).to.be.a('number');
                    expect(data.created).to.be("0");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be("0");
                    expect(data.password).to.be.a('string');
                    expect(data.password).to.be("");
                    expect(data.updated).to.be.a('number');
                    expect(data.updated).to.be("0");
                    expect(data.username).to.be.a('string');
                    expect(data.username).to.be("");
    
                          }
                }
                expect(data.subAccount.type).to.be.a(SendPostApi.ModelsSubAccountType);
                    expect(data.subAccount.updatedBy).to.be.a(SendPostApi.ModelsMember);
                      expect(data.subAccount.updatedBy.companyName).to.be.a('string');
                  expect(data.subAccount.updatedBy.companyName).to.be("");
                  expect(data.subAccount.updatedBy.created).to.be.a('number');
                  expect(data.subAccount.updatedBy.created).to.be("0");
                  expect(data.subAccount.updatedBy.email).to.be.a('string');
                  expect(data.subAccount.updatedBy.email).to.be("");
                  expect(data.subAccount.updatedBy.id).to.be.a('number');
                  expect(data.subAccount.updatedBy.id).to.be("0");
                  expect(data.subAccount.updatedBy.isForbidden).to.be.a('boolean');
                  expect(data.subAccount.updatedBy.isForbidden).to.be(false);
                  expect(data.subAccount.updatedBy.isVerified).to.be.a('boolean');
                  expect(data.subAccount.updatedBy.isVerified).to.be(false);
                  expect(data.subAccount.updatedBy.name).to.be.a('string');
                  expect(data.subAccount.updatedBy.name).to.be("");
                  expect(data.subAccount.updatedBy.onboardQAnswered).to.be.a('boolean');
                  expect(data.subAccount.updatedBy.onboardQAnswered).to.be(false);
                  expect(data.subAccount.updatedBy.phoneNumber).to.be.a('string');
                  expect(data.subAccount.updatedBy.phoneNumber).to.be("");
                  expect(data.subAccount.updatedBy.url).to.be.a('string');
                  expect(data.subAccount.updatedBy.url).to.be("");
              expect(data.submittedAt).to.be.a('number');
              expect(data.submittedAt).to.be("0");
              expect(data.systemEventMetadata).to.be.a(Object);
              expect(data.systemEventMetadata).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterGetIpHealth', function() {
        it('should call iPRouterGetIpHealth successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterGetIpHealth call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;

          instance.iPRouterGetIpHealth(xAccountApiKey, ipid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPHealthResponse);
            {
              let dataCtr = data.providerStats;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsProviderDetails);
                expect(data.consumerStats).to.be.a(SendPostApi.ModelsConsumerStats);
                      expect(data.consumerStats.connectedTimestamp).to.be.a('number');
                  expect(data.consumerStats.connectedTimestamp).to.be("0");
                  expect(data.consumerStats.messageCount).to.be.a('number');
                  expect(data.consumerStats.messageCount).to.be("0");
                  expect(data.consumerStats.messageDepth).to.be.a('number');
                  expect(data.consumerStats.messageDepth).to.be("0");
                  expect(data.consumerStats.messagesFinished).to.be.a('number');
                  expect(data.consumerStats.messagesFinished).to.be("0");
                  expect(data.consumerStats.messagesRecieved).to.be.a('number');
                  expect(data.consumerStats.messagesRecieved).to.be("0");
                  expect(data.consumerStats.messagesRequeued).to.be.a('number');
                  expect(data.consumerStats.messagesRequeued).to.be("0");
                expect(data.deferredConsumerStats).to.be.a(SendPostApi.ModelsConsumerStats);
                      expect(data.deferredConsumerStats.connectedTimestamp).to.be.a('number');
                  expect(data.deferredConsumerStats.connectedTimestamp).to.be("0");
                  expect(data.deferredConsumerStats.messageCount).to.be.a('number');
                  expect(data.deferredConsumerStats.messageCount).to.be("0");
                  expect(data.deferredConsumerStats.messageDepth).to.be.a('number');
                  expect(data.deferredConsumerStats.messageDepth).to.be("0");
                  expect(data.deferredConsumerStats.messagesFinished).to.be.a('number');
                  expect(data.deferredConsumerStats.messagesFinished).to.be("0");
                  expect(data.deferredConsumerStats.messagesRecieved).to.be.a('number');
                  expect(data.deferredConsumerStats.messagesRecieved).to.be("0");
                  expect(data.deferredConsumerStats.messagesRequeued).to.be.a('number');
                  expect(data.deferredConsumerStats.messagesRequeued).to.be("0");
                expect(data.providerSettings).to.be.a(SendPostApi.ModelsIPProviderSettings);
                      expect(data.providerSettings.maxConcurrentConnections).to.be.a('number');
                  expect(data.providerSettings.maxConcurrentConnections).to.be("0");
                  expect(data.providerSettings.maxSendPerDay).to.be.a('number');
                  expect(data.providerSettings.maxSendPerDay).to.be("0");
                  expect(data.providerSettings.maxSendPerHour).to.be.a('number');
                  expect(data.providerSettings.maxSendPerHour).to.be("0");
                  expect(data.providerSettings.maxSendPerMinute).to.be.a('number');
                  expect(data.providerSettings.maxSendPerMinute).to.be("0");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPRouterUpdate', function() {
        it('should call iPRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for iPRouterUpdate call and complete the assertions
          /*
          var xAccountApiKey = "xAccountApiKey_example";
          var ipid = 789;
          var body = new SendPostApi.ModelsIIP();
          body.labels = [""];
          body.providerSettings = new SendPostApi.ModelsProviderSettings();
          body.providerSettings.backOffConfiguration = new SendPostApi.ModelsBackOffConfiguration();
          body.providerSettings.backOffConfiguration.concurrentConnections = "0";
          body.providerSettings.backOffConfiguration.concurrentConnectionsType = new SendPostApi.ModelsBackOffDecreaseType();
          body.providerSettings.backOffConfiguration.sendPerDay = "0";
          body.providerSettings.backOffConfiguration.sendPerDayType = new SendPostApi.ModelsBackOffDecreaseType();
          body.providerSettings.backOffConfiguration.sendPerHour = "0";
          body.providerSettings.backOffConfiguration.sendPerHourType = new SendPostApi.ModelsBackOffDecreaseType();
          body.providerSettings.backOffConfiguration.sendPerMinute = "0";
          body.providerSettings.backOffConfiguration.sendPerMinuteType = new SendPostApi.ModelsBackOffDecreaseType();
          body.providerSettings.backOffTrigger = new SendPostApi.ModelsBackOffTrigger();
          body.providerSettings.backOffTrigger.deferralPercentage = "0";
          body.providerSettings.backOffTrigger.durationInMinutes = "0";
          body.providerSettings.backOffTrigger.hardBouncePercentage = "0";
          body.providerSettings.backOffTrigger.minimumAttempts = "0";
          body.providerSettings.maxConcurrentConnections = "0";
          body.providerSettings.maxSendPerDay = "0";
          body.providerSettings.maxSendPerHour = "0";
          body.providerSettings.maxSendPerMinute = "0";
          body.providerSettings.name = "";
          body.providerSettings.warmupSettings = new SendPostApi.ModelsWarmupDetails();
          body.providerSettings.warmupSettings.currentVolumePerHour = "0";
          body.providerSettings.warmupSettings.decreasePercentage = 0.0;
          body.providerSettings.warmupSettings.deliverabilityGoal = "0";
          body.providerSettings.warmupSettings.gracePeriodNeeded = false;
          body.providerSettings.warmupSettings.increasePercentage = 0.0;
          body.providerSettings.warmupSettings.isPaused = false;
          body.providerSettings.warmupSettings.isWarmupCompleted = false;
          body.providerSettings.warmupSettings.lastUpdated = "0";
          body.providerSettings.warmupSettings.maxBounceRate = 0.0;
          body.providerSettings.warmupSettings.name = "";
          body.providerSettings.warmupSettings.reasonForSpeedChange = "";
          body.providerSettings.warmupSettings.timePerEmail = "0";
          body.providerSettings.warmupSettings.warmupDay = "0";
          body.type = new SendPostApi.ModelsIIPUpdateType();

          instance.iPRouterUpdate(xAccountApiKey, ipid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIP);
            expect(data.aolSettings).to.be.a('string');
            expect(data.aolSettings).to.be("");
            expect(data.attSettings).to.be.a('string');
            expect(data.attSettings).to.be("");
            expect(data.autoWarmupPlan).to.be.a(SendPostApi.ModelsAutoWarmupPlan);
                  expect(data.autoWarmupPlan.aolWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.aolWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.attWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.attWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.comcastWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.comcastWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.created).to.be.a('number');
              expect(data.autoWarmupPlan.created).to.be("0");
              expect(data.autoWarmupPlan.defaultWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.defaultWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.gmailWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.gmailWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.gmxWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.gmxWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.icloudWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.icloudWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.id).to.be.a('number');
              expect(data.autoWarmupPlan.id).to.be("0");
              expect(data.autoWarmupPlan.mailruWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.mailruWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.microsoftWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.name).to.be.a('string');
              expect(data.autoWarmupPlan.name).to.be("");
              expect(data.autoWarmupPlan.qqWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.qqWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.updated).to.be.a('number');
              expect(data.autoWarmupPlan.updated).to.be("0");
              expect(data.autoWarmupPlan.warmupInterval).to.be.a('number');
              expect(data.autoWarmupPlan.warmupInterval).to.be("0");
              expect(data.autoWarmupPlan.yahooWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.yahooWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.yandexWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.yandexWarmupPlan).to.be("");
              expect(data.autoWarmupPlan.zohoWarmupPlan).to.be.a('string');
              expect(data.autoWarmupPlan.zohoWarmupPlan).to.be("");
            expect(data.comcastSettings).to.be.a('string');
            expect(data.comcastSettings).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.defaultSettings).to.be.a('string');
            expect(data.defaultSettings).to.be("");
            expect(data.gmailSettings).to.be.a('string');
            expect(data.gmailSettings).to.be("");
            expect(data.gmxSettings).to.be.a('string');
            expect(data.gmxSettings).to.be("");
            expect(data.icloudSettings).to.be.a('string');
            expect(data.icloudSettings).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.infraClassification).to.be.a('string');
            expect(data.infraClassification).to.be("");
            expect(data.infraMonitor).to.be.a('boolean');
            expect(data.infraMonitor).to.be(false);
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsLabel);
                expect(data.color).to.be.a('string');
                expect(data.color).to.be("");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be("0");

                      }
            }
            expect(data.mailruSettings).to.be.a('string');
            expect(data.mailruSettings).to.be("");
            expect(data.microsoftSettings).to.be.a('string');
            expect(data.microsoftSettings).to.be("");
            expect(data.publicIP).to.be.a('string');
            expect(data.publicIP).to.be("");
            expect(data.qqSettings).to.be.a('string');
            expect(data.qqSettings).to.be("");
            expect(data.reverseDNSHostname).to.be.a('string');
            expect(data.reverseDNSHostname).to.be("");
            expect(data.state).to.be.a(SendPostApi.ModelsIPState);
                expect(data.systemDomain).to.be.a(SendPostApi.ModelsSystemDomain);
                  expect(data.systemDomain.created).to.be.a('number');
              expect(data.systemDomain.created).to.be("0");
              expect(data.systemDomain.dkim).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.dkim.host).to.be.a('string');
                expect(data.systemDomain.dkim.host).to.be("");
                expect(data.systemDomain.dkim.textValue).to.be.a('string');
                expect(data.systemDomain.dkim.textValue).to.be("");
                expect(data.systemDomain.dkim.type).to.be.a('string');
                expect(data.systemDomain.dkim.type).to.be("");
              expect(data.systemDomain.dkimConfig).to.be.a('string');
              expect(data.systemDomain.dkimConfig).to.be("");
              expect(data.systemDomain.dkimVerified).to.be.a('boolean');
              expect(data.systemDomain.dkimVerified).to.be(false);
              expect(data.systemDomain.id).to.be.a('number');
              expect(data.systemDomain.id).to.be("0");
              expect(data.systemDomain.mailboxVerified).to.be.a('boolean');
              expect(data.systemDomain.mailboxVerified).to.be(false);
              expect(data.systemDomain.name).to.be.a('string');
              expect(data.systemDomain.name).to.be("");
              expect(data.systemDomain.spf).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.spf.host).to.be.a('string');
                expect(data.systemDomain.spf.host).to.be("");
                expect(data.systemDomain.spf.textValue).to.be.a('string');
                expect(data.systemDomain.spf.textValue).to.be("");
                expect(data.systemDomain.spf.type).to.be.a('string');
                expect(data.systemDomain.spf.type).to.be("");
              expect(data.systemDomain.spfVerified).to.be.a('boolean');
              expect(data.systemDomain.spfVerified).to.be(false);
              expect(data.systemDomain.track).to.be.a(SendPostApi.ModelsSystemDNSRecord);
                    expect(data.systemDomain.track.host).to.be.a('string');
                expect(data.systemDomain.track.host).to.be("");
                expect(data.systemDomain.track.textValue).to.be.a('string');
                expect(data.systemDomain.track.textValue).to.be("");
                expect(data.systemDomain.track.type).to.be.a('string');
                expect(data.systemDomain.track.type).to.be("");
              expect(data.systemDomain.trackVerified).to.be.a('boolean');
              expect(data.systemDomain.trackVerified).to.be(false);
            expect(data.type).to.be.a(SendPostApi.ModelsIPType);
                expect(data.yahooSettings).to.be.a('string');
            expect(data.yahooSettings).to.be("");
            expect(data.yandexSettings).to.be.a('string');
            expect(data.yandexSettings).to.be("");
            expect(data.zohoSettings).to.be.a('string');
            expect(data.zohoSettings).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
