/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.SubaccountsuppressionApi();
  });

  describe('(package)', function() {
    describe('SubaccountsuppressionApi', function() {
      describe('suppressionRouterCount', function() {
        it('should call suppressionRouterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterCount call and complete the assertions
          /*
          var opts = {};

          instance.suppressionRouterCount(xSubAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsCountStat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('suppressionRouterCreateSuppressions', function() {
        it('should call suppressionRouterCreateSuppressions successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterCreateSuppressions call and complete the assertions
          /*

          instance.suppressionRouterCreateSuppressions(body, xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsSuppression);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('suppressionRouterCreateSuppressionsInSuppressionFilter', function() {
        it('should call suppressionRouterCreateSuppressionsInSuppressionFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterCreateSuppressionsInSuppressionFilter call
          /*

          instance.suppressionRouterCreateSuppressionsInSuppressionFilter(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('suppressionRouterDeleteSuppression', function() {
        it('should call suppressionRouterDeleteSuppression successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterDeleteSuppression call and complete the assertions
          /*

          instance.suppressionRouterDeleteSuppression(body, xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsSuppression);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('suppressionRouterDeleteSuppressionsInSuppressionFilter', function() {
        it('should call suppressionRouterDeleteSuppressionsInSuppressionFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterDeleteSuppressionsInSuppressionFilter call
          /*

          instance.suppressionRouterDeleteSuppressionsInSuppressionFilter(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('suppressionRouterGetAllSuppressions', function() {
        it('should call suppressionRouterGetAllSuppressions successfully', function(done) {
          // TODO: uncomment, update parameter values for suppressionRouterGetAllSuppressions call and complete the assertions
          /*
          var opts = {};

          instance.suppressionRouterGetAllSuppressions(xSubAccountApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsSuppression);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
