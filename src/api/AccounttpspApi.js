/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsCountStat from '../model/ModelsCountStat';
import ModelsDeleteResponse from '../model/ModelsDeleteResponse';
import ModelsEThirdPartySendingProvider from '../model/ModelsEThirdPartySendingProvider';
import ModelsThirdPartySendingProvider from '../model/ModelsThirdPartySendingProvider';

/**
* AccountTpsp service.
* @module api/AccountTpspApi
* @version 1.0.0
*/
export default class AccountTpspApi {

    /**
    * Constructs a new AccountTpspApi. 
    * @alias module:api/AccountTpspApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tPSPRouterCount operation.
     * @callback module:api/AccountTpspApi~tPSPRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total TPSPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [search] search term
     * @param {module:api/AccountTpspApi~tPSPRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    tPSPRouterCount(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/tpsp/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tPSPRouterDelete operation.
     * @callback module:api/AccountTpspApi~tPSPRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ThirdPartySendingProvider
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspId The TPSPID you want to delete
     * @param {module:api/AccountTpspApi~tPSPRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsDeleteResponse}
     */
    tPSPRouterDelete(xAccountApiKey, tpspId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterDelete");
      }
      // verify the required parameter 'tpspId' is set
      if (tpspId === undefined || tpspId === null) {
        throw new Error("Missing the required parameter 'tpspId' when calling tPSPRouterDelete");
      }

      let pathParams = {
        'tpspId': tpspId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;
      return this.apiClient.callApi(
        '/account/tpsp/{tpspId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tPSPRouterGet operation.
     * @callback module:api/AccountTpspApi~tPSPRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsThirdPartySendingProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find ThirdPartySendingProvider by TPSPID
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspId the TPSPID you want to get
     * @param {module:api/AccountTpspApi~tPSPRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsThirdPartySendingProvider}
     */
    tPSPRouterGet(xAccountApiKey, tpspId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterGet");
      }
      // verify the required parameter 'tpspId' is set
      if (tpspId === undefined || tpspId === null) {
        throw new Error("Missing the required parameter 'tpspId' when calling tPSPRouterGet");
      }

      let pathParams = {
        'tpspId': tpspId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsThirdPartySendingProvider;
      return this.apiClient.callApi(
        '/account/tpsp/{tpspId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tPSPRouterGetAll operation.
     * @callback module:api/AccountTpspApi~tPSPRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsThirdPartySendingProvider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All TPSPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [search] search term
     * @param {module:api/AccountTpspApi~tPSPRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsThirdPartySendingProvider>}
     */
    tPSPRouterGetAll(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterGetAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsThirdPartySendingProvider];
      return this.apiClient.callApi(
        '/account/tpsp/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tPSPRouterInsert operation.
     * @callback module:api/AccountTpspApi~tPSPRouterInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsThirdPartySendingProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert ThirdPartySendingProvider
     * @param {String} xAccountApiKey Account API Key
     * @param {module:model/ModelsEThirdPartySendingProvider} body The body
     * @param {module:api/AccountTpspApi~tPSPRouterInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsThirdPartySendingProvider}
     */
    tPSPRouterInsert(xAccountApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterInsert");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tPSPRouterInsert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsThirdPartySendingProvider;
      return this.apiClient.callApi(
        '/account/tpsp/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tPSPRouterUpdate operation.
     * @callback module:api/AccountTpspApi~tPSPRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsThirdPartySendingProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ThirdPartySendingProvider
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspId The TPSPID you want to update
     * @param {Object.<String, Object>} body The body
     * @param {module:api/AccountTpspApi~tPSPRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsThirdPartySendingProvider}
     */
    tPSPRouterUpdate(xAccountApiKey, tpspId, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling tPSPRouterUpdate");
      }
      // verify the required parameter 'tpspId' is set
      if (tpspId === undefined || tpspId === null) {
        throw new Error("Missing the required parameter 'tpspId' when calling tPSPRouterUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tPSPRouterUpdate");
      }

      let pathParams = {
        'tpspId': tpspId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsThirdPartySendingProvider;
      return this.apiClient.callApi(
        '/account/tpsp/{tpspId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
