/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAccount from '../model/ModelsAccount';
import ModelsAuthInfo from '../model/ModelsAuthInfo';
import ModelsEAccount from '../model/ModelsEAccount';
import ModelsEAccountMember from '../model/ModelsEAccountMember';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authRouterCreate operation.
     * @callback module:api/AuthApi~authRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Account, sub-account and member
     * @param {String} xToken Firebase dynamic token
     * @param {module:model/ModelsEAccount} body The Account content
     * @param {module:api/AuthApi~authRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAccount}
     */
    authRouterCreate(xToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling authRouterCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authRouterCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAccount;
      return this.apiClient.callApi(
        '/auth/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRouterGetAuthInfo operation.
     * @callback module:api/AuthApi~authRouterGetAuthInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAuthInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Auth Info Details
     * @param {String} xToken Firebase dynamic token
     * @param {module:model/ModelsEAccount} body The Account content
     * @param {module:api/AuthApi~authRouterGetAuthInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAuthInfo}
     */
    authRouterGetAuthInfo(xToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling authRouterGetAuthInfo");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authRouterGetAuthInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAuthInfo;
      return this.apiClient.callApi(
        '/auth/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRouterUpdateAuthInfo operation.
     * @callback module:api/AuthApi~authRouterUpdateAuthInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAuthInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates member and accounts related for email verification and on boarding answers
     * @param {String} xToken Firebase dynamic token
     * @param {module:model/ModelsEAccountMember} body The Account Member content
     * @param {module:api/AuthApi~authRouterUpdateAuthInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAuthInfo}
     */
    authRouterUpdateAuthInfo(xToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling authRouterUpdateAuthInfo");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authRouterUpdateAuthInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAuthInfo;
      return this.apiClient.callApi(
        '/auth/info', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRouterUpdateLogo operation.
     * @callback module:api/AuthApi~authRouterUpdateLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates account brand logo for custom templates
     * @param {String} xToken Firebase dynamic token
     * @param {String} uid user id
     * @param {Object} opts Optional parameters
     * @param {File} [logo] Logo file
     * @param {module:api/AuthApi~authRouterUpdateLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authRouterUpdateLogo(xToken, uid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling authRouterUpdateLogo");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling authRouterUpdateLogo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
        'logo': opts['logo'],
        'uid': uid
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/logo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
