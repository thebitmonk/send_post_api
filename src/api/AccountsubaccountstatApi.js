/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAGDomainStat from '../model/ModelsAGDomainStat';
import ModelsAGStat from '../model/ModelsAGStat';
import ModelsAIPStat from '../model/ModelsAIPStat';
import ModelsAPStat from '../model/ModelsAPStat';
import ModelsRStat from '../model/ModelsRStat';
import ModelsStat from '../model/ModelsStat';

/**
* AccountSubaccountStat service.
* @module api/AccountSubaccountStatApi
* @version 1.0.0
*/
export default class AccountSubaccountStatApi {

    /**
    * Constructs a new AccountSubaccountStatApi. 
    * @alias module:api/AccountSubaccountStatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregateSubAccountStats operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregateSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Sub-Account Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregateSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsStat}
     */
    subAccountStatRouterGetAllAggregateSubAccountStats(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllAggregateSubAccountStats");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllAggregateSubAccountStats");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedDomainStatsForASubAccount operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedDomainStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGDomainStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Domain Stats for a Sub-Account
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedDomainStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGDomainStat>}
     */
    subAccountStatRouterGetAllAggregatedDomainStatsForASubAccount(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllAggregatedDomainStatsForASubAccount");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllAggregatedDomainStatsForASubAccount");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGDomainStat];
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}/aggregate/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Group Stats for a Sub-Account
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGStat>}
     */
    subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGStat];
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}/aggregate/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedIPStatsForASubAccount operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAIPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated IP Stats for a Sub-Account
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAIPStat>}
     */
    subAccountStatRouterGetAllAggregatedIPStatsForASubAccount(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllAggregatedIPStatsForASubAccount");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllAggregatedIPStatsForASubAccount");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAIPStat];
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}/aggregate/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a Sub-Account
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAPStat>}
     */
    subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAPStat];
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}/aggregate/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllSubAccountStats operation.
     * @callback module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Sub-Account Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} sid the subaccount id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountSubaccountStatApi~subAccountStatRouterGetAllSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRStat>}
     */
    subAccountStatRouterGetAllSubAccountStats(xAccountApiKey, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling subAccountStatRouterGetAllSubAccountStats");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling subAccountStatRouterGetAllSubAccountStats");
      }

      let pathParams = {
        'sid': sid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];
      return this.apiClient.callApi(
        '/account/subaccount/stat/{sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
