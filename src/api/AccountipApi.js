/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAccountIPPool from '../model/ModelsAccountIPPool';
import ModelsCountStat from '../model/ModelsCountStat';
import ModelsDeleteResponse from '../model/ModelsDeleteResponse';
import ModelsIIP from '../model/ModelsIIP';
import ModelsIP from '../model/ModelsIP';
import ModelsIPHealthResponse from '../model/ModelsIPHealthResponse';
import ModelsIncident from '../model/ModelsIncident';

/**
* AccountIp service.
* @module api/AccountIpApi
* @version 1.0.0
*/
export default class AccountIpApi {

    /**
    * Constructs a new AccountIpApi. 
    * @alias module:api/AccountIpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iPRouterAllocateIP operation.
     * @callback module:api/AccountIpApi~iPRouterAllocateIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allocate IP To Account
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountIpApi~iPRouterAllocateIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsIP>}
     */
    iPRouterAllocateIP(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterAllocateIP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIP];
      return this.apiClient.callApi(
        '/account/ip/allocate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterCount operation.
     * @callback module:api/AccountIpApi~iPRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total AccountIPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [search] search term
     * @param {module:api/AccountIpApi~iPRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    iPRouterCount(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/ip/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterDelete operation.
     * @callback module:api/AccountIpApi~iPRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IPId you want to delete
     * @param {module:api/AccountIpApi~iPRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsDeleteResponse}
     */
    iPRouterDelete(xAccountApiKey, ipid, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterDelete");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterDelete");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;
      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterGet operation.
     * @callback module:api/AccountIpApi~iPRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find IP by IPId
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {module:api/AccountIpApi~iPRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsIP}
     */
    iPRouterGet(xAccountApiKey, ipid, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGet");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGet");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIP;
      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterGetAll operation.
     * @callback module:api/AccountIpApi~iPRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [search] search term
     * @param {module:api/AccountIpApi~iPRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsIP>}
     */
    iPRouterGetAll(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIP];
      return this.apiClient.callApi(
        '/account/ip/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterGetAllIPIncidents operation.
     * @callback module:api/AccountIpApi~iPRouterGetAllIPIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIncident>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Incidents associated with a IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The ipid whose incidents you want to retrieve
     * @param {module:api/AccountIpApi~iPRouterGetAllIPIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsIncident>}
     */
    iPRouterGetAllIPIncidents(xAccountApiKey, ipid, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetAllIPIncidents");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGetAllIPIncidents");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIncident];
      return this.apiClient.callApi(
        '/account/ip/{ipid}/incident', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterGetIPAccountIPPools operation.
     * @callback module:api/AccountIpApi~iPRouterGetIPAccountIPPoolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAccountIPPool>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find AccountIPPools for IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {module:api/AccountIpApi~iPRouterGetIPAccountIPPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAccountIPPool>}
     */
    iPRouterGetIPAccountIPPools(xAccountApiKey, ipid, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetIPAccountIPPools");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGetIPAccountIPPools");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAccountIPPool];
      return this.apiClient.callApi(
        '/account/ip/{ipid}/ippool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterGetIpHealth operation.
     * @callback module:api/AccountIpApi~iPRouterGetIpHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIPHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IP health
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IP you want to update
     * @param {module:api/AccountIpApi~iPRouterGetIpHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsIPHealthResponse}
     */
    iPRouterGetIpHealth(xAccountApiKey, ipid, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetIpHealth");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGetIpHealth");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIPHealthResponse;
      return this.apiClient.callApi(
        '/account/ip/{ipid}/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPRouterUpdate operation.
     * @callback module:api/AccountIpApi~iPRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IP you want to update
     * @param {module:model/ModelsIIP} body The IP Email Provider Settings
     * @param {module:api/AccountIpApi~iPRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsIP}
     */
    iPRouterUpdate(xAccountApiKey, ipid, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterUpdate");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iPRouterUpdate");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIP;
      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
