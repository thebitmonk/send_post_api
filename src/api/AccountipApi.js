/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsIIP} from '../model/ModelsIIP';
import {ModelsIP} from '../model/ModelsIP';
import {ModelsIPHealthResponse} from '../model/ModelsIPHealthResponse';
import {ModelsIncident} from '../model/ModelsIncident';

/**
* Accountip service.
* @module api/AccountipApi
* @version 1.0.0
*/
export class AccountipApi {

    /**
    * Constructs a new AccountipApi. 
    * @alias module:api/AccountipApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the iPRouterAllocateIP operation.
     * @callback moduleapi/AccountipApi~iPRouterAllocateIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIP>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allocate IP To Account
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountipApi~iPRouterAllocateIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterAllocateIP(xAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterAllocateIP");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIP];

      return this.apiClient.callApi(
        '/account/ip/allocate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterCount operation.
     * @callback moduleapi/AccountipApi~iPRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total AccountIPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterBy filterBy
     * @param {Number} opts.filterValue filterValue
     * @param {String} opts.search search term
     * @param {module:api/AccountipApi~iPRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterCount(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'filterBy': opts['filterBy'],'filterValue': opts['filterValue'],'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/account/ip/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterDelete operation.
     * @callback moduleapi/AccountipApi~iPRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IPId you want to delete
     * @param {module:api/AccountipApi~iPRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterDelete(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterDelete");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterDelete");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterGet operation.
     * @callback moduleapi/AccountipApi~iPRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIP{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find IP by IPId
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {module:api/AccountipApi~iPRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterGet(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGet");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGet");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIP;

      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterGetAll operation.
     * @callback moduleapi/AccountipApi~iPRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIP>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IPs
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.filterBy filterBy
     * @param {Number} opts.filterValue filterValue
     * @param {String} opts.search search term
     * @param {module:api/AccountipApi~iPRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterGetAll(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'filterBy': opts['filterBy'],'filterValue': opts['filterValue'],'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIP];

      return this.apiClient.callApi(
        '/account/ip/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterGetAllIPIncidents operation.
     * @callback moduleapi/AccountipApi~iPRouterGetAllIPIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIncident>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Incidents associated with a IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The ipid whose incidents you want to retrieve
     * @param {module:api/AccountipApi~iPRouterGetAllIPIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterGetAllIPIncidents(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetAllIPIncidents");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGetAllIPIncidents");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIncident];

      return this.apiClient.callApi(
        '/account/ip/{ipid}/incident', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterGetIpHealth operation.
     * @callback moduleapi/AccountipApi~iPRouterGetIpHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIPHealthResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IP health
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IP you want to update
     * @param {module:api/AccountipApi~iPRouterGetIpHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterGetIpHealth(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetIpHealth");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterGetIpHealth");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIPHealthResponse;

      return this.apiClient.callApi(
        '/account/ip/{ipid}/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPRouterUpdate operation.
     * @callback moduleapi/AccountipApi~iPRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIP{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an IP
     * @param {module:model/ModelsIIP} body The IP Email Provider Settings
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid The IP you want to update
     * @param {module:api/AccountipApi~iPRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPRouterUpdate(body, xAccountApiKey, ipid, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iPRouterUpdate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPRouterUpdate");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPRouterUpdate");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIP;

      return this.apiClient.callApi(
        '/account/ip/{ipid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}