/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsDomain} from '../model/ModelsDomain';
import {ModelsEDomain} from '../model/ModelsEDomain';
import {ModelsVerifyByTokenRequest} from '../model/ModelsVerifyByTokenRequest';

/**
* Subaccountdomain service.
* @module api/SubaccountdomainApi
* @version 1.0.0
*/
export class SubaccountdomainApi {

    /**
    * Constructs a new SubaccountdomainApi. 
    * @alias module:api/SubaccountdomainApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the domainRouterCount operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total Domains
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountdomainApi~domainRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterCount(xSubAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/subaccount/domain/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterCreate operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDomain{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Domain
     * @param {module:model/ModelsEDomain} body The Domain content
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountdomainApi~domainRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterCreate(body, xSubAccountApiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling domainRouterCreate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsDomain;

      return this.apiClient.callApi(
        '/subaccount/domain/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterDelete operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Domain
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId The DomainId you want to delete
     * @param {module:api/SubaccountdomainApi~domainRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterDelete(xSubAccountApiKey, domainId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterDelete");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterDelete");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterGet operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDomain{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Domain by DomainId
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId the DomainId you want to get
     * @param {module:api/SubaccountdomainApi~domainRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterGet(xSubAccountApiKey, domainId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterGet");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterGet");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDomain;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterGetAll operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsDomain>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Domains
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search term
     * @param {module:api/SubaccountdomainApi~domainRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterGetAll(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'search': opts['search']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsDomain];

      return this.apiClient.callApi(
        '/subaccount/domain/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterUpdate operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDomain{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Domain
     * @param {module:model/ModelsEDomain} body The body
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId The DomainId you want to update
     * @param {module:api/SubaccountdomainApi~domainRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterUpdate(body, xSubAccountApiKey, domainId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling domainRouterUpdate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterUpdate");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterUpdate");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsDomain;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterVerify operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDomain{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Domain By Domain Id
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId the DomainId you want to get
     * @param {module:api/SubaccountdomainApi~domainRouterVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterVerify(xSubAccountApiKey, domainId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterVerify");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterVerify");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDomain;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterVerifyByToken operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterVerifyByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDomain{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Domain By Signed Token
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId the DomainId you want to get
     * @param {String} token The signed token used to verify
     * @param {module:api/SubaccountdomainApi~domainRouterVerifyByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    domainRouterVerifyByToken(xSubAccountApiKey, domainId, token, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterVerifyByToken");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterVerifyByToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling domainRouterVerifyByToken");
      }

      let pathParams = {
        'domainId': domainId,'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDomain;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}/verify/email/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the domainRouterVerifyRequest operation.
     * @callback moduleapi/SubaccountdomainApi~domainRouterVerifyRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Domain By Email Request
     * @param {module:model/ModelsVerifyByTokenRequest} body The Email to be used to verify
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} domainId the DomainId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectPath redirectPath
     * @param {module:api/SubaccountdomainApi~domainRouterVerifyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainRouterVerifyRequest(body, xSubAccountApiKey, domainId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling domainRouterVerifyRequest");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterVerifyRequest");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling domainRouterVerifyRequest");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
        'redirectPath': opts['redirectPath']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/subaccount/domain/{domainId}/verify/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}