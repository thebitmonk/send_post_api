/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Alert} from '../model/Alert';
import {ModelsAlertRequest} from '../model/ModelsAlertRequest';
import {ModelsAlertResponse} from '../model/ModelsAlertResponse';
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsDetailedAlert} from '../model/ModelsDetailedAlert';
import {ModelsEAlert} from '../model/ModelsEAlert';

/**
* Accountalert service.
* @module api/AccountalertApi
* @version 1.0.0
*/
export class AccountalertApi {

    /**
    * Constructs a new AccountalertApi. 
    * @alias module:api/AccountalertApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the alertRouterCount operation.
     * @callback moduleapi/AccountalertApi~alertRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total Alerts for account
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.search search term
     * @param {module:api/AccountalertApi~alertRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    alertRouterCount(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling alertRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/account/alert/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the alertRouterCreateAlert operation.
     * @callback moduleapi/AccountalertApi~alertRouterCreateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAlertResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an alert
     * @param {module:model/ModelsAlertRequest} body The List to br sent
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountalertApi~alertRouterCreateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    alertRouterCreateAlert(body, xAccountApiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling alertRouterCreateAlert");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling alertRouterCreateAlert");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAlertResponse;

      return this.apiClient.callApi(
        '/account/alert/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the alertRouterDelete operation.
     * @callback moduleapi/AccountalertApi~alertRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Alert
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} alertId The AlertId you want to delete
     * @param {module:api/AccountalertApi~alertRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    alertRouterDelete(xAccountApiKey, alertId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling alertRouterDelete");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertRouterDelete");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/account/alert/{alertId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the alertRouterGetAll operation.
     * @callback moduleapi/AccountalertApi~alertRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsDetailedAlert>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Alerts
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search term
     * @param {module:api/AccountalertApi~alertRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    alertRouterGetAll(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling alertRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsDetailedAlert];

      return this.apiClient.callApi(
        '/account/alert/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the alertRouterUpdate operation.
     * @callback moduleapi/AccountalertApi~alertRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Alert
     * @param {module:model/ModelsEAlert} body The alert  Settings
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} alertId The alert you want to update
     * @param {module:api/AccountalertApi~alertRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    alertRouterUpdate(body, xAccountApiKey, alertId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling alertRouterUpdate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling alertRouterUpdate");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertRouterUpdate");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Alert;

      return this.apiClient.callApi(
        '/account/alert/{alertId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}