/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsEIPPool} from '../model/ModelsEIPPool';
import {ModelsIPPool} from '../model/ModelsIPPool';

/**
* Subaccountippool service.
* @module api/SubaccountippoolApi
* @version 1.0.0
*/
export class SubaccountippoolApi {

    /**
    * Constructs a new SubaccountippoolApi. 
    * @alias module:api/SubaccountippoolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the iPPoolRouterCount operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total IPPools
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountippoolApi~iPPoolRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterCount(xSubAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/subaccount/ippool/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPPoolRouterCreate operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIPPool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IPPool
     * @param {module:model/ModelsEIPPool} body The IPPool content
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountippoolApi~iPPoolRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterCreate(body, xSubAccountApiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iPPoolRouterCreate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIPPool;

      return this.apiClient.callApi(
        '/subaccount/ippool/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPPoolRouterDelete operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete IPPool
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} ippoolid The IPPoolId you want to delete
     * @param {module:api/SubaccountippoolApi~iPPoolRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterDelete(xSubAccountApiKey, ippoolid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterDelete");
      }
      // verify the required parameter 'ippoolid' is set
      if (ippoolid === undefined || ippoolid === null) {
        throw new Error("Missing the required parameter 'ippoolid' when calling iPPoolRouterDelete");
      }

      let pathParams = {
        'ippoolid': ippoolid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/subaccount/ippool/{ippoolid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPPoolRouterGet operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIPPool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find IPPool by IPPoolId
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} ippoolid the IPPoolId you want to get
     * @param {module:api/SubaccountippoolApi~iPPoolRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterGet(xSubAccountApiKey, ippoolid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterGet");
      }
      // verify the required parameter 'ippoolid' is set
      if (ippoolid === undefined || ippoolid === null) {
        throw new Error("Missing the required parameter 'ippoolid' when calling iPPoolRouterGet");
      }

      let pathParams = {
        'ippoolid': ippoolid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIPPool;

      return this.apiClient.callApi(
        '/subaccount/ippool/{ippoolid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPPoolRouterGetAll operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIPPool>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IPPools
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search term
     * @param {module:api/SubaccountippoolApi~iPPoolRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterGetAll(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'search': opts['search']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIPPool];

      return this.apiClient.callApi(
        '/subaccount/ippool/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPPoolRouterUpdate operation.
     * @callback moduleapi/SubaccountippoolApi~iPPoolRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIPPool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update IPPool
     * @param {module:model/ModelsEIPPool} body The body
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} ippoolid The IPPoolId you want to update
     * @param {module:api/SubaccountippoolApi~iPPoolRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPPoolRouterUpdate(body, xSubAccountApiKey, ippoolid, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iPPoolRouterUpdate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling iPPoolRouterUpdate");
      }
      // verify the required parameter 'ippoolid' is set
      if (ippoolid === undefined || ippoolid === null) {
        throw new Error("Missing the required parameter 'ippoolid' when calling iPPoolRouterUpdate");
      }

      let pathParams = {
        'ippoolid': ippoolid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIPPool;

      return this.apiClient.callApi(
        '/subaccount/ippool/{ippoolid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}