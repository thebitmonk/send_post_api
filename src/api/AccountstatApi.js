/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsAGIPStat} from '../model/ModelsAGIPStat';
import {ModelsAGSubAccountStat} from '../model/ModelsAGSubAccountStat';
import {ModelsRStat} from '../model/ModelsRStat';
import {ModelsStat} from '../model/ModelsStat';

/**
* Accountstat service.
* @module api/AccountstatApi
* @version 1.0.0
*/
export class AccountstatApi {

    /**
    * Constructs a new AccountstatApi. 
    * @alias module:api/AccountstatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAccountStats operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Account Stats
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAccountStats(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAccountStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];

      return this.apiClient.callApi(
        '/account/stat/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountStatRouterGetAllAccountStatsByGroup operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Account Stats by Group
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {String} group the group whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAccountStatsByGroup(xAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling accountStatRouterGetAllAccountStatsByGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'group': group
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];

      return this.apiClient.callApi(
        '/account/stat/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateAccountStats operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAggregateAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAggregateAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAggregateAccountStats(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateAccountStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/account/stat/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateAccountStatsByGroup operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAggregateAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats by Group
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {String} group the group whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAggregateAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAggregateAccountStatsByGroup(xAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling accountStatRouterGetAllAggregateAccountStatsByGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'group': group
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/account/stat/aggregate/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateIPStats operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAggregateIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate IP Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterBy filterBy
     * @param {Number} opts.filterValue filterValue
     * @param {String} opts.orderBy orderBy
     * @param {String} opts.sortOrder sortOrder
     * @param {String} opts.search search term
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAggregateIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAggregateIPStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateIPStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': from,'to': to,'filterBy': opts['filterBy'],'filterValue': opts['filterValue'],'orderBy': opts['orderBy'],'sortOrder': opts['sortOrder'],'search': opts['search'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGIPStat];

      return this.apiClient.callApi(
        '/account/stat/aggregate/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateSubAccountStats operation.
     * @callback moduleapi/AccountstatApi~accountStatRouterGetAllAggregateSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGSubAccountStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate SubAccount Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterBy filterBy
     * @param {Number} opts.filterValue filterValue
     * @param {String} opts.orderBy orderBy
     * @param {String} opts.sortOrder sortOrder
     * @param {String} opts.search search term
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {module:api/AccountstatApi~accountStatRouterGetAllAggregateSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountStatRouterGetAllAggregateSubAccountStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': from,'to': to,'filterBy': opts['filterBy'],'filterValue': opts['filterValue'],'orderBy': opts['orderBy'],'sortOrder': opts['sortOrder'],'search': opts['search'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGSubAccountStat];

      return this.apiClient.callApi(
        '/account/stat/aggregate/subaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}