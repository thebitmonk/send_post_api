/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAGDomainStat from '../model/ModelsAGDomainStat';
import ModelsAGIPStat from '../model/ModelsAGIPStat';
import ModelsAGSubAccountStat from '../model/ModelsAGSubAccountStat';
import ModelsAGTPSPStat from '../model/ModelsAGTPSPStat';
import ModelsAccountCycleUsage from '../model/ModelsAccountCycleUsage';
import ModelsCountStat from '../model/ModelsCountStat';
import ModelsRStat from '../model/ModelsRStat';
import ModelsStat from '../model/ModelsStat';

/**
* AccountStat service.
* @module api/AccountStatApi
* @version 1.0.0
*/
export default class AccountStatApi {

    /**
    * Constructs a new AccountStatApi. 
    * @alias module:api/AccountStatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountStatRouterGetAccountCycleUsage operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAccountCycleUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAccountCycleUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with Account Processed Mails Stat
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountStatApi~accountStatRouterGetAccountCycleUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAccountCycleUsage}
     */
    accountStatRouterGetAccountCycleUsage(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAccountCycleUsage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsAccountCycleUsage;
      return this.apiClient.callApi(
        '/account/stat/cycleusage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAccountStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Account Stats
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRStat>}
     */
    accountStatRouterGetAllAccountStats(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAccountStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];
      return this.apiClient.callApi(
        '/account/stat/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAccountStatsByGroup operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Account Stats by Group
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {String} group the group whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRStat>}
     */
    accountStatRouterGetAllAccountStatsByGroup(xAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling accountStatRouterGetAllAccountStatsByGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'group': group
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];
      return this.apiClient.callApi(
        '/account/stat/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateAccountStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsStat}
     */
    accountStatRouterGetAllAggregateAccountStats(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateAccountStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateAccountStatsByGroup operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats by Group
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {String} group the group whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsStat}
     */
    accountStatRouterGetAllAggregateAccountStatsByGroup(xAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling accountStatRouterGetAllAggregateAccountStatsByGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'group': group
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateDomainStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateDomainStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGDomainStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Domain Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [orderBy] orderBy
     * @param {String} [sortOrder] sortOrder
     * @param {String} [search] search term
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateDomainStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGDomainStat>}
     */
    accountStatRouterGetAllAggregateDomainStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateDomainStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateDomainStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateDomainStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'orderBy': opts['orderBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGDomainStat];
      return this.apiClient.callApi(
        '/account/stat/aggregate/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateDomainStatsCount operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateDomainStatsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Domain Stats Count
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [search] search term
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateDomainStatsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    accountStatRouterGetAllAggregateDomainStatsCount(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateDomainStatsCount");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateDomainStatsCount");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateDomainStatsCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate/domain/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateIPStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGIPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate IP Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [limitBy] limitBy
     * @param {Number} [limitValue] limitValue
     * @param {String} [orderBy] orderBy
     * @param {String} [sortOrder] sortOrder
     * @param {String} [search] search term
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGIPStat>}
     */
    accountStatRouterGetAllAggregateIPStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateIPStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'limitBy': opts['limitBy'],
        'limitValue': opts['limitValue'],
        'orderBy': opts['orderBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGIPStat];
      return this.apiClient.callApi(
        '/account/stat/aggregate/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateIPStatsCount operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateIPStatsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate IP Stats Count
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [limitBy] limitBy
     * @param {Number} [limitValue] limitValue
     * @param {String} [search] search term
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateIPStatsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    accountStatRouterGetAllAggregateIPStatsCount(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateIPStatsCount");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateIPStatsCount");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateIPStatsCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'limitBy': opts['limitBy'],
        'limitValue': opts['limitValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate/ip/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateSubAccountStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGSubAccountStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate SubAccount Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [orderBy] orderBy
     * @param {String} [sortOrder] sortOrder
     * @param {String} [search] search term
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGSubAccountStat>}
     */
    accountStatRouterGetAllAggregateSubAccountStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateSubAccountStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'orderBy': opts['orderBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGSubAccountStat];
      return this.apiClient.callApi(
        '/account/stat/aggregate/subaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateSubAccountStatsCount operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateSubAccountStatsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate SubAccount Stats Count
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [search] search term
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateSubAccountStatsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    accountStatRouterGetAllAggregateSubAccountStatsCount(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateSubAccountStatsCount");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateSubAccountStatsCount");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateSubAccountStatsCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate/subaccount/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateThirdPartyProvidersStats operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateThirdPartyProvidersStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGTPSPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Third Party Providers Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [orderBy] orderBy
     * @param {String} [sortOrder] sortOrder
     * @param {String} [search] search term
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateThirdPartyProvidersStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAGTPSPStat>}
     */
    accountStatRouterGetAllAggregateThirdPartyProvidersStats(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStats");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStats");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'orderBy': opts['orderBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGTPSPStat];
      return this.apiClient.callApi(
        '/account/stat/aggregate/tpsp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountStatRouterGetAllAggregateThirdPartyProvidersStatsCount operation.
     * @callback module:api/AccountStatApi~accountStatRouterGetAllAggregateThirdPartyProvidersStatsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Third Party Providers Stats Count
     * @param {String} xAccountApiKey Account API Key
     * @param {String} from from date
     * @param {String} to to date
     * @param {Object} opts Optional parameters
     * @param {String} [filterBy] filterBy
     * @param {Number} [filterValue] filterValue
     * @param {String} [search] search term
     * @param {module:api/AccountStatApi~accountStatRouterGetAllAggregateThirdPartyProvidersStatsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    accountStatRouterGetAllAggregateThirdPartyProvidersStatsCount(xAccountApiKey, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStatsCount");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStatsCount");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling accountStatRouterGetAllAggregateThirdPartyProvidersStatsCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'filterBy': opts['filterBy'],
        'filterValue': opts['filterValue'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/stat/aggregate/tpsp/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
