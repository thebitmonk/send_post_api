/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsComment} from '../model/ModelsComment';
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsEComment} from '../model/ModelsEComment';
import {ModelsEIncident} from '../model/ModelsEIncident';
import {ModelsIncident} from '../model/ModelsIncident';

/**
* Accountincident service.
* @module api/AccountincidentApi
* @version 1.0.0
*/
export class AccountincidentApi {

    /**
    * Constructs a new AccountincidentApi. 
    * @alias module:api/AccountincidentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the incidentRouterAdd operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsComment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add comment to Incident
     * @param {module:model/ModelsEComment} body The Comment content
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} incidentId the incident id
     * @param {module:api/AccountincidentApi~incidentRouterAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterAdd(body, xAccountApiKey, incidentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling incidentRouterAdd");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterAdd");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling incidentRouterAdd");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsComment;

      return this.apiClient.callApi(
        '/account/incident/{incidentId}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterCount operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total Incidents
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status status
     * @param {Number} opts.tag status
     * @param {String} opts.search search term
     * @param {module:api/AccountincidentApi~incidentRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterCount(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'status': opts['status'],'tag': opts['tag'],'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/account/incident/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterCreate operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIncident{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Incident
     * @param {module:model/ModelsEIncident} body The Incident content
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountincidentApi~incidentRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterCreate(body, xAccountApiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling incidentRouterCreate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIncident;

      return this.apiClient.callApi(
        '/account/incident/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterGetAll operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIncident>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Incidents
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search term
     * @param {Number} opts.status status
     * @param {Number} opts.tag status
     * @param {module:api/AccountincidentApi~incidentRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterGetAll(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'search': opts['search'],'status': opts['status'],'tag': opts['tag']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIncident];

      return this.apiClient.callApi(
        '/account/incident/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterGetAllComments operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterGetAllCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsComment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Comments Associated with Incident
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} incidentId the IncidentId you want to get comments for
     * @param {module:api/AccountincidentApi~incidentRouterGetAllCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterGetAllComments(xAccountApiKey, incidentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetAllComments");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling incidentRouterGetAllComments");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsComment];

      return this.apiClient.callApi(
        '/account/incident/{incidentId}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterGetIncident operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterGetIncidentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIncident{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Incident by incidentId
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} incidentId the IncidentId you want to get
     * @param {module:api/AccountincidentApi~incidentRouterGetIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterGetIncident(xAccountApiKey, incidentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetIncident");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling incidentRouterGetIncident");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsIncident;

      return this.apiClient.callApi(
        '/account/incident/{incidentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidentRouterUpdate operation.
     * @callback moduleapi/AccountincidentApi~incidentRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIncident{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Incident
     * @param {module:model/ModelsEIncident} body The Incident content
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} incidentId the Incident Id you want to update
     * @param {module:api/AccountincidentApi~incidentRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidentRouterUpdate(body, xAccountApiKey, incidentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling incidentRouterUpdate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling incidentRouterUpdate");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling incidentRouterUpdate");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIncident;

      return this.apiClient.callApi(
        '/account/incident/{incidentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}