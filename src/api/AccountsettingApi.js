/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAccount from '../model/ModelsAccount';
import ModelsDedicatedIPs from '../model/ModelsDedicatedIPs';
import ModelsEAccountSetting from '../model/ModelsEAccountSetting';

/**
* AccountSetting service.
* @module api/AccountSettingApi
* @version 1.0.0
*/
export default class AccountSettingApi {

    /**
    * Constructs a new AccountSettingApi. 
    * @alias module:api/AccountSettingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountSettingRouterCheckDedicatedIPExist operation.
     * @callback module:api/AccountSettingApi~accountSettingRouterCheckDedicatedIPExistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDedicatedIPs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check if account has dedicated ip's
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountSettingApi~accountSettingRouterCheckDedicatedIPExistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsDedicatedIPs}
     */
    accountSettingRouterCheckDedicatedIPExist(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountSettingRouterCheckDedicatedIPExist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDedicatedIPs;
      return this.apiClient.callApi(
        '/account/setting/dedicated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountSettingRouterGetAccount operation.
     * @callback module:api/AccountSettingApi~accountSettingRouterGetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get latest account details
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountSettingApi~accountSettingRouterGetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAccount}
     */
    accountSettingRouterGetAccount(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountSettingRouterGetAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsAccount;
      return this.apiClient.callApi(
        '/account/setting/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountSettingRouterUpdate operation.
     * @callback module:api/AccountSettingApi~accountSettingRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update account settings
     * @param {String} xAccountApiKey Account API Key
     * @param {module:model/ModelsEAccountSetting} body The account settings to be updated
     * @param {module:api/AccountSettingApi~accountSettingRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAccount}
     */
    accountSettingRouterUpdate(xAccountApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountSettingRouterUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountSettingRouterUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAccount;
      return this.apiClient.callApi(
        '/account/setting/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
