/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsQEmailMessage} from '../model/ModelsQEmailMessage';
import {ModelsQEvent} from '../model/ModelsQEvent';

/**
* Accountmessage service.
* @module api/AccountmessageApi
* @version 1.0.0
*/
export class AccountmessageApi {

    /**
    * Constructs a new AccountmessageApi. 
    * @alias module:api/AccountmessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the messageRouterGet operation.
     * @callback moduleapi/AccountmessageApi~messageRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsQEmailMessage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Message By Id
     * @param {String} xAccountApiKey Sub-Account API Key
     * @param {String} messageId the messageId that you want to retrieve
     * @param {module:api/AccountmessageApi~messageRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messageRouterGet(xAccountApiKey, messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling messageRouterGet");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messageRouterGet");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsQEmailMessage;

      return this.apiClient.callApi(
        '/account/message/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messageRouterGetAllEventsForAMessageId operation.
     * @callback moduleapi/AccountmessageApi~messageRouterGetAllEventsForAMessageIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all events associated with a message id
     * @param {String} xAccountApiKey Account API Key
     * @param {String} messageId the messageId that you want to retrieve
     * @param {module:api/AccountmessageApi~messageRouterGetAllEventsForAMessageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messageRouterGetAllEventsForAMessageId(xAccountApiKey, messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetAllEventsForAMessageId");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messageRouterGetAllEventsForAMessageId");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];

      return this.apiClient.callApi(
        '/account/message/{messageId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messageRouterGetAllEventsForAMessageIdFromANode operation.
     * @callback moduleapi/AccountmessageApi~messageRouterGetAllEventsForAMessageIdFromANodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all message events associated with a message id from a specific node
     * @param {String} xAccountApiKey Account API Key
     * @param {String} messageId the messageId that you want to retrieve
     * @param {module:api/AccountmessageApi~messageRouterGetAllEventsForAMessageIdFromANodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messageRouterGetAllEventsForAMessageIdFromANode(xAccountApiKey, messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetAllEventsForAMessageIdFromANode");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messageRouterGetAllEventsForAMessageIdFromANode");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];

      return this.apiClient.callApi(
        '/account/message/node/{messageId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messageRouterGetMessageFromNode operation.
     * @callback moduleapi/AccountmessageApi~messageRouterGetMessageFromNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsQEmailMessage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Message from node by specific Id
     * @param {String} xAccountApiKey Account API Key
     * @param {String} messageId the messageId that you want to retrieve
     * @param {module:api/AccountmessageApi~messageRouterGetMessageFromNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messageRouterGetMessageFromNode(xAccountApiKey, messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetMessageFromNode");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messageRouterGetMessageFromNode");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsQEmailMessage;

      return this.apiClient.callApi(
        '/account/message/node/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}