/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsDeleteResponse from '../model/ModelsDeleteResponse';
import ModelsEMember from '../model/ModelsEMember';
import ModelsMember from '../model/ModelsMember';
import ModelsVerifyByMemberTokenRequest from '../model/ModelsVerifyByMemberTokenRequest';

/**
* AccountMember service.
* @module api/AccountMemberApi
* @version 1.0.0
*/
export default class AccountMemberApi {

    /**
    * Constructs a new AccountMemberApi. 
    * @alias module:api/AccountMemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the memberRouterDelete operation.
     * @callback module:api/AccountMemberApi~memberRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Member
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} memberId The MemberId you want to delete
     * @param {module:api/AccountMemberApi~memberRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsDeleteResponse}
     */
    memberRouterDelete(xAccountApiKey, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling memberRouterDelete");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberRouterDelete");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;
      return this.apiClient.callApi(
        '/account/member/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberRouterGet operation.
     * @callback module:api/AccountMemberApi~memberRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Member by MemberId
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} memberId the MemberId you want to get
     * @param {module:api/AccountMemberApi~memberRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsMember}
     */
    memberRouterGet(xAccountApiKey, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling memberRouterGet");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberRouterGet");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsMember;
      return this.apiClient.callApi(
        '/account/member/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberRouterGetAll operation.
     * @callback module:api/AccountMemberApi~memberRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsMember>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Members
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountMemberApi~memberRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsMember>}
     */
    memberRouterGetAll(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling memberRouterGetAll");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsMember];
      return this.apiClient.callApi(
        '/account/member/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberRouterUpdate operation.
     * @callback module:api/AccountMemberApi~memberRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Member
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} memberId The MemberId you want to update
     * @param {module:model/ModelsEMember} body The body
     * @param {module:api/AccountMemberApi~memberRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsMember}
     */
    memberRouterUpdate(xAccountApiKey, memberId, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling memberRouterUpdate");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberRouterUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling memberRouterUpdate");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsMember;
      return this.apiClient.callApi(
        '/account/member/{memberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberRouterVerifyByEmailRequest operation.
     * @callback module:api/AccountMemberApi~memberRouterVerifyByEmailRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Member By Email Request
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} memberId the MemberId who is inviting new member to join the account
     * @param {module:model/ModelsVerifyByMemberTokenRequest} body The Email to be used to verify
     * @param {module:api/AccountMemberApi~memberRouterVerifyByEmailRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memberRouterVerifyByEmailRequest(xAccountApiKey, memberId, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling memberRouterVerifyByEmailRequest");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberRouterVerifyByEmailRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling memberRouterVerifyByEmailRequest");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/member/{memberId}/verify/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
