/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsEIntegration} from '../model/ModelsEIntegration';
import {ModelsIntegration} from '../model/ModelsIntegration';
import {ModelsRGlockappsMonitorStat} from '../model/ModelsRGlockappsMonitorStat';
import {ModelsResponse} from '../model/ModelsResponse';

/**
* Accountintegration service.
* @module api/AccountintegrationApi
* @version 1.0.0
*/
export class AccountintegrationApi {

    /**
    * Constructs a new AccountintegrationApi. 
    * @alias module:api/AccountintegrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the accountIntegrationRouterCount operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total AccountIntegrations
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterCount(xAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/account/integration/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterCreate operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIntegration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Integration
     * @param {module:model/ModelsEIntegration} body The Integration content
     * @param {String} xAccountApiKey Account API Key
     * @param {String} itype The integration type you want to create
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterCreate(body, xAccountApiKey, itype, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountIntegrationRouterCreate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterCreate");
      }
      // verify the required parameter 'itype' is set
      if (itype === undefined || itype === null) {
        throw new Error("Missing the required parameter 'itype' when calling accountIntegrationRouterCreate");
      }

      let pathParams = {
        'itype': itype
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIntegration;

      return this.apiClient.callApi(
        '/account/integration/{itype}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterDelete operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Integration
     * @param {String} xAccountApiKey Account API Key
     * @param {String} itype The integration type you want to update
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterDelete(xAccountApiKey, itype, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterDelete");
      }
      // verify the required parameter 'itype' is set
      if (itype === undefined || itype === null) {
        throw new Error("Missing the required parameter 'itype' when calling accountIntegrationRouterDelete");
      }

      let pathParams = {
        'itype': itype
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/account/integration/{itype}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterDisableGlockappsIPMonitoring operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterDisableGlockappsIPMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable IP Monitoring for a single IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to disable monitoring for
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterDisableGlockappsIPMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterDisableGlockappsIPMonitoring(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterDisableGlockappsIPMonitoring");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling accountIntegrationRouterDisableGlockappsIPMonitoring");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/account/integration/glockapps/monitor/{ipid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterEnableGlockappsIPMonitoring operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterEnableGlockappsIPMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable IP Monitoring for a single IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to enable monitoring for
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterEnableGlockappsIPMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterEnableGlockappsIPMonitoring(xAccountApiKey, ipid, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterEnableGlockappsIPMonitoring");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling accountIntegrationRouterEnableGlockappsIPMonitoring");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsResponse;

      return this.apiClient.callApi(
        '/account/integration/glockapps/monitor/{ipid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterGetAll operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsIntegration>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Integrations
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterGetAll(xAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsIntegration];

      return this.apiClient.callApi(
        '/account/integration/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterGetMonitoredIPStats operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterGetMonitoredIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRGlockappsMonitorStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Monitored IP Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId for which you want monitored stats
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterGetMonitoredIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterGetMonitoredIPStats(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterGetMonitoredIPStats");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling accountIntegrationRouterGetMonitoredIPStats");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRGlockappsMonitorStat];

      return this.apiClient.callApi(
        '/account/integration/glockapps/monitor/stat/{ipid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the accountIntegrationRouterUpdate operation.
     * @callback moduleapi/AccountintegrationApi~accountIntegrationRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIntegration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Integration
     * @param {module:model/ModelsEIntegration} body The Integration content
     * @param {String} xAccountApiKey Account API Key
     * @param {String} itype The integration type you want to update
     * @param {module:api/AccountintegrationApi~accountIntegrationRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    accountIntegrationRouterUpdate(body, xAccountApiKey, itype, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountIntegrationRouterUpdate");
      }
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterUpdate");
      }
      // verify the required parameter 'itype' is set
      if (itype === undefined || itype === null) {
        throw new Error("Missing the required parameter 'itype' when calling accountIntegrationRouterUpdate");
      }

      let pathParams = {
        'itype': itype
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsIntegration;

      return this.apiClient.callApi(
        '/account/integration/{itype}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}