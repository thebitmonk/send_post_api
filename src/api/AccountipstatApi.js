/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsPIPStat} from '../model/ModelsPIPStat';
import {ModelsRIPStat} from '../model/ModelsRIPStat';
import {ModelsSIPStat} from '../model/ModelsSIPStat';
import {ModelsStat} from '../model/ModelsStat';

/**
* Accountipstat service.
* @module api/AccountipstatApi
* @version 1.0.0
*/
export class AccountipstatApi {

    /**
    * Constructs a new AccountipstatApi. 
    * @alias module:api/AccountipstatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregateIPStats operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllAggregateIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {String} opts.provider the provider whose stats you want
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllAggregateIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllAggregateIPStats(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregateIPStats");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregateIPStatsByProvider operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllAggregateIPStatsByProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats by Provider
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {String} opts.provider the provider whose stats you want
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllAggregateIPStatsByProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllAggregateIPStatsByProvider(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregateIPStatsByProvider");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregateIPStatsByProvider");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregatedProviderStatsForAIP operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllAggregatedProviderStatsForAIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllAggregatedProviderStatsForAIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllAggregatedProviderStatsForAIP(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPIPStat];

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Number} sid the Sub Account Id you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP(xAccountApiKey, ipid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP");
      }

      let pathParams = {
        'ipid': ipid,'sid': sid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPIPStat];

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/sid/{sid}/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregatedSubAccountStatsForAnIP operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsSIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Sub-Account Stats for an IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {String} opts.provider the provider whose stats you want
     * @param {String} opts.sortBy the sorting order
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllAggregatedSubAccountStatsForAnIP(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'provider': opts['provider'],'sortBy': opts['sortBy']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsSIPStat];

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/subaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the iPStatRouterGetAllIPStats operation.
     * @callback moduleapi/AccountipstatApi~iPStatRouterGetAllIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IP Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {String} opts.provider the provider whose stats you want
     * @param {module:api/AccountipstatApi~iPStatRouterGetAllIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    iPStatRouterGetAllIPStats(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllIPStats");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllIPStats");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRIPStat];

      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}