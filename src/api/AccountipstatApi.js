/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAPStat from '../model/ModelsAPStat';
import ModelsASStat from '../model/ModelsASStat';
import ModelsRIPStat from '../model/ModelsRIPStat';
import ModelsStat from '../model/ModelsStat';

/**
* AccountIpStat service.
* @module api/AccountIpStatApi
* @version 1.0.0
*/
export default class AccountIpStatApi {

    /**
    * Constructs a new AccountIpStatApi. 
    * @alias module:api/AccountIpStatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregateIPStats operation.
     * @callback module:api/AccountIpStatApi~iPStatRouterGetAllAggregateIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {module:api/AccountIpStatApi~iPStatRouterGetAllAggregateIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsStat}
     */
    iPStatRouterGetAllAggregateIPStats(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregateIPStats");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregateIPStats");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;
      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregatedProviderStatsForAIP operation.
     * @callback module:api/AccountIpStatApi~iPStatRouterGetAllAggregatedProviderStatsForAIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountIpStatApi~iPStatRouterGetAllAggregatedProviderStatsForAIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAPStat>}
     */
    iPStatRouterGetAllAggregatedProviderStatsForAIP(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAPStat];
      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPStatRouterGetAllAggregatedSubAccountStatsForAnIP operation.
     * @callback module:api/AccountIpStatApi~iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsASStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Sub-Account Stats for an IP
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {String} [sortBy] the sorting order
     * @param {module:api/AccountIpStatApi~iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsASStat>}
     */
    iPStatRouterGetAllAggregatedSubAccountStatsForAnIP(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsASStat];
      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}/aggregate/subaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPStatRouterGetAllIPStats operation.
     * @callback module:api/AccountIpStatApi~iPStatRouterGetAllIPStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRIPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IP Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {module:api/AccountIpStatApi~iPStatRouterGetAllIPStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRIPStat>}
     */
    iPStatRouterGetAllIPStats(xAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllIPStats");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling iPStatRouterGetAllIPStats");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRIPStat];
      return this.apiClient.callApi(
        '/account/ip/stat/{ipid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
