/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsCountStat} from '../model/ModelsCountStat';
import {ModelsDeleteResponse} from '../model/ModelsDeleteResponse';
import {ModelsESender} from '../model/ModelsESender';
import {ModelsSender} from '../model/ModelsSender';

/**
* Subaccountsender service.
* @module api/SubaccountsenderApi
* @version 1.0.0
*/
export class SubaccountsenderApi {

    /**
    * Constructs a new SubaccountsenderApi. 
    * @alias module:api/SubaccountsenderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the senderRouterCount operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total Senders
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountsenderApi~senderRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterCount(xSubAccountApiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterCount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;

      return this.apiClient.callApi(
        '/subaccount/sender/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the senderRouterCreate operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsSender{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sender
     * @param {module:model/ModelsESender} body The Sender content
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {module:api/SubaccountsenderApi~senderRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterCreate(body, xSubAccountApiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling senderRouterCreate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsSender;

      return this.apiClient.callApi(
        '/subaccount/sender/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the senderRouterDelete operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sender
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} senderId The SenderId you want to delete
     * @param {module:api/SubaccountsenderApi~senderRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterDelete(xSubAccountApiKey, senderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterDelete");
      }
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling senderRouterDelete");
      }

      let pathParams = {
        'senderId': senderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;

      return this.apiClient.callApi(
        '/subaccount/sender/{senderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the senderRouterGet operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsSender{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Sender by SenderId
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} senderId the SenderId you want to get
     * @param {module:api/SubaccountsenderApi~senderRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterGet(xSubAccountApiKey, senderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterGet");
      }
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling senderRouterGet");
      }

      let pathParams = {
        'senderId': senderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsSender;

      return this.apiClient.callApi(
        '/subaccount/sender/{senderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the senderRouterGetAll operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsSender>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Senders
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search term
     * @param {module:api/SubaccountsenderApi~senderRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterGetAll(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterGetAll");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset'],'limit': opts['limit'],'search': opts['search']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsSender];

      return this.apiClient.callApi(
        '/subaccount/sender/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the senderRouterUpdate operation.
     * @callback moduleapi/SubaccountsenderApi~senderRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsSender{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sender
     * @param {module:model/ModelsESender} body The body
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} senderId The SenderId you want to update
     * @param {module:api/SubaccountsenderApi~senderRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    senderRouterUpdate(body, xSubAccountApiKey, senderId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling senderRouterUpdate");
      }
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling senderRouterUpdate");
      }
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling senderRouterUpdate");
      }

      let pathParams = {
        'senderId': senderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsSender;

      return this.apiClient.callApi(
        '/subaccount/sender/{senderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}