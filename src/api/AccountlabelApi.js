/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsCountStat from '../model/ModelsCountStat';
import ModelsDeleteResponse from '../model/ModelsDeleteResponse';
import ModelsLabel from '../model/ModelsLabel';

/**
* AccountLabel service.
* @module api/AccountLabelApi
* @version 1.0.0
*/
export default class AccountLabelApi {

    /**
    * Constructs a new AccountLabelApi. 
    * @alias module:api/AccountLabelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the labelRouterCount operation.
     * @callback module:api/AccountLabelApi~labelRouterCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count Total Labels
     * @param {String} xAccountApiKey Account API Key
     * @param {String} type get all labels type
     * @param {module:api/AccountLabelApi~labelRouterCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    labelRouterCount(xAccountApiKey, type, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterCount");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling labelRouterCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/label/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labelRouterCreate operation.
     * @callback module:api/AccountLabelApi~labelRouterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsLabel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Label
     * @param {String} xAccountApiKey Account API Key
     * @param {module:model/ModelsLabel} body The Label content
     * @param {module:api/AccountLabelApi~labelRouterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsLabel}
     */
    labelRouterCreate(xAccountApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling labelRouterCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsLabel;
      return this.apiClient.callApi(
        '/account/label/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labelRouterDelete operation.
     * @callback module:api/AccountLabelApi~labelRouterDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Label
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} labelId The LabelId you want to delete
     * @param {module:api/AccountLabelApi~labelRouterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsDeleteResponse}
     */
    labelRouterDelete(xAccountApiKey, labelId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterDelete");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling labelRouterDelete");
      }

      let pathParams = {
        'labelId': labelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsDeleteResponse;
      return this.apiClient.callApi(
        '/account/label/{labelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labelRouterGet operation.
     * @callback module:api/AccountLabelApi~labelRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsLabel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Label by LabelId
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} labelId the LabelId you want to get
     * @param {module:api/AccountLabelApi~labelRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsLabel}
     */
    labelRouterGet(xAccountApiKey, labelId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterGet");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling labelRouterGet");
      }

      let pathParams = {
        'labelId': labelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsLabel;
      return this.apiClient.callApi(
        '/account/label/{labelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labelRouterGetAll operation.
     * @callback module:api/AccountLabelApi~labelRouterGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsLabel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Labels
     * @param {String} xAccountApiKey Account API Key
     * @param {String} type get all labels type
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [search] search term
     * @param {module:api/AccountLabelApi~labelRouterGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsLabel>}
     */
    labelRouterGetAll(xAccountApiKey, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterGetAll");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling labelRouterGetAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsLabel];
      return this.apiClient.callApi(
        '/account/label/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labelRouterUpdate operation.
     * @callback module:api/AccountLabelApi~labelRouterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsLabel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Label
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} labelId The LabelId you want to update
     * @param {module:model/ModelsLabel} body The body
     * @param {module:api/AccountLabelApi~labelRouterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsLabel}
     */
    labelRouterUpdate(xAccountApiKey, labelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling labelRouterUpdate");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling labelRouterUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling labelRouterUpdate");
      }

      let pathParams = {
        'labelId': labelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsLabel;
      return this.apiClient.callApi(
        '/account/label/{labelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
