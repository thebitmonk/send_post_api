/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsAllClusterCache} from '../model/ModelsAllClusterCache';
import {ModelsClusterCache} from '../model/ModelsClusterCache';
import {ModelsSuppression} from '../model/ModelsSuppression';

/**
* Cluster service.
* @module api/ClusterApi
* @version 1.0.0
*/
export class ClusterApi {

    /**
    * Constructs a new ClusterApi. 
    * @alias module:api/ClusterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the clusterRouterAddItemsToSuppressionFilterOfEveryNodeInCluster operation.
     * @callback moduleapi/ClusterApi~clusterRouterAddItemsToSuppressionFilterOfEveryNodeInClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add items to suppression filter of every node in cluster
     * @param {module:model/ModelsSuppression} body Add suppressions to suppression filter
     * @param {module:api/ClusterApi~clusterRouterAddItemsToSuppressionFilterOfEveryNodeInClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clusterRouterAddItemsToSuppressionFilterOfEveryNodeInCluster(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling clusterRouterAddItemsToSuppressionFilterOfEveryNodeInCluster");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cluster/suppression/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clusterRouterDeleteItemFromCacheOfEveryNodeInCluster operation.
     * @callback moduleapi/ClusterApi~clusterRouterDeleteItemFromCacheOfEveryNodeInClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete item from cache of every node in cluster
     * @param {String} xSystemApiKey System API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.name cache name
     * @param {String} opts.key cache item key to delete
     * @param {module:api/ClusterApi~clusterRouterDeleteItemFromCacheOfEveryNodeInClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clusterRouterDeleteItemFromCacheOfEveryNodeInCluster(xSystemApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSystemApiKey' is set
      if (xSystemApiKey === undefined || xSystemApiKey === null) {
        throw new Error("Missing the required parameter 'xSystemApiKey' when calling clusterRouterDeleteItemFromCacheOfEveryNodeInCluster");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'key': opts['key']
      };
      let headerParams = {
        'X-System-ApiKey': xSystemApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cluster/cache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clusterRouterDeleteItemsFromSuppressionFilterOfEveryNodeInCluster operation.
     * @callback moduleapi/ClusterApi~clusterRouterDeleteItemsFromSuppressionFilterOfEveryNodeInClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete items from suppression filter of every node in cluster
     * @param {module:model/ModelsSuppression} body Delete suppressions from suppression filter
     * @param {module:api/ClusterApi~clusterRouterDeleteItemsFromSuppressionFilterOfEveryNodeInClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clusterRouterDeleteItemsFromSuppressionFilterOfEveryNodeInCluster(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling clusterRouterDeleteItemsFromSuppressionFilterOfEveryNodeInCluster");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cluster/suppression/filter', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clusterRouterGetItemFromCacheOfEveryNodeInCluster operation.
     * @callback moduleapi/ClusterApi~clusterRouterGetItemFromCacheOfEveryNodeInClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAllClusterCache{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item from cache of every node in cluster
     * @param {String} xSystemApiKey System API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.name cache name
     * @param {String} opts.key cache item key to delete
     * @param {module:api/ClusterApi~clusterRouterGetItemFromCacheOfEveryNodeInClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    clusterRouterGetItemFromCacheOfEveryNodeInCluster(xSystemApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSystemApiKey' is set
      if (xSystemApiKey === undefined || xSystemApiKey === null) {
        throw new Error("Missing the required parameter 'xSystemApiKey' when calling clusterRouterGetItemFromCacheOfEveryNodeInCluster");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'key': opts['key']
      };
      let headerParams = {
        'X-System-ApiKey': xSystemApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsAllClusterCache;

      return this.apiClient.callApi(
        '/cluster/cache', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clusterRouterGetItemFromCacheOfSpecificNodeInCluster operation.
     * @callback moduleapi/ClusterApi~clusterRouterGetItemFromCacheOfSpecificNodeInClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsClusterCache{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete item from cache of specific node in cluster
     * @param {String} xSystemApiKey System API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.name cache name
     * @param {String} opts.key cache item key to delete
     * @param {module:api/ClusterApi~clusterRouterGetItemFromCacheOfSpecificNodeInClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    clusterRouterGetItemFromCacheOfSpecificNodeInCluster(xSystemApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSystemApiKey' is set
      if (xSystemApiKey === undefined || xSystemApiKey === null) {
        throw new Error("Missing the required parameter 'xSystemApiKey' when calling clusterRouterGetItemFromCacheOfSpecificNodeInCluster");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'key': opts['key']
      };
      let headerParams = {
        'X-System-ApiKey': xSystemApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsClusterCache;

      return this.apiClient.callApi(
        '/cluster/cache/node', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clusterRouterGetItemFromCacheOfSpecificNodeInCluster_0 operation.
     * @callback moduleapi/ClusterApi~clusterRouterGetItemFromCacheOfSpecificNodeInCluster_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item from cache of specific node in cluster
     * @param {String} xSystemApiKey System API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.name cache name
     * @param {String} opts.key cache item key to delete
     * @param {module:api/ClusterApi~clusterRouterGetItemFromCacheOfSpecificNodeInCluster_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    clusterRouterGetItemFromCacheOfSpecificNodeInCluster_0(xSystemApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSystemApiKey' is set
      if (xSystemApiKey === undefined || xSystemApiKey === null) {
        throw new Error("Missing the required parameter 'xSystemApiKey' when calling clusterRouterGetItemFromCacheOfSpecificNodeInCluster_0");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'key': opts['key']
      };
      let headerParams = {
        'X-System-ApiKey': xSystemApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cluster/cache/node', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}