/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsBillingPortalSession from '../model/ModelsBillingPortalSession';
import ModelsCountry from '../model/ModelsCountry';
import ModelsCoupon from '../model/ModelsCoupon';
import ModelsCouponOptions from '../model/ModelsCouponOptions';
import ModelsPaymentAddress from '../model/ModelsPaymentAddress';
import ModelsPaymentOptions from '../model/ModelsPaymentOptions';
import ModelsPaymentStatus from '../model/ModelsPaymentStatus';
import ModelsPricing from '../model/ModelsPricing';
import ModelsTaxDetails from '../model/ModelsTaxDetails';

/**
* AccountPayment service.
* @module api/AccountPaymentApi
* @version 1.0.0
*/
export default class AccountPaymentApi {

    /**
    * Constructs a new AccountPaymentApi. 
    * @alias module:api/AccountPaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the paymentRouterApplyCouponToStripeCustomer operation.
     * @callback module:api/AccountPaymentApi~paymentRouterApplyCouponToStripeCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply Coupon to Stripe Customer
     * @param {String} xAccountApiKey Account API Key
     * @param {module:model/ModelsCouponOptions} body Coupon Code Options
     * @param {module:api/AccountPaymentApi~paymentRouterApplyCouponToStripeCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentRouterApplyCouponToStripeCustomer(xAccountApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling paymentRouterApplyCouponToStripeCustomer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentRouterApplyCouponToStripeCustomer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/payment/customer/coupon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterCreateCustomerPortal operation.
     * @callback module:api/AccountPaymentApi~paymentRouterCreateCustomerPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsBillingPortalSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Customer Portal for account
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountPaymentApi~paymentRouterCreateCustomerPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsBillingPortalSession}
     */
    paymentRouterCreateCustomerPortal(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling paymentRouterCreateCustomerPortal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsBillingPortalSession;
      return this.apiClient.callApi(
        '/account/payment/portal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterCreatePaymentSubscription operation.
     * @callback module:api/AccountPaymentApi~paymentRouterCreatePaymentSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsPaymentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Payment Subscription for Stripe
     * @param {String} xAccountApiKey Account API Key
     * @param {module:model/ModelsPaymentOptions} body PaymentOptions content
     * @param {module:api/AccountPaymentApi~paymentRouterCreatePaymentSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsPaymentStatus}
     */
    paymentRouterCreatePaymentSubscription(xAccountApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling paymentRouterCreatePaymentSubscription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentRouterCreatePaymentSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsPaymentStatus;
      return this.apiClient.callApi(
        '/account/payment/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterGetAllCountries operation.
     * @callback module:api/AccountPaymentApi~paymentRouterGetAllCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsCountry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with slice of all countries
     * @param {module:api/AccountPaymentApi~paymentRouterGetAllCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsCountry>}
     */
    paymentRouterGetAllCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsCountry];
      return this.apiClient.callApi(
        '/account/payment/pricing/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterGetCouponCodes operation.
     * @callback module:api/AccountPaymentApi~paymentRouterGetCouponCodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsCoupon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with slice of coupon codes
     * @param {module:api/AccountPaymentApi~paymentRouterGetCouponCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsCoupon>}
     */
    paymentRouterGetCouponCodes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsCoupon];
      return this.apiClient.callApi(
        '/account/payment/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterGetPricingPlans operation.
     * @callback module:api/AccountPaymentApi~paymentRouterGetPricingPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPricing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with slice of pricing plans
     * @param {module:api/AccountPaymentApi~paymentRouterGetPricingPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsPricing>}
     */
    paymentRouterGetPricingPlans(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPricing];
      return this.apiClient.callApi(
        '/account/payment/pricing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterGetTaxRateByAddress operation.
     * @callback module:api/AccountPaymentApi~paymentRouterGetTaxRateByAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsTaxDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with tax details
     * @param {module:model/ModelsPaymentAddress} body Address parameters
     * @param {module:api/AccountPaymentApi~paymentRouterGetTaxRateByAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsTaxDetails}
     */
    paymentRouterGetTaxRateByAddress(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentRouterGetTaxRateByAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsTaxDetails;
      return this.apiClient.callApi(
        '/account/payment/tax/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterGetTaxRateByIP operation.
     * @callback module:api/AccountPaymentApi~paymentRouterGetTaxRateByIPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsTaxDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds back with tax details
     * @param {module:api/AccountPaymentApi~paymentRouterGetTaxRateByIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsTaxDetails}
     */
    paymentRouterGetTaxRateByIP(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsTaxDetails;
      return this.apiClient.callApi(
        '/account/payment/tax/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentRouterHandlePaymentWebhook operation.
     * @callback module:api/AccountPaymentApi~paymentRouterHandlePaymentWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Payment Related Webhooks
     * @param {module:api/AccountPaymentApi~paymentRouterHandlePaymentWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentRouterHandlePaymentWebhook(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/payment/webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
