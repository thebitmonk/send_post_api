/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsAPStat from '../model/ModelsAPStat';
import ModelsASStat from '../model/ModelsASStat';
import ModelsRIPStat from '../model/ModelsRIPStat';
import ModelsStat from '../model/ModelsStat';

/**
* AccountTpspStat service.
* @module api/AccountTpspStatApi
* @version 1.0.0
*/
export default class AccountTpspStatApi {

    /**
    * Constructs a new AccountTpspStatApi. 
    * @alias module:api/AccountTpspStatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStats operation.
     * @callback module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspid the tpspId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsStat}
     */
    thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStats(xAccountApiKey, tpspid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStats");
      }
      // verify the required parameter 'tpspid' is set
      if (tpspid === undefined || tpspid === null) {
        throw new Error("Missing the required parameter 'tpspid' when calling thirdPartyProviderStatRouterGetAllAggregateThirdPartyProvidersStats");
      }

      let pathParams = {
        'tpspid': tpspid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;
      return this.apiClient.callApi(
        '/account/tpsp/stat/{tpspid}/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProvider operation.
     * @callback module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProviderCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a Third Party Provider
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspid the tpspId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsAPStat>}
     */
    thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProvider(xAccountApiKey, tpspid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProvider");
      }
      // verify the required parameter 'tpspid' is set
      if (tpspid === undefined || tpspid === null) {
        throw new Error("Missing the required parameter 'tpspid' when calling thirdPartyProviderStatRouterGetAllAggregatedProviderStatsForAThirdPartyProvider");
      }

      let pathParams = {
        'tpspid': tpspid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAPStat];
      return this.apiClient.callApi(
        '/account/tpsp/stat/{tpspid}/aggregate/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProvider operation.
     * @callback module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProviderCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsASStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Sub-Account Stats for an Third Party Provider
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspid the TPSPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {String} [sortBy] the sorting order
     * @param {module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsASStat>}
     */
    thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProvider(xAccountApiKey, tpspid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProvider");
      }
      // verify the required parameter 'tpspid' is set
      if (tpspid === undefined || tpspid === null) {
        throw new Error("Missing the required parameter 'tpspid' when calling thirdPartyProviderStatRouterGetAllAggregatedSubAccountStatsForAnThirdPartyProvider");
      }

      let pathParams = {
        'tpspid': tpspid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsASStat];
      return this.apiClient.callApi(
        '/account/tpsp/stat/{tpspid}/aggregate/subaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyProviderStatRouterGetAllThirdPartyProvidersStats operation.
     * @callback module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllThirdPartyProvidersStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRIPStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Third Party Providers Stats
     * @param {String} xAccountApiKey Account API Key
     * @param {Number} tpspid the tpspId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [provider] the provider whose stats you want
     * @param {module:api/AccountTpspStatApi~thirdPartyProviderStatRouterGetAllThirdPartyProvidersStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRIPStat>}
     */
    thirdPartyProviderStatRouterGetAllThirdPartyProvidersStats(xAccountApiKey, tpspid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling thirdPartyProviderStatRouterGetAllThirdPartyProvidersStats");
      }
      // verify the required parameter 'tpspid' is set
      if (tpspid === undefined || tpspid === null) {
        throw new Error("Missing the required parameter 'tpspid' when calling thirdPartyProviderStatRouterGetAllThirdPartyProvidersStats");
      }

      let pathParams = {
        'tpspid': tpspid
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'provider': opts['provider']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRIPStat];
      return this.apiClient.callApi(
        '/account/tpsp/stat/{tpspid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
