/*
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelsAGStat} from '../model/ModelsAGStat';
import {ModelsAIPStat} from '../model/ModelsAIPStat';
import {ModelsPIPStat} from '../model/ModelsPIPStat';
import {ModelsRStat} from '../model/ModelsRStat';
import {ModelsStat} from '../model/ModelsStat';

/**
* Subaccountstat service.
* @module api/SubaccountstatApi
* @version 1.0.0
*/
export class SubaccountstatApi {

    /**
    * Constructs a new SubaccountstatApi. 
    * @alias module:api/SubaccountstatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregateSubAccountStats operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregateSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Sub-Account Stats
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregateSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregateSubAccountStats(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregateSubAccountStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregateSubAccountStatsByGroup operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregateSubAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsStat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregate Sub-Account Stats by Group
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {String} group the group whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregateSubAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregateSubAccountStatsByGroup(xSubAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'group': group
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsStat;

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAGStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Group Stats for a Sub-Account
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAGStat];

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedIPStatsForASubAccount operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsAIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated IP Stats for a Sub-Account
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregatedIPStatsForASubAccount(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedIPStatsForASubAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsAIPStat];

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate/ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Number} ipid the IPId you want to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount(xSubAccountApiKey, ipid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount");
      }
      // verify the required parameter 'ipid' is set
      if (ipid === undefined || ipid === null) {
        throw new Error("Missing the required parameter 'ipid' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount");
      }

      let pathParams = {
        'ipid': ipid
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPIPStat];

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate/ip/{ipid}/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPIPStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Aggregated Provider Stats for a Sub-Account
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPIPStat];

      return this.apiClient.callApi(
        '/subaccount/stat/aggregate/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllSubAccountStats operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllSubAccountStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Sub-Account Stats
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllSubAccountStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllSubAccountStats(xSubAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllSubAccountStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];

      return this.apiClient.callApi(
        '/subaccount/stat/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subAccountStatRouterGetAllSubAccountStatsByGroup operation.
     * @callback moduleapi/SubaccountstatApi~subAccountStatRouterGetAllSubAccountStatsByGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRStat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Sub-Account Stats by Group
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {String} group the tag whose stats you want
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @param {module:api/SubaccountstatApi~subAccountStatRouterGetAllSubAccountStatsByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subAccountStatRouterGetAllSubAccountStatsByGroup(xSubAccountApiKey, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllSubAccountStatsByGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling subAccountStatRouterGetAllSubAccountStatsByGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': opts['from'],'to': opts['to'],'group': group
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRStat];

      return this.apiClient.callApi(
        '/subaccount/stat/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}