/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsCountStat from '../model/ModelsCountStat';
import ModelsQEvent from '../model/ModelsQEvent';

/**
* AccountEvent service.
* @module api/AccountEventApi
* @version 1.0.0
*/
export default class AccountEventApi {

    /**
    * Constructs a new AccountEventApi. 
    * @alias module:api/AccountEventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventRouterCountAllEventsFromAAccountForAGivenTimeRange operation.
     * @callback module:api/AccountEventApi~eventRouterCountAllEventsFromAAccountForAGivenTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count all events from a account for a given time-range
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [search] search term
     * @param {String} [type] search type
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [source] data source from which to get timestamp keys subaccount or ip
     * @param {String} [sourceId] source id from which to get timestamp keys subaccount or ip
     * @param {module:api/AccountEventApi~eventRouterCountAllEventsFromAAccountForAGivenTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    eventRouterCountAllEventsFromAAccountForAGivenTimeRange(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterCountAllEventsFromAAccountForAGivenTimeRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'type': opts['type'],
        'from': opts['from'],
        'to': opts['to'],
        'source': opts['source'],
        'sourceId': opts['sourceId']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/event/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange operation.
     * @callback module:api/AccountEventApi~eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCountStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count all events from a node of a sub-account for a given time-range
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [search] search term
     * @param {String} [type] search type
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [source] data source from which to get timestamp keys subaccount or ip
     * @param {String} [sourceId] source id from which to get timestamp keys subaccount or ip
     * @param {module:api/AccountEventApi~eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCountStat}
     */
    eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'type': opts['type'],
        'from': opts['from'],
        'to': opts['to'],
        'source': opts['source'],
        'sourceId': opts['sourceId']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCountStat;
      return this.apiClient.callApi(
        '/account/event/node/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGet operation.
     * @callback module:api/AccountEventApi~eventRouterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsQEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Event By Id
     * @param {String} xAccountApiKey Account API Key
     * @param {String} eventId the eventId that you want to retrieve
     * @param {module:api/AccountEventApi~eventRouterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsQEvent}
     */
    eventRouterGet(xAccountApiKey, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGet");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventRouterGet");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsQEvent;
      return this.apiClient.callApi(
        '/account/event/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange operation.
     * @callback module:api/AccountEventApi~eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all events of a sub-account from a specific node for a give time-range
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [search] search term
     * @param {String} [type] search type
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [source] data source from which to get timestamp keys subaccount or ip
     * @param {String} [sourceId] source id from which to get timestamp keys subaccount or ip
     * @param {module:api/AccountEventApi~eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsQEvent>}
     */
    eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'type': opts['type'],
        'from': opts['from'],
        'to': opts['to'],
        'source': opts['source'],
        'sourceId': opts['sourceId']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];
      return this.apiClient.callApi(
        '/account/event/node/timestampkeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGetAllEventsFromAAccountForAGivenTimeRange operation.
     * @callback module:api/AccountEventApi~eventRouterGetAllEventsFromAAccountForAGivenTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all events from a account for a given time-range
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [search] search term
     * @param {String} [type] search type
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [source] data source from which to get timestamp keys subaccount or ip
     * @param {String} [sourceId] source id from which to get timestamp keys subaccount or ip
     * @param {module:api/AccountEventApi~eventRouterGetAllEventsFromAAccountForAGivenTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsQEvent>}
     */
    eventRouterGetAllEventsFromAAccountForAGivenTimeRange(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventsFromAAccountForAGivenTimeRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search'],
        'type': opts['type'],
        'from': opts['from'],
        'to': opts['to'],
        'source': opts['source'],
        'sourceId': opts['sourceId']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];
      return this.apiClient.callApi(
        '/account/event/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed operation.
     * @callback module:api/AccountEventApi~eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all events from a account for a given time-range
     * @param {String} xAccountApiKey Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [type] search type
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @param {String} [filterEvent] filter event types
     * @param {String} [source] data source from which to get timestamp keys subaccount or ip
     * @param {String} [sourceId] source id from which to get timestamp keys subaccount or ip
     * @param {module:api/AccountEventApi~eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsQEvent>}
     */
    eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed(xAccountApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventsFromAnAccountWhichHasOnlyProccessed");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'from': opts['from'],
        'to': opts['to'],
        'filterEvent': opts['filterEvent'],
        'source': opts['source'],
        'sourceId': opts['sourceId']
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];
      return this.apiClient.callApi(
        '/account/event/node/eventType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGetAllEventsOfAAccountFromASpecificNode operation.
     * @callback module:api/AccountEventApi~eventRouterGetAllEventsOfAAccountFromASpecificNodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsQEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all events of a account from a specific node
     * @param {String} xAccountApiKey Account API Key
     * @param {module:api/AccountEventApi~eventRouterGetAllEventsOfAAccountFromASpecificNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsQEvent>}
     */
    eventRouterGetAllEventsOfAAccountFromASpecificNode(xAccountApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventsOfAAccountFromASpecificNode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsQEvent];
      return this.apiClient.callApi(
        '/account/event/node', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventRouterGetEventInNode operation.
     * @callback module:api/AccountEventApi~eventRouterGetEventInNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsQEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Event From Node by id
     * @param {String} xAccountApiKey Account API Key
     * @param {String} eventId the eventId that you want to retrieve
     * @param {module:api/AccountEventApi~eventRouterGetEventInNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsQEvent}
     */
    eventRouterGetEventInNode(xAccountApiKey, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'xAccountApiKey' is set
      if (xAccountApiKey === undefined || xAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetEventInNode");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventRouterGetEventInNode");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Account-ApiKey': xAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsQEvent;
      return this.apiClient.callApi(
        '/account/event/node/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
