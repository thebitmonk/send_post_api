/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Track service.
* @module api/TrackApi
* @version 1.0.0
*/
export default class TrackApi {

    /**
    * Constructs a new TrackApi. 
    * @alias module:api/TrackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the trackRouterTrackEmailOpen operation.
     * @callback module:api/TrackApi~trackRouterTrackEmailOpenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track Email Open
     * @param {Number} ipId The id of ip from which this email message was sent
     * @param {Number} accountId The id of account from which email is being sent
     * @param {Number} subAccountId The id of sub-account from which email is being sent
     * @param {String} messageId The UUID of message which was sent
     * @param {String} emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address
     * @param {module:api/TrackApi~trackRouterTrackEmailOpenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackEmailOpen(ipId, accountId, subAccountId, messageId, emailType, callback) {
      let postBody = null;
      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling trackRouterTrackEmailOpen");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling trackRouterTrackEmailOpen");
      }
      // verify the required parameter 'subAccountId' is set
      if (subAccountId === undefined || subAccountId === null) {
        throw new Error("Missing the required parameter 'subAccountId' when calling trackRouterTrackEmailOpen");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling trackRouterTrackEmailOpen");
      }
      // verify the required parameter 'emailType' is set
      if (emailType === undefined || emailType === null) {
        throw new Error("Missing the required parameter 'emailType' when calling trackRouterTrackEmailOpen");
      }

      let pathParams = {
        'ipId': ipId,
        'accountId': accountId,
        'subAccountId': subAccountId,
        'messageId': messageId,
        'emailType': emailType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/open/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}/1.png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackRouterTrackLinkClick operation.
     * @callback module:api/TrackApi~trackRouterTrackLinkClickCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track Link Click
     * @param {Number} ipId The id of ip from which this email message was sent
     * @param {Number} accountId The id of account from which email is being sent
     * @param {Number} subAccountId The id of sub-account from which email is being sent
     * @param {String} messageId The UUID of message which was sent
     * @param {String} emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address
     * @param {String} redirecturl The encoded redirect URL
     * @param {module:api/TrackApi~trackRouterTrackLinkClickCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackLinkClick(ipId, accountId, subAccountId, messageId, emailType, redirecturl, callback) {
      let postBody = null;
      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling trackRouterTrackLinkClick");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling trackRouterTrackLinkClick");
      }
      // verify the required parameter 'subAccountId' is set
      if (subAccountId === undefined || subAccountId === null) {
        throw new Error("Missing the required parameter 'subAccountId' when calling trackRouterTrackLinkClick");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling trackRouterTrackLinkClick");
      }
      // verify the required parameter 'emailType' is set
      if (emailType === undefined || emailType === null) {
        throw new Error("Missing the required parameter 'emailType' when calling trackRouterTrackLinkClick");
      }
      // verify the required parameter 'redirecturl' is set
      if (redirecturl === undefined || redirecturl === null) {
        throw new Error("Missing the required parameter 'redirecturl' when calling trackRouterTrackLinkClick");
      }

      let pathParams = {
        'ipId': ipId,
        'accountId': accountId,
        'subAccountId': subAccountId,
        'messageId': messageId,
        'emailType': emailType
      };
      let queryParams = {
        'redirecturl': redirecturl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/click/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackRouterTrackTPSPEmailOpen operation.
     * @callback module:api/TrackApi~trackRouterTrackTPSPEmailOpenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track TPSP Email Open
     * @param {Number} tpspId The id of tpsp from which this email message was sent
     * @param {Number} accountId The id of account from which email is being sent
     * @param {Number} subAccountId The id of sub-account from which email is being sent
     * @param {String} messageId The UUID of message which was sent
     * @param {String} emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address
     * @param {module:api/TrackApi~trackRouterTrackTPSPEmailOpenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackTPSPEmailOpen(tpspId, accountId, subAccountId, messageId, emailType, callback) {
      let postBody = null;
      // verify the required parameter 'tpspId' is set
      if (tpspId === undefined || tpspId === null) {
        throw new Error("Missing the required parameter 'tpspId' when calling trackRouterTrackTPSPEmailOpen");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling trackRouterTrackTPSPEmailOpen");
      }
      // verify the required parameter 'subAccountId' is set
      if (subAccountId === undefined || subAccountId === null) {
        throw new Error("Missing the required parameter 'subAccountId' when calling trackRouterTrackTPSPEmailOpen");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling trackRouterTrackTPSPEmailOpen");
      }
      // verify the required parameter 'emailType' is set
      if (emailType === undefined || emailType === null) {
        throw new Error("Missing the required parameter 'emailType' when calling trackRouterTrackTPSPEmailOpen");
      }

      let pathParams = {
        'tpspId': tpspId,
        'accountId': accountId,
        'subAccountId': subAccountId,
        'messageId': messageId,
        'emailType': emailType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/tpsp/open/{accountId}/{subAccountId}/{tpspId}/{emailType}/{messageId}/1.png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackRouterTrackTPSPLinkClick operation.
     * @callback module:api/TrackApi~trackRouterTrackTPSPLinkClickCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track TPSP Link Click
     * @param {Number} tpspId The id of tpsp from which this email message was sent
     * @param {Number} accountId The id of account from which email is being sent
     * @param {Number} subAccountId The id of sub-account from which email is being sent
     * @param {String} messageId The UUID of message which was sent
     * @param {String} emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address
     * @param {String} redirecturl The encoded redirect URL
     * @param {module:api/TrackApi~trackRouterTrackTPSPLinkClickCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackTPSPLinkClick(tpspId, accountId, subAccountId, messageId, emailType, redirecturl, callback) {
      let postBody = null;
      // verify the required parameter 'tpspId' is set
      if (tpspId === undefined || tpspId === null) {
        throw new Error("Missing the required parameter 'tpspId' when calling trackRouterTrackTPSPLinkClick");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling trackRouterTrackTPSPLinkClick");
      }
      // verify the required parameter 'subAccountId' is set
      if (subAccountId === undefined || subAccountId === null) {
        throw new Error("Missing the required parameter 'subAccountId' when calling trackRouterTrackTPSPLinkClick");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling trackRouterTrackTPSPLinkClick");
      }
      // verify the required parameter 'emailType' is set
      if (emailType === undefined || emailType === null) {
        throw new Error("Missing the required parameter 'emailType' when calling trackRouterTrackTPSPLinkClick");
      }
      // verify the required parameter 'redirecturl' is set
      if (redirecturl === undefined || redirecturl === null) {
        throw new Error("Missing the required parameter 'redirecturl' when calling trackRouterTrackTPSPLinkClick");
      }

      let pathParams = {
        'tpspId': tpspId,
        'accountId': accountId,
        'subAccountId': subAccountId,
        'messageId': messageId,
        'emailType': emailType
      };
      let queryParams = {
        'redirecturl': redirecturl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/tpsp/click/{accountId}/{subAccountId}/{tpspId}/{emailType}/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackRouterTrackUnsubscribe operation.
     * @callback module:api/TrackApi~trackRouterTrackUnsubscribeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * track link click
     * @param {Number} ipId The id of ip from which this email message was sent
     * @param {Number} accountId The id of account from which email is being sent
     * @param {Number} subAccountId The id of sub-account from which email is being sent
     * @param {String} messageId The UUID of message which was sent
     * @param {String} emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address
     * @param {module:api/TrackApi~trackRouterTrackUnsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackUnsubscribe(ipId, accountId, subAccountId, messageId, emailType, callback) {
      let postBody = null;
      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling trackRouterTrackUnsubscribe");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling trackRouterTrackUnsubscribe");
      }
      // verify the required parameter 'subAccountId' is set
      if (subAccountId === undefined || subAccountId === null) {
        throw new Error("Missing the required parameter 'subAccountId' when calling trackRouterTrackUnsubscribe");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling trackRouterTrackUnsubscribe");
      }
      // verify the required parameter 'emailType' is set
      if (emailType === undefined || emailType === null) {
        throw new Error("Missing the required parameter 'emailType' when calling trackRouterTrackUnsubscribe");
      }

      let pathParams = {
        'ipId': ipId,
        'accountId': accountId,
        'subAccountId': subAccountId,
        'messageId': messageId,
        'emailType': emailType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/unsubscribe/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackRouterTrackWelcomeLinkClick operation.
     * @callback module:api/TrackApi~trackRouterTrackWelcomeLinkClickCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track Welcome Link Click
     * @param {String} redirecturl The encoded redirect URL
     * @param {module:api/TrackApi~trackRouterTrackWelcomeLinkClickCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackRouterTrackWelcomeLinkClick(redirecturl, callback) {
      let postBody = null;
      // verify the required parameter 'redirecturl' is set
      if (redirecturl === undefined || redirecturl === null) {
        throw new Error("Missing the required parameter 'redirecturl' when calling trackRouterTrackWelcomeLinkClick");
      }

      let pathParams = {
      };
      let queryParams = {
        'redirecturl': redirecturl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/track/click/welcome', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
